{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Helpers to convert the change Payload into native JS types.\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.httpEndpointURL = exports.toTimestampString = exports.toArray = exports.toJson = exports.toNumber = exports.toBoolean = exports.convertCell = exports.convertColumn = exports.convertChangeData = exports.PostgresTypes = void 0;\n  // Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n  // 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n  var PostgresTypes;\n  (function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n  })(PostgresTypes || (exports.PostgresTypes = PostgresTypes = {}));\n  /**\n   * Takes an array of columns and an object of string values then converts each string value\n   * to its mapped type.\n   *\n   * @param {{name: String, type: String}[]} columns\n   * @param {Object} record\n   * @param {Object} options The map of various options that can be applied to the mapper\n   * @param {Array} options.skipTypes The array of types that should not be converted\n   *\n   * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n   * //=>{ first_name: 'Paul', age: 33 }\n   */\n  var convertChangeData = function (columns, record) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _a;\n    var skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n      acc[rec_key] = (0, exports.convertColumn)(rec_key, columns, record, skipTypes);\n      return acc;\n    }, {});\n  };\n  exports.convertChangeData = convertChangeData;\n  /**\n   * Converts the value of an individual column.\n   *\n   * @param {String} columnName The column that you want to convert\n   * @param {{name: String, type: String}[]} columns All of the columns\n   * @param {Object} record The map of string values\n   * @param {Array} skipTypes An array of types that should not be converted\n   * @return {object} Useless information\n   *\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n   * //=> 33\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n   * //=> \"33\"\n   */\n  var convertColumn = (columnName, columns, record, skipTypes) => {\n    var column = columns.find(x => x.name === columnName);\n    var colType = column === null || column === void 0 ? void 0 : column.type;\n    var value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n      return (0, exports.convertCell)(colType, value);\n    }\n    return noop(value);\n  };\n  exports.convertColumn = convertColumn;\n  /**\n   * If the value of the cell is `null`, returns null.\n   * Otherwise converts the string value to the correct type.\n   * @param {String} type A postgres column type\n   * @param {String} value The cell value\n   *\n   * @example convertCell('bool', 't')\n   * //=> true\n   * @example convertCell('int8', '10')\n   * //=> 10\n   * @example convertCell('_int4', '{1,2,3,4}')\n   * //=> [1,2,3,4]\n   */\n  var convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n      var dataType = type.slice(1, type.length);\n      return (0, exports.toArray)(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n      case PostgresTypes.bool:\n        return (0, exports.toBoolean)(value);\n      case PostgresTypes.float4:\n      case PostgresTypes.float8:\n      case PostgresTypes.int2:\n      case PostgresTypes.int4:\n      case PostgresTypes.int8:\n      case PostgresTypes.numeric:\n      case PostgresTypes.oid:\n        return (0, exports.toNumber)(value);\n      case PostgresTypes.json:\n      case PostgresTypes.jsonb:\n        return (0, exports.toJson)(value);\n      case PostgresTypes.timestamp:\n        return (0, exports.toTimestampString)(value);\n      // Format to be consistent with PostgREST\n      case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n      case PostgresTypes.date: // To allow users to cast it based on Timezone\n      case PostgresTypes.daterange:\n      case PostgresTypes.int4range:\n      case PostgresTypes.int8range:\n      case PostgresTypes.money:\n      case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n      case PostgresTypes.text:\n      case PostgresTypes.time: // To allow users to cast it based on Timezone\n      case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n      case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n      case PostgresTypes.tsrange:\n      case PostgresTypes.tstzrange:\n        return noop(value);\n      default:\n        // Return the value for remaining types\n        return noop(value);\n    }\n  };\n  exports.convertCell = convertCell;\n  var noop = value => {\n    return value;\n  };\n  var toBoolean = value => {\n    switch (value) {\n      case 't':\n        return true;\n      case 'f':\n        return false;\n      default:\n        return value;\n    }\n  };\n  exports.toBoolean = toBoolean;\n  var toNumber = value => {\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      if (!Number.isNaN(parsedValue)) {\n        return parsedValue;\n      }\n    }\n    return value;\n  };\n  exports.toNumber = toNumber;\n  var toJson = value => {\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n        return value;\n      }\n    }\n    return value;\n  };\n  exports.toJson = toJson;\n  /**\n   * Converts a Postgres Array into a native JS array\n   *\n   * @example toArray('{}', 'int4')\n   * //=> []\n   * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n   * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n   * @example toArray([1,2,3,4], 'int4')\n   * //=> [1,2,3,4]\n   */\n  var toArray = (value, type) => {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    var lastIdx = value.length - 1;\n    var closeBrace = value[lastIdx];\n    var openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n      var arr;\n      var valTrim = value.slice(1, lastIdx);\n      // TODO: find a better solution to separate Postgres array data\n      try {\n        arr = JSON.parse('[' + valTrim + ']');\n      } catch (_) {\n        // WARNING: splitting on comma does not cover all edge cases\n        arr = valTrim ? valTrim.split(',') : [];\n      }\n      return arr.map(val => (0, exports.convertCell)(type, val));\n    }\n    return value;\n  };\n  exports.toArray = toArray;\n  /**\n   * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n   * See https://github.com/supabase/supabase/issues/18\n   *\n   * @example toTimestampString('2019-09-10 00:00:00')\n   * //=> '2019-09-10T00:00:00'\n   */\n  var toTimestampString = value => {\n    if (typeof value === 'string') {\n      return value.replace(' ', 'T');\n    }\n    return value;\n  };\n  exports.toTimestampString = toTimestampString;\n  var httpEndpointURL = socketUrl => {\n    var url = socketUrl;\n    url = url.replace(/^ws/i, 'http');\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\n    return url.replace(/\\/+$/, '') + '/api/broadcast';\n  };\n  exports.httpEndpointURL = httpEndpointURL;\n});","lineCount":233,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,2,5,0,"Object"],[7,8,5,6],[7,9,5,7,"defineProperty"],[7,23,5,21],[7,24,5,22,"exports"],[7,31,5,29],[7,33,5,31],[7,45,5,43],[7,47,5,45],[8,4,5,47,"value"],[8,9,5,52],[8,11,5,54],[9,2,5,59],[9,3,5,60],[9,4,5,61],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"httpEndpointURL"],[10,25,6,23],[10,28,6,26,"exports"],[10,35,6,33],[10,36,6,34,"toTimestampString"],[10,53,6,51],[10,56,6,54,"exports"],[10,63,6,61],[10,64,6,62,"toArray"],[10,71,6,69],[10,74,6,72,"exports"],[10,81,6,79],[10,82,6,80,"toJson"],[10,88,6,86],[10,91,6,89,"exports"],[10,98,6,96],[10,99,6,97,"toNumber"],[10,107,6,105],[10,110,6,108,"exports"],[10,117,6,115],[10,118,6,116,"toBoolean"],[10,127,6,125],[10,130,6,128,"exports"],[10,137,6,135],[10,138,6,136,"convertCell"],[10,149,6,147],[10,152,6,150,"exports"],[10,159,6,157],[10,160,6,158,"convertColumn"],[10,173,6,171],[10,176,6,174,"exports"],[10,183,6,181],[10,184,6,182,"convertChangeData"],[10,201,6,199],[10,204,6,202,"exports"],[10,211,6,209],[10,212,6,210,"PostgresTypes"],[10,225,6,223],[10,228,6,226],[10,233,6,231],[10,234,6,232],[11,2,7,0],[12,2,8,0],[13,2,9,0],[13,6,9,4,"PostgresTypes"],[13,19,9,17],[14,2,10,0],[14,3,10,1],[14,13,10,11,"PostgresTypes"],[14,26,10,24],[14,28,10,26],[15,4,11,4,"PostgresTypes"],[15,17,11,17],[15,18,11,18],[15,27,11,27],[15,28,11,28],[15,31,11,31],[15,40,11,40],[16,4,12,4,"PostgresTypes"],[16,17,12,17],[16,18,12,18],[16,24,12,24],[16,25,12,25],[16,28,12,28],[16,34,12,34],[17,4,13,4,"PostgresTypes"],[17,17,13,17],[17,18,13,18],[17,24,13,24],[17,25,13,25],[17,28,13,28],[17,34,13,34],[18,4,14,4,"PostgresTypes"],[18,17,14,17],[18,18,14,18],[18,29,14,29],[18,30,14,30],[18,33,14,33],[18,44,14,44],[19,4,15,4,"PostgresTypes"],[19,17,15,17],[19,18,15,18],[19,26,15,26],[19,27,15,27],[19,30,15,30],[19,38,15,38],[20,4,16,4,"PostgresTypes"],[20,17,16,17],[20,18,16,18],[20,26,16,26],[20,27,16,27],[20,30,16,30],[20,38,16,38],[21,4,17,4,"PostgresTypes"],[21,17,17,17],[21,18,17,18],[21,24,17,24],[21,25,17,25],[21,28,17,28],[21,34,17,34],[22,4,18,4,"PostgresTypes"],[22,17,18,17],[22,18,18,18],[22,24,18,24],[22,25,18,25],[22,28,18,28],[22,34,18,34],[23,4,19,4,"PostgresTypes"],[23,17,19,17],[23,18,19,18],[23,29,19,29],[23,30,19,30],[23,33,19,33],[23,44,19,44],[24,4,20,4,"PostgresTypes"],[24,17,20,17],[24,18,20,18],[24,24,20,24],[24,25,20,25],[24,28,20,28],[24,34,20,34],[25,4,21,4,"PostgresTypes"],[25,17,21,17],[25,18,21,18],[25,29,21,29],[25,30,21,30],[25,33,21,33],[25,44,21,44],[26,4,22,4,"PostgresTypes"],[26,17,22,17],[26,18,22,18],[26,24,22,24],[26,25,22,25],[26,28,22,28],[26,34,22,34],[27,4,23,4,"PostgresTypes"],[27,17,23,17],[27,18,23,18],[27,25,23,25],[27,26,23,26],[27,29,23,29],[27,36,23,36],[28,4,24,4,"PostgresTypes"],[28,17,24,17],[28,18,24,18],[28,25,24,25],[28,26,24,26],[28,29,24,29],[28,36,24,36],[29,4,25,4,"PostgresTypes"],[29,17,25,17],[29,18,25,18],[29,27,25,27],[29,28,25,28],[29,31,25,31],[29,40,25,40],[30,4,26,4,"PostgresTypes"],[30,17,26,17],[30,18,26,18],[30,23,26,23],[30,24,26,24],[30,27,26,27],[30,32,26,32],[31,4,27,4,"PostgresTypes"],[31,17,27,17],[31,18,27,18],[31,27,27,27],[31,28,27,28],[31,31,27,31],[31,40,27,40],[32,4,28,4,"PostgresTypes"],[32,17,28,17],[32,18,28,18],[32,24,28,24],[32,25,28,25],[32,28,28,28],[32,34,28,34],[33,4,29,4,"PostgresTypes"],[33,17,29,17],[33,18,29,18],[33,24,29,24],[33,25,29,25],[33,28,29,28],[33,34,29,34],[34,4,30,4,"PostgresTypes"],[34,17,30,17],[34,18,30,18],[34,29,30,29],[34,30,30,30],[34,33,30,33],[34,44,30,44],[35,4,31,4,"PostgresTypes"],[35,17,31,17],[35,18,31,18],[35,31,31,31],[35,32,31,32],[35,35,31,35],[35,48,31,48],[36,4,32,4,"PostgresTypes"],[36,17,32,17],[36,18,32,18],[36,26,32,26],[36,27,32,27],[36,30,32,30],[36,38,32,38],[37,4,33,4,"PostgresTypes"],[37,17,33,17],[37,18,33,18],[37,27,33,27],[37,28,33,28],[37,31,33,31],[37,40,33,40],[38,4,34,4,"PostgresTypes"],[38,17,34,17],[38,18,34,18],[38,29,34,29],[38,30,34,30],[38,33,34,33],[38,44,34,44],[39,2,35,0],[39,3,35,1],[39,5,35,3,"PostgresTypes"],[39,18,35,16],[39,23,35,21,"exports"],[39,30,35,28],[39,31,35,29,"PostgresTypes"],[39,44,35,42],[39,47,35,45,"PostgresTypes"],[39,60,35,58],[39,63,35,61],[39,64,35,62],[39,65,35,63],[39,66,35,64],[39,67,35,65],[40,2,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,2,48,0],[52,6,48,6,"convertChangeData"],[52,23,48,23],[52,26,48,26],[52,35,48,26,"convertChangeData"],[52,36,48,27,"columns"],[52,43,48,34],[52,45,48,36,"record"],[52,51,48,42],[52,53,48,61],[53,4,48,61],[53,8,48,44,"options"],[53,15,48,51],[53,18,48,51,"arguments"],[53,27,48,51],[53,28,48,51,"length"],[53,34,48,51],[53,42,48,51,"arguments"],[53,51,48,51],[53,59,48,51,"undefined"],[53,68,48,51],[53,71,48,51,"arguments"],[53,80,48,51],[53,86,48,54],[53,87,48,55],[53,88,48,56],[54,4,49,4],[54,8,49,8,"_a"],[54,10,49,10],[55,4,50,4],[55,8,50,10,"skipTypes"],[55,17,50,19],[55,20,50,22],[55,21,50,23,"_a"],[55,23,50,25],[55,26,50,28,"options"],[55,33,50,35],[55,34,50,36,"skipTypes"],[55,43,50,45],[55,49,50,51],[55,53,50,55],[55,57,50,59,"_a"],[55,59,50,61],[55,64,50,66],[55,69,50,71],[55,70,50,72],[55,73,50,75,"_a"],[55,75,50,77],[55,78,50,80],[55,80,50,82],[56,4,51,4],[56,11,51,11,"Object"],[56,17,51,17],[56,18,51,18,"keys"],[56,22,51,22],[56,23,51,23,"record"],[56,29,51,29],[56,30,51,30],[56,31,51,31,"reduce"],[56,37,51,37],[56,38,51,38],[56,39,51,39,"acc"],[56,42,51,42],[56,44,51,44,"rec_key"],[56,51,51,51],[56,56,51,56],[57,6,52,8,"acc"],[57,9,52,11],[57,10,52,12,"rec_key"],[57,17,52,19],[57,18,52,20],[57,21,52,23],[57,22,52,24],[57,23,52,25],[57,25,52,27,"exports"],[57,32,52,34],[57,33,52,35,"convertColumn"],[57,46,52,48],[57,48,52,50,"rec_key"],[57,55,52,57],[57,57,52,59,"columns"],[57,64,52,66],[57,66,52,68,"record"],[57,72,52,74],[57,74,52,76,"skipTypes"],[57,83,52,85],[57,84,52,86],[58,6,53,8],[58,13,53,15,"acc"],[58,16,53,18],[59,4,54,4],[59,5,54,5],[59,7,54,7],[59,8,54,8],[59,9,54,9],[59,10,54,10],[60,2,55,0],[60,3,55,1],[61,2,56,0,"exports"],[61,9,56,7],[61,10,56,8,"convertChangeData"],[61,27,56,25],[61,30,56,28,"convertChangeData"],[61,47,56,45],[62,2,57,0],[63,0,58,0],[64,0,59,0],[65,0,60,0],[66,0,61,0],[67,0,62,0],[68,0,63,0],[69,0,64,0],[70,0,65,0],[71,0,66,0],[72,0,67,0],[73,0,68,0],[74,0,69,0],[75,0,70,0],[76,2,71,0],[76,6,71,6,"convertColumn"],[76,19,71,19],[76,22,71,22,"convertColumn"],[76,23,71,23,"columnName"],[76,33,71,33],[76,35,71,35,"columns"],[76,42,71,42],[76,44,71,44,"record"],[76,50,71,50],[76,52,71,52,"skipTypes"],[76,61,71,61],[76,66,71,66],[77,4,72,4],[77,8,72,10,"column"],[77,14,72,16],[77,17,72,19,"columns"],[77,24,72,26],[77,25,72,27,"find"],[77,29,72,31],[77,30,72,33,"x"],[77,31,72,34],[77,35,72,39,"x"],[77,36,72,40],[77,37,72,41,"name"],[77,41,72,45],[77,46,72,50,"columnName"],[77,56,72,60],[77,57,72,61],[78,4,73,4],[78,8,73,10,"colType"],[78,15,73,17],[78,18,73,20,"column"],[78,24,73,26],[78,29,73,31],[78,33,73,35],[78,37,73,39,"column"],[78,43,73,45],[78,48,73,50],[78,53,73,55],[78,54,73,56],[78,57,73,59],[78,62,73,64],[78,63,73,65],[78,66,73,68,"column"],[78,72,73,74],[78,73,73,75,"type"],[78,77,73,79],[79,4,74,4],[79,8,74,10,"value"],[79,13,74,15],[79,16,74,18,"record"],[79,22,74,24],[79,23,74,25,"columnName"],[79,33,74,35],[79,34,74,36],[80,4,75,4],[80,8,75,8,"colType"],[80,15,75,15],[80,19,75,19],[80,20,75,20,"skipTypes"],[80,29,75,29],[80,30,75,30,"includes"],[80,38,75,38],[80,39,75,39,"colType"],[80,46,75,46],[80,47,75,47],[80,49,75,49],[81,6,76,8],[81,13,76,15],[81,14,76,16],[81,15,76,17],[81,17,76,19,"exports"],[81,24,76,26],[81,25,76,27,"convertCell"],[81,36,76,38],[81,38,76,40,"colType"],[81,45,76,47],[81,47,76,49,"value"],[81,52,76,54],[81,53,76,55],[82,4,77,4],[83,4,78,4],[83,11,78,11,"noop"],[83,15,78,15],[83,16,78,16,"value"],[83,21,78,21],[83,22,78,22],[84,2,79,0],[84,3,79,1],[85,2,80,0,"exports"],[85,9,80,7],[85,10,80,8,"convertColumn"],[85,23,80,21],[85,26,80,24,"convertColumn"],[85,39,80,37],[86,2,81,0],[87,0,82,0],[88,0,83,0],[89,0,84,0],[90,0,85,0],[91,0,86,0],[92,0,87,0],[93,0,88,0],[94,0,89,0],[95,0,90,0],[96,0,91,0],[97,0,92,0],[98,0,93,0],[99,2,94,0],[99,6,94,6,"convertCell"],[99,17,94,17],[99,20,94,20,"convertCell"],[99,21,94,21,"type"],[99,25,94,25],[99,27,94,27,"value"],[99,32,94,32],[99,37,94,37],[100,4,95,4],[101,4,96,4],[101,8,96,8,"type"],[101,12,96,12],[101,13,96,13,"charAt"],[101,19,96,19],[101,20,96,20],[101,21,96,21],[101,22,96,22],[101,27,96,27],[101,30,96,30],[101,32,96,32],[102,6,97,8],[102,10,97,14,"dataType"],[102,18,97,22],[102,21,97,25,"type"],[102,25,97,29],[102,26,97,30,"slice"],[102,31,97,35],[102,32,97,36],[102,33,97,37],[102,35,97,39,"type"],[102,39,97,43],[102,40,97,44,"length"],[102,46,97,50],[102,47,97,51],[103,6,98,8],[103,13,98,15],[103,14,98,16],[103,15,98,17],[103,17,98,19,"exports"],[103,24,98,26],[103,25,98,27,"toArray"],[103,32,98,34],[103,34,98,36,"value"],[103,39,98,41],[103,41,98,43,"dataType"],[103,49,98,51],[103,50,98,52],[104,4,99,4],[105,4,100,4],[106,4,101,4],[106,12,101,12,"type"],[106,16,101,16],[107,6,102,8],[107,11,102,13,"PostgresTypes"],[107,24,102,26],[107,25,102,27,"bool"],[107,29,102,31],[108,8,103,12],[108,15,103,19],[108,16,103,20],[108,17,103,21],[108,19,103,23,"exports"],[108,26,103,30],[108,27,103,31,"toBoolean"],[108,36,103,40],[108,38,103,42,"value"],[108,43,103,47],[108,44,103,48],[109,6,104,8],[109,11,104,13,"PostgresTypes"],[109,24,104,26],[109,25,104,27,"float4"],[109,31,104,33],[110,6,105,8],[110,11,105,13,"PostgresTypes"],[110,24,105,26],[110,25,105,27,"float8"],[110,31,105,33],[111,6,106,8],[111,11,106,13,"PostgresTypes"],[111,24,106,26],[111,25,106,27,"int2"],[111,29,106,31],[112,6,107,8],[112,11,107,13,"PostgresTypes"],[112,24,107,26],[112,25,107,27,"int4"],[112,29,107,31],[113,6,108,8],[113,11,108,13,"PostgresTypes"],[113,24,108,26],[113,25,108,27,"int8"],[113,29,108,31],[114,6,109,8],[114,11,109,13,"PostgresTypes"],[114,24,109,26],[114,25,109,27,"numeric"],[114,32,109,34],[115,6,110,8],[115,11,110,13,"PostgresTypes"],[115,24,110,26],[115,25,110,27,"oid"],[115,28,110,30],[116,8,111,12],[116,15,111,19],[116,16,111,20],[116,17,111,21],[116,19,111,23,"exports"],[116,26,111,30],[116,27,111,31,"toNumber"],[116,35,111,39],[116,37,111,41,"value"],[116,42,111,46],[116,43,111,47],[117,6,112,8],[117,11,112,13,"PostgresTypes"],[117,24,112,26],[117,25,112,27,"json"],[117,29,112,31],[118,6,113,8],[118,11,113,13,"PostgresTypes"],[118,24,113,26],[118,25,113,27,"jsonb"],[118,30,113,32],[119,8,114,12],[119,15,114,19],[119,16,114,20],[119,17,114,21],[119,19,114,23,"exports"],[119,26,114,30],[119,27,114,31,"toJson"],[119,33,114,37],[119,35,114,39,"value"],[119,40,114,44],[119,41,114,45],[120,6,115,8],[120,11,115,13,"PostgresTypes"],[120,24,115,26],[120,25,115,27,"timestamp"],[120,34,115,36],[121,8,116,12],[121,15,116,19],[121,16,116,20],[121,17,116,21],[121,19,116,23,"exports"],[121,26,116,30],[121,27,116,31,"toTimestampString"],[121,44,116,48],[121,46,116,50,"value"],[121,51,116,55],[121,52,116,56],[122,6,116,58],[123,6,117,8],[123,11,117,13,"PostgresTypes"],[123,24,117,26],[123,25,117,27,"abstime"],[123,32,117,34],[123,33,117,35],[123,34,117,36],[124,6,118,8],[124,11,118,13,"PostgresTypes"],[124,24,118,26],[124,25,118,27,"date"],[124,29,118,31],[124,30,118,32],[124,31,118,33],[125,6,119,8],[125,11,119,13,"PostgresTypes"],[125,24,119,26],[125,25,119,27,"daterange"],[125,34,119,36],[126,6,120,8],[126,11,120,13,"PostgresTypes"],[126,24,120,26],[126,25,120,27,"int4range"],[126,34,120,36],[127,6,121,8],[127,11,121,13,"PostgresTypes"],[127,24,121,26],[127,25,121,27,"int8range"],[127,34,121,36],[128,6,122,8],[128,11,122,13,"PostgresTypes"],[128,24,122,26],[128,25,122,27,"money"],[128,30,122,32],[129,6,123,8],[129,11,123,13,"PostgresTypes"],[129,24,123,26],[129,25,123,27,"reltime"],[129,32,123,34],[129,33,123,35],[129,34,123,36],[130,6,124,8],[130,11,124,13,"PostgresTypes"],[130,24,124,26],[130,25,124,27,"text"],[130,29,124,31],[131,6,125,8],[131,11,125,13,"PostgresTypes"],[131,24,125,26],[131,25,125,27,"time"],[131,29,125,31],[131,30,125,32],[131,31,125,33],[132,6,126,8],[132,11,126,13,"PostgresTypes"],[132,24,126,26],[132,25,126,27,"timestamptz"],[132,36,126,38],[132,37,126,39],[132,38,126,40],[133,6,127,8],[133,11,127,13,"PostgresTypes"],[133,24,127,26],[133,25,127,27,"timetz"],[133,31,127,33],[133,32,127,34],[133,33,127,35],[134,6,128,8],[134,11,128,13,"PostgresTypes"],[134,24,128,26],[134,25,128,27,"tsrange"],[134,32,128,34],[135,6,129,8],[135,11,129,13,"PostgresTypes"],[135,24,129,26],[135,25,129,27,"tstzrange"],[135,34,129,36],[136,8,130,12],[136,15,130,19,"noop"],[136,19,130,23],[136,20,130,24,"value"],[136,25,130,29],[136,26,130,30],[137,6,131,8],[138,8,132,12],[139,8,133,12],[139,15,133,19,"noop"],[139,19,133,23],[139,20,133,24,"value"],[139,25,133,29],[139,26,133,30],[140,4,134,4],[141,2,135,0],[141,3,135,1],[142,2,136,0,"exports"],[142,9,136,7],[142,10,136,8,"convertCell"],[142,21,136,19],[142,24,136,22,"convertCell"],[142,35,136,33],[143,2,137,0],[143,6,137,6,"noop"],[143,10,137,10],[143,13,137,14,"value"],[143,18,137,19],[143,22,137,24],[144,4,138,4],[144,11,138,11,"value"],[144,16,138,16],[145,2,139,0],[145,3,139,1],[146,2,140,0],[146,6,140,6,"toBoolean"],[146,15,140,15],[146,18,140,19,"value"],[146,23,140,24],[146,27,140,29],[147,4,141,4],[147,12,141,12,"value"],[147,17,141,17],[148,6,142,8],[148,11,142,13],[148,14,142,16],[149,8,143,12],[149,15,143,19],[149,19,143,23],[150,6,144,8],[150,11,144,13],[150,14,144,16],[151,8,145,12],[151,15,145,19],[151,20,145,24],[152,6,146,8],[153,8,147,12],[153,15,147,19,"value"],[153,20,147,24],[154,4,148,4],[155,2,149,0],[155,3,149,1],[156,2,150,0,"exports"],[156,9,150,7],[156,10,150,8,"toBoolean"],[156,19,150,17],[156,22,150,20,"toBoolean"],[156,31,150,29],[157,2,151,0],[157,6,151,6,"toNumber"],[157,14,151,14],[157,17,151,18,"value"],[157,22,151,23],[157,26,151,28],[158,4,152,4],[158,8,152,8],[158,15,152,15,"value"],[158,20,152,20],[158,25,152,25],[158,33,152,33],[158,35,152,35],[159,6,153,8],[159,10,153,14,"parsedValue"],[159,21,153,25],[159,24,153,28,"parseFloat"],[159,34,153,38],[159,35,153,39,"value"],[159,40,153,44],[159,41,153,45],[160,6,154,8],[160,10,154,12],[160,11,154,13,"Number"],[160,17,154,19],[160,18,154,20,"isNaN"],[160,23,154,25],[160,24,154,26,"parsedValue"],[160,35,154,37],[160,36,154,38],[160,38,154,40],[161,8,155,12],[161,15,155,19,"parsedValue"],[161,26,155,30],[162,6,156,8],[163,4,157,4],[164,4,158,4],[164,11,158,11,"value"],[164,16,158,16],[165,2,159,0],[165,3,159,1],[166,2,160,0,"exports"],[166,9,160,7],[166,10,160,8,"toNumber"],[166,18,160,16],[166,21,160,19,"toNumber"],[166,29,160,27],[167,2,161,0],[167,6,161,6,"toJson"],[167,12,161,12],[167,15,161,16,"value"],[167,20,161,21],[167,24,161,26],[168,4,162,4],[168,8,162,8],[168,15,162,15,"value"],[168,20,162,20],[168,25,162,25],[168,33,162,33],[168,35,162,35],[169,6,163,8],[169,10,163,12],[170,8,164,12],[170,15,164,19,"JSON"],[170,19,164,23],[170,20,164,24,"parse"],[170,25,164,29],[170,26,164,30,"value"],[170,31,164,35],[170,32,164,36],[171,6,165,8],[171,7,165,9],[171,8,166,8],[171,15,166,15,"error"],[171,20,166,20],[171,22,166,22],[172,8,167,12,"console"],[172,15,167,19],[172,16,167,20,"log"],[172,19,167,23],[172,20,167,24],[172,41,167,45,"error"],[172,46,167,50],[172,48,167,52],[172,49,167,53],[173,8,168,12],[173,15,168,19,"value"],[173,20,168,24],[174,6,169,8],[175,4,170,4],[176,4,171,4],[176,11,171,11,"value"],[176,16,171,16],[177,2,172,0],[177,3,172,1],[178,2,173,0,"exports"],[178,9,173,7],[178,10,173,8,"toJson"],[178,16,173,14],[178,19,173,17,"toJson"],[178,25,173,23],[179,2,174,0],[180,0,175,0],[181,0,176,0],[182,0,177,0],[183,0,178,0],[184,0,179,0],[185,0,180,0],[186,0,181,0],[187,0,182,0],[188,0,183,0],[189,2,184,0],[189,6,184,6,"toArray"],[189,13,184,13],[189,16,184,16,"toArray"],[189,17,184,17,"value"],[189,22,184,22],[189,24,184,24,"type"],[189,28,184,28],[189,33,184,33],[190,4,185,4],[190,8,185,8],[190,15,185,15,"value"],[190,20,185,20],[190,25,185,25],[190,33,185,33],[190,35,185,35],[191,6,186,8],[191,13,186,15,"value"],[191,18,186,20],[192,4,187,4],[193,4,188,4],[193,8,188,10,"lastIdx"],[193,15,188,17],[193,18,188,20,"value"],[193,23,188,25],[193,24,188,26,"length"],[193,30,188,32],[193,33,188,35],[193,34,188,36],[194,4,189,4],[194,8,189,10,"closeBrace"],[194,18,189,20],[194,21,189,23,"value"],[194,26,189,28],[194,27,189,29,"lastIdx"],[194,34,189,36],[194,35,189,37],[195,4,190,4],[195,8,190,10,"openBrace"],[195,17,190,19],[195,20,190,22,"value"],[195,25,190,27],[195,26,190,28],[195,27,190,29],[195,28,190,30],[196,4,191,4],[197,4,192,4],[197,8,192,8,"openBrace"],[197,17,192,17],[197,22,192,22],[197,25,192,25],[197,29,192,29,"closeBrace"],[197,39,192,39],[197,44,192,44],[197,47,192,47],[197,49,192,49],[198,6,193,8],[198,10,193,12,"arr"],[198,13,193,15],[199,6,194,8],[199,10,194,14,"valTrim"],[199,17,194,21],[199,20,194,24,"value"],[199,25,194,29],[199,26,194,30,"slice"],[199,31,194,35],[199,32,194,36],[199,33,194,37],[199,35,194,39,"lastIdx"],[199,42,194,46],[199,43,194,47],[200,6,195,8],[201,6,196,8],[201,10,196,12],[202,8,197,12,"arr"],[202,11,197,15],[202,14,197,18,"JSON"],[202,18,197,22],[202,19,197,23,"parse"],[202,24,197,28],[202,25,197,29],[202,28,197,32],[202,31,197,35,"valTrim"],[202,38,197,42],[202,41,197,45],[202,44,197,48],[202,45,197,49],[203,6,198,8],[203,7,198,9],[203,8,199,8],[203,15,199,15,"_"],[203,16,199,16],[203,18,199,18],[204,8,200,12],[205,8,201,12,"arr"],[205,11,201,15],[205,14,201,18,"valTrim"],[205,21,201,25],[205,24,201,28,"valTrim"],[205,31,201,35],[205,32,201,36,"split"],[205,37,201,41],[205,38,201,42],[205,41,201,45],[205,42,201,46],[205,45,201,49],[205,47,201,51],[206,6,202,8],[207,6,203,8],[207,13,203,15,"arr"],[207,16,203,18],[207,17,203,19,"map"],[207,20,203,22],[207,21,203,24,"val"],[207,24,203,27],[207,28,203,32],[207,29,203,33],[207,30,203,34],[207,32,203,36,"exports"],[207,39,203,43],[207,40,203,44,"convertCell"],[207,51,203,55],[207,53,203,57,"type"],[207,57,203,61],[207,59,203,63,"val"],[207,62,203,66],[207,63,203,67],[207,64,203,68],[208,4,204,4],[209,4,205,4],[209,11,205,11,"value"],[209,16,205,16],[210,2,206,0],[210,3,206,1],[211,2,207,0,"exports"],[211,9,207,7],[211,10,207,8,"toArray"],[211,17,207,15],[211,20,207,18,"toArray"],[211,27,207,25],[212,2,208,0],[213,0,209,0],[214,0,210,0],[215,0,211,0],[216,0,212,0],[217,0,213,0],[218,0,214,0],[219,2,215,0],[219,6,215,6,"toTimestampString"],[219,23,215,23],[219,26,215,27,"value"],[219,31,215,32],[219,35,215,37],[220,4,216,4],[220,8,216,8],[220,15,216,15,"value"],[220,20,216,20],[220,25,216,25],[220,33,216,33],[220,35,216,35],[221,6,217,8],[221,13,217,15,"value"],[221,18,217,20],[221,19,217,21,"replace"],[221,26,217,28],[221,27,217,29],[221,30,217,32],[221,32,217,34],[221,35,217,37],[221,36,217,38],[222,4,218,4],[223,4,219,4],[223,11,219,11,"value"],[223,16,219,16],[224,2,220,0],[224,3,220,1],[225,2,221,0,"exports"],[225,9,221,7],[225,10,221,8,"toTimestampString"],[225,27,221,25],[225,30,221,28,"toTimestampString"],[225,47,221,45],[226,2,222,0],[226,6,222,6,"httpEndpointURL"],[226,21,222,21],[226,24,222,25,"socketUrl"],[226,33,222,34],[226,37,222,39],[227,4,223,4],[227,8,223,8,"url"],[227,11,223,11],[227,14,223,14,"socketUrl"],[227,23,223,23],[228,4,224,4,"url"],[228,7,224,7],[228,10,224,10,"url"],[228,13,224,13],[228,14,224,14,"replace"],[228,21,224,21],[228,22,224,22],[228,28,224,28],[228,30,224,30],[228,36,224,36],[228,37,224,37],[229,4,225,4,"url"],[229,7,225,7],[229,10,225,10,"url"],[229,13,225,13],[229,14,225,14,"replace"],[229,21,225,21],[229,22,225,22],[229,71,225,71],[229,73,225,73],[229,75,225,75],[229,76,225,76],[230,4,226,4],[230,11,226,11,"url"],[230,14,226,14],[230,15,226,15,"replace"],[230,22,226,22],[230,23,226,23],[230,29,226,29],[230,31,226,31],[230,33,226,33],[230,34,226,34],[230,37,226,37],[230,53,226,53],[231,2,227,0],[231,3,227,1],[232,2,228,0,"exports"],[232,9,228,7],[232,10,228,8,"httpEndpointURL"],[232,25,228,23],[232,28,228,26,"httpEndpointURL"],[232,43,228,41],[233,0,228,42],[233,3]],"functionMap":{"names":["<global>","<anonymous>","convertChangeData","Object.keys.reduce$argument_0","convertColumn","columns.find$argument_0","convertCell","noop","toBoolean","toNumber","toJson","toArray","arr.map$argument_0","toTimestampString","httpEndpointURL"],"mappings":"AAA;CCS;CDyB;0BEa;sCCG;KDG;CFC;sBIgB;gCCC,4BD;CJO;oBMe;CNyC;aOE;CPE;kBQC;CRS;iBSE;CTQ;eUE;CVW;gBWY;uBCmB,4CD;CXG;0BaS;CbK;wBcE;CdK"},"hasCjsExports":true},"type":"js/module"}]}