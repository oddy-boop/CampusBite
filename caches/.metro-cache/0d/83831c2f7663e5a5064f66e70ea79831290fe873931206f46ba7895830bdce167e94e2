{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@supabase/node-fetch","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":37,"index":267},"end":{"line":7,"column":68,"index":298}}],"key":"N2iHN7T/eRWsO1F+2LWpBs4eG0U=","exportNames":["*"],"imports":1}},{"name":"./PostgrestError","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":41,"index":342},"end":{"line":8,"column":68,"index":369}}],"key":"Ek2QNNEtzKsk35jS8iyuZ6VFiDk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _asyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\").default;\n  var _classCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\").default;\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  // @ts-ignore\n  var node_fetch_1 = __importDefault(require(_dependencyMap[3], \"@supabase/node-fetch\"));\n  var PostgrestError_1 = __importDefault(require(_dependencyMap[4], \"./PostgrestError\"));\n  var PostgrestBuilder = /*#__PURE__*/function () {\n    function PostgrestBuilder(builder) {\n      _classCallCheck(this, PostgrestBuilder);\n      var _a, _b;\n      this.shouldThrowOnError = false;\n      this.method = builder.method;\n      this.url = builder.url;\n      this.headers = new Headers(builder.headers);\n      this.schema = builder.schema;\n      this.body = builder.body;\n      this.shouldThrowOnError = (_a = builder.shouldThrowOnError) !== null && _a !== void 0 ? _a : false;\n      this.signal = builder.signal;\n      this.isMaybeSingle = (_b = builder.isMaybeSingle) !== null && _b !== void 0 ? _b : false;\n      if (builder.fetch) {\n        this.fetch = builder.fetch;\n      } else if (typeof fetch === 'undefined') {\n        this.fetch = node_fetch_1.default;\n      } else {\n        this.fetch = fetch;\n      }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    return _createClass(PostgrestBuilder, [{\n      key: \"throwOnError\",\n      value: function throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n      }\n      /**\n       * Set an HTTP header for the request.\n       */\n    }, {\n      key: \"setHeader\",\n      value: function setHeader(name, value) {\n        this.headers = new Headers(this.headers);\n        this.headers.set(name, value);\n        return this;\n      }\n    }, {\n      key: \"then\",\n      value: function then(onfulfilled, onrejected) {\n        var _this = this;\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n          // skip\n        } else if (['GET', 'HEAD'].includes(this.method)) {\n          this.headers.set('Accept-Profile', this.schema);\n        } else {\n          this.headers.set('Content-Profile', this.schema);\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n          this.headers.set('Content-Type', 'application/json');\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        var _fetch = this.fetch;\n        var res = _fetch(this.url.toString(), {\n          method: this.method,\n          headers: this.headers,\n          body: JSON.stringify(this.body),\n          signal: this.signal\n        }).then(/*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (res) {\n            var _a, _b, _c, _d;\n            var error = null;\n            var data = null;\n            var count = null;\n            var status = res.status;\n            var statusText = res.statusText;\n            if (res.ok) {\n              if (_this.method !== 'HEAD') {\n                var body = yield res.text();\n                if (body === '') {\n                  // Prefer: return=minimal\n                } else if (_this.headers.get('Accept') === 'text/csv') {\n                  data = body;\n                } else if (_this.headers.get('Accept') && ((_a = _this.headers.get('Accept')) === null || _a === void 0 ? void 0 : _a.includes('application/vnd.pgrst.plan+text'))) {\n                  data = body;\n                } else {\n                  data = JSON.parse(body);\n                }\n              }\n              var countHeader = (_b = _this.headers.get('Prefer')) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n              var contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n              if (countHeader && contentRange && contentRange.length > 1) {\n                count = parseInt(contentRange[1]);\n              }\n              // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n              // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n              if (_this.isMaybeSingle && _this.method === 'GET' && Array.isArray(data)) {\n                if (data.length > 1) {\n                  error = {\n                    // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                    code: 'PGRST116',\n                    details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n                    hint: null,\n                    message: 'JSON object requested, multiple (or no) rows returned'\n                  };\n                  data = null;\n                  count = null;\n                  status = 406;\n                  statusText = 'Not Acceptable';\n                } else if (data.length === 1) {\n                  data = data[0];\n                } else {\n                  data = null;\n                }\n              }\n            } else {\n              var _body = yield res.text();\n              try {\n                error = JSON.parse(_body);\n                // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                if (Array.isArray(error) && res.status === 404) {\n                  data = [];\n                  error = null;\n                  status = 200;\n                  statusText = 'OK';\n                }\n              } catch (_e) {\n                // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                if (res.status === 404 && _body === '') {\n                  status = 204;\n                  statusText = 'No Content';\n                } else {\n                  error = {\n                    message: _body\n                  };\n                }\n              }\n              if (error && _this.isMaybeSingle && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('0 rows'))) {\n                error = null;\n                status = 200;\n                statusText = 'OK';\n              }\n              if (error && _this.shouldThrowOnError) {\n                throw new PostgrestError_1.default(error);\n              }\n            }\n            var postgrestResponse = {\n              error,\n              data,\n              count,\n              status,\n              statusText\n            };\n            return postgrestResponse;\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n        if (!this.shouldThrowOnError) {\n          res = res.catch(fetchError => {\n            var _a, _b, _c;\n            return {\n              error: {\n                message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n                details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n                hint: '',\n                code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`\n              },\n              data: null,\n              count: null,\n              status: 0,\n              statusText: ''\n            };\n          });\n        }\n        return res.then(onfulfilled, onrejected);\n      }\n      /**\n       * Override the type of the returned `data`.\n       *\n       * @typeParam NewResult - The new result type to override with\n       * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n       */\n    }, {\n      key: \"returns\",\n      value: function returns() {\n        /* istanbul ignore next */\n        return this;\n      }\n      /**\n       * Override the type of the returned `data` field in the response.\n       *\n       * @typeParam NewResult - The new type to cast the response data to\n       * @typeParam Options - Optional type configuration (defaults to { merge: true })\n       * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\n       * @example\n       * ```typescript\n       * // Merge with existing types (default behavior)\n       * const query = supabase\n       *   .from('users')\n       *   .select()\n       *   .overrideTypes<{ custom_field: string }>()\n       *\n       * // Replace existing types completely\n       * const replaceQuery = supabase\n       *   .from('users')\n       *   .select()\n       *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\n       * ```\n       * @returns A PostgrestBuilder instance with the new type\n       */\n    }, {\n      key: \"overrideTypes\",\n      value: function overrideTypes() {\n        return this;\n      }\n    }]);\n  }();\n  exports.default = PostgrestBuilder;\n});","lineCount":236,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_asyncToGenerator"],[4,23,1,13],[4,26,1,13,"require"],[4,33,1,13],[4,34,1,13,"_dependencyMap"],[4,48,1,13],[4,96,1,13,"default"],[4,103,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[5,92,1,13,"default"],[5,99,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"require"],[6,28,1,13],[6,29,1,13,"_dependencyMap"],[6,43,1,13],[6,86,1,13,"default"],[6,93,1,13],[7,2,2,0],[7,6,2,4,"__importDefault"],[7,21,2,19],[7,24,2,23],[7,28,2,27],[7,32,2,31],[7,36,2,35],[7,37,2,36,"__importDefault"],[7,52,2,51],[7,56,2,56],[7,66,2,66,"mod"],[7,69,2,69],[7,71,2,71],[8,4,3,4],[8,11,3,12,"mod"],[8,14,3,15],[8,18,3,19,"mod"],[8,21,3,22],[8,22,3,23,"__esModule"],[8,32,3,33],[8,35,3,37,"mod"],[8,38,3,40],[8,41,3,43],[9,6,3,45],[9,15,3,54],[9,17,3,56,"mod"],[10,4,3,60],[10,5,3,61],[11,2,4,0],[11,3,4,1],[12,2,5,0,"Object"],[12,8,5,6],[12,9,5,7,"defineProperty"],[12,23,5,21],[12,24,5,22,"exports"],[12,31,5,29],[12,33,5,31],[12,45,5,43],[12,47,5,45],[13,4,5,47,"value"],[13,9,5,52],[13,11,5,54],[14,2,5,59],[14,3,5,60],[14,4,5,61],[15,2,6,0],[16,2,7,0],[16,6,7,6,"node_fetch_1"],[16,18,7,18],[16,21,7,21,"__importDefault"],[16,36,7,36],[16,37,7,37,"require"],[16,44,7,44],[16,45,7,44,"_dependencyMap"],[16,59,7,44],[16,86,7,67],[16,87,7,68],[16,88,7,69],[17,2,8,0],[17,6,8,6,"PostgrestError_1"],[17,22,8,22],[17,25,8,25,"__importDefault"],[17,40,8,40],[17,41,8,41,"require"],[17,48,8,48],[17,49,8,48,"_dependencyMap"],[17,63,8,48],[17,86,8,67],[17,87,8,68],[17,88,8,69],[18,2,8,70],[18,6,9,6,"PostgrestBuilder"],[18,22,9,22],[19,4,10,4],[19,13,10,4,"PostgrestBuilder"],[19,30,10,16,"builder"],[19,37,10,23],[19,39,10,25],[20,6,10,25,"_classCallCheck"],[20,21,10,25],[20,28,10,25,"PostgrestBuilder"],[20,44,10,25],[21,6,11,8],[21,10,11,12,"_a"],[21,12,11,14],[21,14,11,16,"_b"],[21,16,11,18],[22,6,12,8],[22,10,12,12],[22,11,12,13,"shouldThrowOnError"],[22,29,12,31],[22,32,12,34],[22,37,12,39],[23,6,13,8],[23,10,13,12],[23,11,13,13,"method"],[23,17,13,19],[23,20,13,22,"builder"],[23,27,13,29],[23,28,13,30,"method"],[23,34,13,36],[24,6,14,8],[24,10,14,12],[24,11,14,13,"url"],[24,14,14,16],[24,17,14,19,"builder"],[24,24,14,26],[24,25,14,27,"url"],[24,28,14,30],[25,6,15,8],[25,10,15,12],[25,11,15,13,"headers"],[25,18,15,20],[25,21,15,23],[25,25,15,27,"Headers"],[25,32,15,34],[25,33,15,35,"builder"],[25,40,15,42],[25,41,15,43,"headers"],[25,48,15,50],[25,49,15,51],[26,6,16,8],[26,10,16,12],[26,11,16,13,"schema"],[26,17,16,19],[26,20,16,22,"builder"],[26,27,16,29],[26,28,16,30,"schema"],[26,34,16,36],[27,6,17,8],[27,10,17,12],[27,11,17,13,"body"],[27,15,17,17],[27,18,17,20,"builder"],[27,25,17,27],[27,26,17,28,"body"],[27,30,17,32],[28,6,18,8],[28,10,18,12],[28,11,18,13,"shouldThrowOnError"],[28,29,18,31],[28,32,18,34],[28,33,18,35,"_a"],[28,35,18,37],[28,38,18,40,"builder"],[28,45,18,47],[28,46,18,48,"shouldThrowOnError"],[28,64,18,66],[28,70,18,72],[28,74,18,76],[28,78,18,80,"_a"],[28,80,18,82],[28,85,18,87],[28,90,18,92],[28,91,18,93],[28,94,18,96,"_a"],[28,96,18,98],[28,99,18,101],[28,104,18,106],[29,6,19,8],[29,10,19,12],[29,11,19,13,"signal"],[29,17,19,19],[29,20,19,22,"builder"],[29,27,19,29],[29,28,19,30,"signal"],[29,34,19,36],[30,6,20,8],[30,10,20,12],[30,11,20,13,"isMaybeSingle"],[30,24,20,26],[30,27,20,29],[30,28,20,30,"_b"],[30,30,20,32],[30,33,20,35,"builder"],[30,40,20,42],[30,41,20,43,"isMaybeSingle"],[30,54,20,56],[30,60,20,62],[30,64,20,66],[30,68,20,70,"_b"],[30,70,20,72],[30,75,20,77],[30,80,20,82],[30,81,20,83],[30,84,20,86,"_b"],[30,86,20,88],[30,89,20,91],[30,94,20,96],[31,6,21,8],[31,10,21,12,"builder"],[31,17,21,19],[31,18,21,20,"fetch"],[31,23,21,25],[31,25,21,27],[32,8,22,12],[32,12,22,16],[32,13,22,17,"fetch"],[32,18,22,22],[32,21,22,25,"builder"],[32,28,22,32],[32,29,22,33,"fetch"],[32,34,22,38],[33,6,23,8],[33,7,23,9],[33,13,24,13],[33,17,24,17],[33,24,24,24,"fetch"],[33,29,24,29],[33,34,24,34],[33,45,24,45],[33,47,24,47],[34,8,25,12],[34,12,25,16],[34,13,25,17,"fetch"],[34,18,25,22],[34,21,25,25,"node_fetch_1"],[34,33,25,37],[34,34,25,38,"default"],[34,41,25,45],[35,6,26,8],[35,7,26,9],[35,13,27,13],[36,8,28,12],[36,12,28,16],[36,13,28,17,"fetch"],[36,18,28,22],[36,21,28,25,"fetch"],[36,26,28,30],[37,6,29,8],[38,4,30,4],[39,4,31,4],[40,0,32,0],[41,0,33,0],[42,0,34,0],[43,0,35,0],[44,0,36,0],[45,4,31,4],[45,11,31,4,"_createClass"],[45,23,31,4],[45,24,31,4,"PostgrestBuilder"],[45,40,31,4],[46,6,31,4,"key"],[46,9,31,4],[47,6,31,4,"value"],[47,11,31,4],[47,13,37,4],[47,22,37,4,"throwOnError"],[47,34,37,16,"throwOnError"],[47,35,37,16],[47,37,37,19],[48,8,38,8],[48,12,38,12],[48,13,38,13,"shouldThrowOnError"],[48,31,38,31],[48,34,38,34],[48,38,38,38],[49,8,39,8],[49,15,39,15],[49,19,39,19],[50,6,40,4],[51,6,41,4],[52,0,42,0],[53,0,43,0],[54,4,41,4],[55,6,41,4,"key"],[55,9,41,4],[56,6,41,4,"value"],[56,11,41,4],[56,13,44,4],[56,22,44,4,"setHeader"],[56,31,44,13,"setHeader"],[56,32,44,14,"name"],[56,36,44,18],[56,38,44,20,"value"],[56,43,44,25],[56,45,44,27],[57,8,45,8],[57,12,45,12],[57,13,45,13,"headers"],[57,20,45,20],[57,23,45,23],[57,27,45,27,"Headers"],[57,34,45,34],[57,35,45,35],[57,39,45,39],[57,40,45,40,"headers"],[57,47,45,47],[57,48,45,48],[58,8,46,8],[58,12,46,12],[58,13,46,13,"headers"],[58,20,46,20],[58,21,46,21,"set"],[58,24,46,24],[58,25,46,25,"name"],[58,29,46,29],[58,31,46,31,"value"],[58,36,46,36],[58,37,46,37],[59,8,47,8],[59,15,47,15],[59,19,47,19],[60,6,48,4],[61,4,48,5],[62,6,48,5,"key"],[62,9,48,5],[63,6,48,5,"value"],[63,11,48,5],[63,13,49,4],[63,22,49,4,"then"],[63,26,49,8,"then"],[63,27,49,9,"onfulfilled"],[63,38,49,20],[63,40,49,22,"onrejected"],[63,50,49,32],[63,52,49,34],[64,8,49,34],[64,12,49,34,"_this"],[64,17,49,34],[65,8,50,8],[66,8,51,8],[66,12,51,12],[66,16,51,16],[66,17,51,17,"schema"],[66,23,51,23],[66,28,51,28,"undefined"],[66,37,51,37],[66,39,51,39],[67,10,52,12],[68,8,52,12],[68,9,53,9],[68,15,54,13],[68,19,54,17],[68,20,54,18],[68,25,54,23],[68,27,54,25],[68,33,54,31],[68,34,54,32],[68,35,54,33,"includes"],[68,43,54,41],[68,44,54,42],[68,48,54,46],[68,49,54,47,"method"],[68,55,54,53],[68,56,54,54],[68,58,54,56],[69,10,55,12],[69,14,55,16],[69,15,55,17,"headers"],[69,22,55,24],[69,23,55,25,"set"],[69,26,55,28],[69,27,55,29],[69,43,55,45],[69,45,55,47],[69,49,55,51],[69,50,55,52,"schema"],[69,56,55,58],[69,57,55,59],[70,8,56,8],[70,9,56,9],[70,15,57,13],[71,10,58,12],[71,14,58,16],[71,15,58,17,"headers"],[71,22,58,24],[71,23,58,25,"set"],[71,26,58,28],[71,27,58,29],[71,44,58,46],[71,46,58,48],[71,50,58,52],[71,51,58,53,"schema"],[71,57,58,59],[71,58,58,60],[72,8,59,8],[73,8,60,8],[73,12,60,12],[73,16,60,16],[73,17,60,17,"method"],[73,23,60,23],[73,28,60,28],[73,33,60,33],[73,37,60,37],[73,41,60,41],[73,42,60,42,"method"],[73,48,60,48],[73,53,60,53],[73,59,60,59],[73,61,60,61],[74,10,61,12],[74,14,61,16],[74,15,61,17,"headers"],[74,22,61,24],[74,23,61,25,"set"],[74,26,61,28],[74,27,61,29],[74,41,61,43],[74,43,61,45],[74,61,61,63],[74,62,61,64],[75,8,62,8],[76,8,63,8],[77,8,64,8],[78,8,65,8],[78,12,65,14,"_fetch"],[78,18,65,20],[78,21,65,23],[78,25,65,27],[78,26,65,28,"fetch"],[78,31,65,33],[79,8,66,8],[79,12,66,12,"res"],[79,15,66,15],[79,18,66,18,"_fetch"],[79,24,66,24],[79,25,66,25],[79,29,66,29],[79,30,66,30,"url"],[79,33,66,33],[79,34,66,34,"toString"],[79,42,66,42],[79,43,66,43],[79,44,66,44],[79,46,66,46],[80,10,67,12,"method"],[80,16,67,18],[80,18,67,20],[80,22,67,24],[80,23,67,25,"method"],[80,29,67,31],[81,10,68,12,"headers"],[81,17,68,19],[81,19,68,21],[81,23,68,25],[81,24,68,26,"headers"],[81,31,68,33],[82,10,69,12,"body"],[82,14,69,16],[82,16,69,18,"JSON"],[82,20,69,22],[82,21,69,23,"stringify"],[82,30,69,32],[82,31,69,33],[82,35,69,37],[82,36,69,38,"body"],[82,40,69,42],[82,41,69,43],[83,10,70,12,"signal"],[83,16,70,18],[83,18,70,20],[83,22,70,24],[83,23,70,25,"signal"],[84,8,71,8],[84,9,71,9],[84,10,71,10],[84,11,71,11,"then"],[84,15,71,15],[85,10,71,15],[85,14,71,15,"_ref"],[85,18,71,15],[85,21,71,15,"_asyncToGenerator"],[85,38,71,15],[85,39,71,16],[85,50,71,23,"res"],[85,53,71,26],[85,55,71,31],[86,12,72,12],[86,16,72,16,"_a"],[86,18,72,18],[86,20,72,20,"_b"],[86,22,72,22],[86,24,72,24,"_c"],[86,26,72,26],[86,28,72,28,"_d"],[86,30,72,30],[87,12,73,12],[87,16,73,16,"error"],[87,21,73,21],[87,24,73,24],[87,28,73,28],[88,12,74,12],[88,16,74,16,"data"],[88,20,74,20],[88,23,74,23],[88,27,74,27],[89,12,75,12],[89,16,75,16,"count"],[89,21,75,21],[89,24,75,24],[89,28,75,28],[90,12,76,12],[90,16,76,16,"status"],[90,22,76,22],[90,25,76,25,"res"],[90,28,76,28],[90,29,76,29,"status"],[90,35,76,35],[91,12,77,12],[91,16,77,16,"statusText"],[91,26,77,26],[91,29,77,29,"res"],[91,32,77,32],[91,33,77,33,"statusText"],[91,43,77,43],[92,12,78,12],[92,16,78,16,"res"],[92,19,78,19],[92,20,78,20,"ok"],[92,22,78,22],[92,24,78,24],[93,14,79,16],[93,18,79,20,"_this"],[93,23,79,24],[93,24,79,25,"method"],[93,30,79,31],[93,35,79,36],[93,41,79,42],[93,43,79,44],[94,16,80,20],[94,20,80,26,"body"],[94,24,80,30],[94,33,80,39,"res"],[94,36,80,42],[94,37,80,43,"text"],[94,41,80,47],[94,42,80,48],[94,43,80,49],[95,16,81,20],[95,20,81,24,"body"],[95,24,81,28],[95,29,81,33],[95,31,81,35],[95,33,81,37],[96,18,82,24],[97,16,82,24],[97,17,83,21],[97,23,84,25],[97,27,84,29,"_this"],[97,32,84,33],[97,33,84,34,"headers"],[97,40,84,41],[97,41,84,42,"get"],[97,44,84,45],[97,45,84,46],[97,53,84,54],[97,54,84,55],[97,59,84,60],[97,69,84,70],[97,71,84,72],[98,18,85,24,"data"],[98,22,85,28],[98,25,85,31,"body"],[98,29,85,35],[99,16,86,20],[99,17,86,21],[99,23,87,25],[99,27,87,29,"_this"],[99,32,87,33],[99,33,87,34,"headers"],[99,40,87,41],[99,41,87,42,"get"],[99,44,87,45],[99,45,87,46],[99,53,87,54],[99,54,87,55],[99,59,88,25],[99,60,88,26,"_a"],[99,62,88,28],[99,65,88,31,"_this"],[99,70,88,35],[99,71,88,36,"headers"],[99,78,88,43],[99,79,88,44,"get"],[99,82,88,47],[99,83,88,48],[99,91,88,56],[99,92,88,57],[99,98,88,63],[99,102,88,67],[99,106,88,71,"_a"],[99,108,88,73],[99,113,88,78],[99,118,88,83],[99,119,88,84],[99,122,88,87],[99,127,88,92],[99,128,88,93],[99,131,88,96,"_a"],[99,133,88,98],[99,134,88,99,"includes"],[99,142,88,107],[99,143,88,108],[99,176,88,141],[99,177,88,142],[99,178,88,143],[99,180,88,145],[100,18,89,24,"data"],[100,22,89,28],[100,25,89,31,"body"],[100,29,89,35],[101,16,90,20],[101,17,90,21],[101,23,91,25],[102,18,92,24,"data"],[102,22,92,28],[102,25,92,31,"JSON"],[102,29,92,35],[102,30,92,36,"parse"],[102,35,92,41],[102,36,92,42,"body"],[102,40,92,46],[102,41,92,47],[103,16,93,20],[104,14,94,16],[105,14,95,16],[105,18,95,22,"countHeader"],[105,29,95,33],[105,32,95,36],[105,33,95,37,"_b"],[105,35,95,39],[105,38,95,42,"_this"],[105,43,95,46],[105,44,95,47,"headers"],[105,51,95,54],[105,52,95,55,"get"],[105,55,95,58],[105,56,95,59],[105,64,95,67],[105,65,95,68],[105,71,95,74],[105,75,95,78],[105,79,95,82,"_b"],[105,81,95,84],[105,86,95,89],[105,91,95,94],[105,92,95,95],[105,95,95,98],[105,100,95,103],[105,101,95,104],[105,104,95,107,"_b"],[105,106,95,109],[105,107,95,110,"match"],[105,112,95,115],[105,113,95,116],[105,146,95,149],[105,147,95,150],[106,14,96,16],[106,18,96,22,"contentRange"],[106,30,96,34],[106,33,96,37],[106,34,96,38,"_c"],[106,36,96,40],[106,39,96,43,"res"],[106,42,96,46],[106,43,96,47,"headers"],[106,50,96,54],[106,51,96,55,"get"],[106,54,96,58],[106,55,96,59],[106,70,96,74],[106,71,96,75],[106,77,96,81],[106,81,96,85],[106,85,96,89,"_c"],[106,87,96,91],[106,92,96,96],[106,97,96,101],[106,98,96,102],[106,101,96,105],[106,106,96,110],[106,107,96,111],[106,110,96,114,"_c"],[106,112,96,116],[106,113,96,117,"split"],[106,118,96,122],[106,119,96,123],[106,122,96,126],[106,123,96,127],[107,14,97,16],[107,18,97,20,"countHeader"],[107,29,97,31],[107,33,97,35,"contentRange"],[107,45,97,47],[107,49,97,51,"contentRange"],[107,61,97,63],[107,62,97,64,"length"],[107,68,97,70],[107,71,97,73],[107,72,97,74],[107,74,97,76],[108,16,98,20,"count"],[108,21,98,25],[108,24,98,28,"parseInt"],[108,32,98,36],[108,33,98,37,"contentRange"],[108,45,98,49],[108,46,98,50],[108,47,98,51],[108,48,98,52],[108,49,98,53],[109,14,99,16],[110,14,100,16],[111,14,101,16],[112,14,102,16],[112,18,102,20,"_this"],[112,23,102,24],[112,24,102,25,"isMaybeSingle"],[112,37,102,38],[112,41,102,42,"_this"],[112,46,102,46],[112,47,102,47,"method"],[112,53,102,53],[112,58,102,58],[112,63,102,63],[112,67,102,67,"Array"],[112,72,102,72],[112,73,102,73,"isArray"],[112,80,102,80],[112,81,102,81,"data"],[112,85,102,85],[112,86,102,86],[112,88,102,88],[113,16,103,20],[113,20,103,24,"data"],[113,24,103,28],[113,25,103,29,"length"],[113,31,103,35],[113,34,103,38],[113,35,103,39],[113,37,103,41],[114,18,104,24,"error"],[114,23,104,29],[114,26,104,32],[115,20,105,28],[116,20,106,28,"code"],[116,24,106,32],[116,26,106,34],[116,36,106,44],[117,20,107,28,"details"],[117,27,107,35],[117,29,107,37],[117,48,107,56,"data"],[117,52,107,60],[117,53,107,61,"length"],[117,59,107,67],[117,116,107,124],[118,20,108,28,"hint"],[118,24,108,32],[118,26,108,34],[118,30,108,38],[119,20,109,28,"message"],[119,27,109,35],[119,29,109,37],[120,18,110,24],[120,19,110,25],[121,18,111,24,"data"],[121,22,111,28],[121,25,111,31],[121,29,111,35],[122,18,112,24,"count"],[122,23,112,29],[122,26,112,32],[122,30,112,36],[123,18,113,24,"status"],[123,24,113,30],[123,27,113,33],[123,30,113,36],[124,18,114,24,"statusText"],[124,28,114,34],[124,31,114,37],[124,47,114,53],[125,16,115,20],[125,17,115,21],[125,23,116,25],[125,27,116,29,"data"],[125,31,116,33],[125,32,116,34,"length"],[125,38,116,40],[125,43,116,45],[125,44,116,46],[125,46,116,48],[126,18,117,24,"data"],[126,22,117,28],[126,25,117,31,"data"],[126,29,117,35],[126,30,117,36],[126,31,117,37],[126,32,117,38],[127,16,118,20],[127,17,118,21],[127,23,119,25],[128,18,120,24,"data"],[128,22,120,28],[128,25,120,31],[128,29,120,35],[129,16,121,20],[130,14,122,16],[131,12,123,12],[131,13,123,13],[131,19,124,17],[132,14,125,16],[132,18,125,22,"body"],[132,23,125,26],[132,32,125,35,"res"],[132,35,125,38],[132,36,125,39,"text"],[132,40,125,43],[132,41,125,44],[132,42,125,45],[133,14,126,16],[133,18,126,20],[134,16,127,20,"error"],[134,21,127,25],[134,24,127,28,"JSON"],[134,28,127,32],[134,29,127,33,"parse"],[134,34,127,38],[134,35,127,39,"body"],[134,40,127,43],[134,41,127,44],[135,16,128,20],[136,16,129,20],[136,20,129,24,"Array"],[136,25,129,29],[136,26,129,30,"isArray"],[136,33,129,37],[136,34,129,38,"error"],[136,39,129,43],[136,40,129,44],[136,44,129,48,"res"],[136,47,129,51],[136,48,129,52,"status"],[136,54,129,58],[136,59,129,63],[136,62,129,66],[136,64,129,68],[137,18,130,24,"data"],[137,22,130,28],[137,25,130,31],[137,27,130,33],[138,18,131,24,"error"],[138,23,131,29],[138,26,131,32],[138,30,131,36],[139,18,132,24,"status"],[139,24,132,30],[139,27,132,33],[139,30,132,36],[140,18,133,24,"statusText"],[140,28,133,34],[140,31,133,37],[140,35,133,41],[141,16,134,20],[142,14,135,16],[142,15,135,17],[142,16,136,16],[142,23,136,23,"_e"],[142,25,136,25],[142,27,136,27],[143,16,137,20],[144,16,138,20],[144,20,138,24,"res"],[144,23,138,27],[144,24,138,28,"status"],[144,30,138,34],[144,35,138,39],[144,38,138,42],[144,42,138,46,"body"],[144,47,138,50],[144,52,138,55],[144,54,138,57],[144,56,138,59],[145,18,139,24,"status"],[145,24,139,30],[145,27,139,33],[145,30,139,36],[146,18,140,24,"statusText"],[146,28,140,34],[146,31,140,37],[146,43,140,49],[147,16,141,20],[147,17,141,21],[147,23,142,25],[148,18,143,24,"error"],[148,23,143,29],[148,26,143,32],[149,20,144,28,"message"],[149,27,144,35],[149,29,144,37,"body"],[150,18,145,24],[150,19,145,25],[151,16,146,20],[152,14,147,16],[153,14,148,16],[153,18,148,20,"error"],[153,23,148,25],[153,27,148,29,"_this"],[153,32,148,33],[153,33,148,34,"isMaybeSingle"],[153,46,148,47],[153,51,148,52],[153,52,148,53,"_d"],[153,54,148,55],[153,57,148,58,"error"],[153,62,148,63],[153,67,148,68],[153,71,148,72],[153,75,148,76,"error"],[153,80,148,81],[153,85,148,86],[153,90,148,91],[153,91,148,92],[153,94,148,95],[153,99,148,100],[153,100,148,101],[153,103,148,104,"error"],[153,108,148,109],[153,109,148,110,"details"],[153,116,148,117],[153,122,148,123],[153,126,148,127],[153,130,148,131,"_d"],[153,132,148,133],[153,137,148,138],[153,142,148,143],[153,143,148,144],[153,146,148,147],[153,151,148,152],[153,152,148,153],[153,155,148,156,"_d"],[153,157,148,158],[153,158,148,159,"includes"],[153,166,148,167],[153,167,148,168],[153,175,148,176],[153,176,148,177],[153,177,148,178],[153,179,148,180],[154,16,149,20,"error"],[154,21,149,25],[154,24,149,28],[154,28,149,32],[155,16,150,20,"status"],[155,22,150,26],[155,25,150,29],[155,28,150,32],[156,16,151,20,"statusText"],[156,26,151,30],[156,29,151,33],[156,33,151,37],[157,14,152,16],[158,14,153,16],[158,18,153,20,"error"],[158,23,153,25],[158,27,153,29,"_this"],[158,32,153,33],[158,33,153,34,"shouldThrowOnError"],[158,51,153,52],[158,53,153,54],[159,16,154,20],[159,22,154,26],[159,26,154,30,"PostgrestError_1"],[159,42,154,46],[159,43,154,47,"default"],[159,50,154,54],[159,51,154,55,"error"],[159,56,154,60],[159,57,154,61],[160,14,155,16],[161,12,156,12],[162,12,157,12],[162,16,157,18,"postgrestResponse"],[162,33,157,35],[162,36,157,38],[163,14,158,16,"error"],[163,19,158,21],[164,14,159,16,"data"],[164,18,159,20],[165,14,160,16,"count"],[165,19,160,21],[166,14,161,16,"status"],[166,20,161,22],[167,14,162,16,"statusText"],[168,12,163,12],[168,13,163,13],[169,12,164,12],[169,19,164,19,"postgrestResponse"],[169,36,164,36],[170,10,165,8],[170,11,165,9],[171,10,165,9],[171,27,165,9,"_x"],[171,29,165,9],[172,12,165,9],[172,19,165,9,"_ref"],[172,23,165,9],[172,24,165,9,"apply"],[172,29,165,9],[172,36,165,9,"arguments"],[172,45,165,9],[173,10,165,9],[174,8,165,9],[174,12,165,10],[175,8,166,8],[175,12,166,12],[175,13,166,13],[175,17,166,17],[175,18,166,18,"shouldThrowOnError"],[175,36,166,36],[175,38,166,38],[176,10,167,12,"res"],[176,13,167,15],[176,16,167,18,"res"],[176,19,167,21],[176,20,167,22,"catch"],[176,25,167,27],[176,26,167,29,"fetchError"],[176,36,167,39],[176,40,167,44],[177,12,168,16],[177,16,168,20,"_a"],[177,18,168,22],[177,20,168,24,"_b"],[177,22,168,26],[177,24,168,28,"_c"],[177,26,168,30],[178,12,169,16],[178,19,169,24],[179,14,170,20,"error"],[179,19,170,25],[179,21,170,27],[180,16,171,24,"message"],[180,23,171,31],[180,25,171,33],[180,28,171,36],[180,29,171,37,"_a"],[180,31,171,39],[180,34,171,42,"fetchError"],[180,44,171,52],[180,49,171,57],[180,53,171,61],[180,57,171,65,"fetchError"],[180,67,171,75],[180,72,171,80],[180,77,171,85],[180,78,171,86],[180,81,171,89],[180,86,171,94],[180,87,171,95],[180,90,171,98,"fetchError"],[180,100,171,108],[180,101,171,109,"name"],[180,105,171,113],[180,111,171,119],[180,115,171,123],[180,119,171,127,"_a"],[180,121,171,129],[180,126,171,134],[180,131,171,139],[180,132,171,140],[180,135,171,143,"_a"],[180,137,171,145],[180,140,171,148],[180,152,171,160],[180,157,171,165,"fetchError"],[180,167,171,175],[180,172,171,180],[180,176,171,184],[180,180,171,188,"fetchError"],[180,190,171,198],[180,195,171,203],[180,200,171,208],[180,201,171,209],[180,204,171,212],[180,209,171,217],[180,210,171,218],[180,213,171,221,"fetchError"],[180,223,171,231],[180,224,171,232,"message"],[180,231,171,239],[180,233,171,241],[181,16,172,24,"details"],[181,23,172,31],[181,25,172,33],[181,28,172,36],[181,29,172,37,"_b"],[181,31,172,39],[181,34,172,42,"fetchError"],[181,44,172,52],[181,49,172,57],[181,53,172,61],[181,57,172,65,"fetchError"],[181,67,172,75],[181,72,172,80],[181,77,172,85],[181,78,172,86],[181,81,172,89],[181,86,172,94],[181,87,172,95],[181,90,172,98,"fetchError"],[181,100,172,108],[181,101,172,109,"stack"],[181,106,172,114],[181,112,172,120],[181,116,172,124],[181,120,172,128,"_b"],[181,122,172,130],[181,127,172,135],[181,132,172,140],[181,133,172,141],[181,136,172,144,"_b"],[181,138,172,146],[181,141,172,149],[181,143,172,151],[181,145,172,153],[182,16,173,24,"hint"],[182,20,173,28],[182,22,173,30],[182,24,173,32],[183,16,174,24,"code"],[183,20,174,28],[183,22,174,30],[183,25,174,33],[183,26,174,34,"_c"],[183,28,174,36],[183,31,174,39,"fetchError"],[183,41,174,49],[183,46,174,54],[183,50,174,58],[183,54,174,62,"fetchError"],[183,64,174,72],[183,69,174,77],[183,74,174,82],[183,75,174,83],[183,78,174,86],[183,83,174,91],[183,84,174,92],[183,87,174,95,"fetchError"],[183,97,174,105],[183,98,174,106,"code"],[183,102,174,110],[183,108,174,116],[183,112,174,120],[183,116,174,124,"_c"],[183,118,174,126],[183,123,174,131],[183,128,174,136],[183,129,174,137],[183,132,174,140,"_c"],[183,134,174,142],[183,137,174,145],[183,139,174,147],[184,14,175,20],[184,15,175,21],[185,14,176,20,"data"],[185,18,176,24],[185,20,176,26],[185,24,176,30],[186,14,177,20,"count"],[186,19,177,25],[186,21,177,27],[186,25,177,31],[187,14,178,20,"status"],[187,20,178,26],[187,22,178,28],[187,23,178,29],[188,14,179,20,"statusText"],[188,24,179,30],[188,26,179,32],[189,12,180,16],[189,13,180,17],[190,10,181,12],[190,11,181,13],[190,12,181,14],[191,8,182,8],[192,8,183,8],[192,15,183,15,"res"],[192,18,183,18],[192,19,183,19,"then"],[192,23,183,23],[192,24,183,24,"onfulfilled"],[192,35,183,35],[192,37,183,37,"onrejected"],[192,47,183,47],[192,48,183,48],[193,6,184,4],[194,6,185,4],[195,0,186,0],[196,0,187,0],[197,0,188,0],[198,0,189,0],[199,0,190,0],[200,4,185,4],[201,6,185,4,"key"],[201,9,185,4],[202,6,185,4,"value"],[202,11,185,4],[202,13,191,4],[202,22,191,4,"returns"],[202,29,191,11,"returns"],[202,30,191,11],[202,32,191,14],[203,8,192,8],[204,8,193,8],[204,15,193,15],[204,19,193,19],[205,6,194,4],[206,6,195,4],[207,0,196,0],[208,0,197,0],[209,0,198,0],[210,0,199,0],[211,0,200,0],[212,0,201,0],[213,0,202,0],[214,0,203,0],[215,0,204,0],[216,0,205,0],[217,0,206,0],[218,0,207,0],[219,0,208,0],[220,0,209,0],[221,0,210,0],[222,0,211,0],[223,0,212,0],[224,0,213,0],[225,0,214,0],[226,0,215,0],[227,0,216,0],[228,4,195,4],[229,6,195,4,"key"],[229,9,195,4],[230,6,195,4,"value"],[230,11,195,4],[230,13,217,4],[230,22,217,4,"overrideTypes"],[230,35,217,17,"overrideTypes"],[230,36,217,17],[230,38,217,20],[231,8,218,8],[231,15,218,15],[231,19,218,19],[232,6,219,4],[233,4,219,5],[234,2,219,5],[235,2,221,0,"exports"],[235,9,221,7],[235,10,221,8,"default"],[235,17,221,15],[235,20,221,18,"PostgrestBuilder"],[235,36,221,34],[236,0,221,35],[236,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestBuilder","constructor","throwOnError","setHeader","then","_fetch.then$argument_0","res._catch$argument_0","returns","overrideTypes"],"mappings":"AAA;wDCC;CDE;AEK;ICC;KDoB;IEO;KFG;IGI;KHI;IIC;gBCsB;SD8F;4BEE;aFc;KJG;IOO;KPG;IQuB;KRE;CFC"},"hasCjsExports":true},"type":"js/module"}]}