{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":49,"index":265},"end":{"line":6,"column":84,"index":300}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\").default;\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var PostgrestFilterBuilder_1 = __importDefault(require(_dependencyMap[2], \"./PostgrestFilterBuilder\"));\n  var PostgrestQueryBuilder = /*#__PURE__*/function () {\n    function PostgrestQueryBuilder(url, _ref) {\n      var _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n      _classCallCheck(this, PostgrestQueryBuilder);\n      this.url = url;\n      this.headers = new Headers(headers);\n      this.schema = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    return _createClass(PostgrestQueryBuilder, [{\n      key: \"select\",\n      value: function select(columns) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          count = _ref2.count;\n        var method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        var quoted = false;\n        var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n          if (/\\s/.test(c) && !quoted) {\n            return '';\n          }\n          if (c === '\"') {\n            quoted = !quoted;\n          }\n          return c;\n        }).join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: this.fetch\n        });\n      }\n      /**\n       * Perform an INSERT into the table or view.\n       *\n       * By default, inserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to insert. Pass an object to insert a single row\n       * or an array to insert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count inserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. Only applies for bulk\n       * inserts.\n       */\n    }, {\n      key: \"insert\",\n      value: function insert(values) {\n        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref3.count,\n          _ref3$defaultToNull = _ref3.defaultToNull,\n          defaultToNull = _ref3$defaultToNull === void 0 ? true : _ref3$defaultToNull;\n        var _a;\n        var method = 'POST';\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        if (!defaultToNull) {\n          this.headers.append('Prefer', `missing=default`);\n        }\n        if (Array.isArray(values)) {\n          var columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n          if (columns.length > 0) {\n            var uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n      /**\n       * Perform an UPSERT on the table or view. Depending on the column(s) passed\n       * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n       * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n       * exist, or if it does exist, perform an alternative action depending on\n       * `ignoreDuplicates`.\n       *\n       * By default, upserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to upsert with. Pass an object to upsert a\n       * single row or an array to upsert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n       * duplicate rows are determined. Two rows are duplicates if all the\n       * `onConflict` columns are equal.\n       *\n       * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n       * `false`, duplicate rows are merged with existing rows.\n       *\n       * @param options.count - Count algorithm to use to count upserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. This only applies when\n       * inserting new rows, not when merging with existing rows under\n       * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n       */\n    }, {\n      key: \"upsert\",\n      value: function upsert(values) {\n        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onConflict = _ref4.onConflict,\n          _ref4$ignoreDuplicate = _ref4.ignoreDuplicates,\n          ignoreDuplicates = _ref4$ignoreDuplicate === void 0 ? false : _ref4$ignoreDuplicate,\n          count = _ref4.count,\n          _ref4$defaultToNull = _ref4.defaultToNull,\n          defaultToNull = _ref4$defaultToNull === void 0 ? true : _ref4$defaultToNull;\n        var _a;\n        var method = 'POST';\n        this.headers.append('Prefer', `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`);\n        if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        if (!defaultToNull) {\n          this.headers.append('Prefer', 'missing=default');\n        }\n        if (Array.isArray(values)) {\n          var columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n          if (columns.length > 0) {\n            var uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n      /**\n       * Perform an UPDATE on the table or view.\n       *\n       * By default, updated rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param values - The values to update with\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count updated rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"update\",\n      value: function update(values) {\n        var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref5.count;\n        var _a;\n        var method = 'PATCH';\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n      /**\n       * Perform a DELETE on the table or view.\n       *\n       * By default, deleted rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count deleted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          count = _ref6.count;\n        var _a;\n        var method = 'DELETE';\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n    }]);\n  }();\n  exports.default = PostgrestQueryBuilder;\n});","lineCount":290,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[4,92,1,13,"default"],[4,99,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[5,86,1,13,"default"],[5,93,1,13],[6,2,2,0],[6,6,2,4,"__importDefault"],[6,21,2,19],[6,24,2,23],[6,28,2,27],[6,32,2,31],[6,36,2,35],[6,37,2,36,"__importDefault"],[6,52,2,51],[6,56,2,56],[6,66,2,66,"mod"],[6,69,2,69],[6,71,2,71],[7,4,3,4],[7,11,3,12,"mod"],[7,14,3,15],[7,18,3,19,"mod"],[7,21,3,22],[7,22,3,23,"__esModule"],[7,32,3,33],[7,35,3,37,"mod"],[7,38,3,40],[7,41,3,43],[8,6,3,45],[8,15,3,54],[8,17,3,56,"mod"],[9,4,3,60],[9,5,3,61],[10,2,4,0],[10,3,4,1],[11,2,5,0,"Object"],[11,8,5,6],[11,9,5,7,"defineProperty"],[11,23,5,21],[11,24,5,22,"exports"],[11,31,5,29],[11,33,5,31],[11,45,5,43],[11,47,5,45],[12,4,5,47,"value"],[12,9,5,52],[12,11,5,54],[13,2,5,59],[13,3,5,60],[13,4,5,61],[14,2,6,0],[14,6,6,6,"PostgrestFilterBuilder_1"],[14,30,6,30],[14,33,6,33,"__importDefault"],[14,48,6,48],[14,49,6,49,"require"],[14,56,6,56],[14,57,6,56,"_dependencyMap"],[14,71,6,56],[14,102,6,83],[14,103,6,84],[14,104,6,85],[15,2,6,86],[15,6,7,6,"PostgrestQueryBuilder"],[15,27,7,27],[16,4,8,4],[16,13,8,4,"PostgrestQueryBuilder"],[16,35,8,16,"url"],[16,38,8,19],[16,40,8,19,"_ref"],[16,44,8,19],[16,46,8,55],[17,6,8,55],[17,10,8,55,"_ref$headers"],[17,22,8,55],[17,25,8,55,"_ref"],[17,29,8,55],[17,30,8,23,"headers"],[17,37,8,30],[18,8,8,23,"headers"],[18,15,8,30],[18,18,8,30,"_ref$headers"],[18,30,8,30],[18,44,8,33],[18,45,8,34],[18,46,8,35],[18,49,8,35,"_ref$headers"],[18,61,8,35],[19,8,8,37,"schema"],[19,14,8,43],[19,17,8,43,"_ref"],[19,21,8,43],[19,22,8,37,"schema"],[19,28,8,43],[20,8,8,45,"fetch"],[20,13,8,50],[20,16,8,50,"_ref"],[20,20,8,50],[20,21,8,45,"fetch"],[20,26,8,50],[21,6,8,50,"_classCallCheck"],[21,21,8,50],[21,28,8,50,"PostgrestQueryBuilder"],[21,49,8,50],[22,6,9,8],[22,10,9,12],[22,11,9,13,"url"],[22,14,9,16],[22,17,9,19,"url"],[22,20,9,22],[23,6,10,8],[23,10,10,12],[23,11,10,13,"headers"],[23,18,10,20],[23,21,10,23],[23,25,10,27,"Headers"],[23,32,10,34],[23,33,10,35,"headers"],[23,40,10,42],[23,41,10,43],[24,6,11,8],[24,10,11,12],[24,11,11,13,"schema"],[24,17,11,19],[24,20,11,22,"schema"],[24,26,11,28],[25,6,12,8],[25,10,12,12],[25,11,12,13,"fetch"],[25,16,12,18],[25,19,12,21,"fetch"],[25,24,12,26],[26,4,13,4],[27,4,14,4],[28,0,15,0],[29,0,16,0],[30,0,17,0],[31,0,18,0],[32,0,19,0],[33,0,20,0],[34,0,21,0],[35,0,22,0],[36,0,23,0],[37,0,24,0],[38,0,25,0],[39,0,26,0],[40,0,27,0],[41,0,28,0],[42,0,29,0],[43,0,30,0],[44,0,31,0],[45,0,32,0],[46,0,33,0],[47,0,34,0],[48,4,14,4],[48,11,14,4,"_createClass"],[48,23,14,4],[48,24,14,4,"PostgrestQueryBuilder"],[48,45,14,4],[49,6,14,4,"key"],[49,9,14,4],[50,6,14,4,"value"],[50,11,14,4],[50,13,35,4],[50,22,35,4,"select"],[50,28,35,10,"select"],[50,29,35,11,"columns"],[50,36,35,18],[50,38,35,51],[51,8,35,51],[51,12,35,51,"_ref2"],[51,17,35,51],[51,20,35,51,"arguments"],[51,29,35,51],[51,30,35,51,"length"],[51,36,35,51],[51,44,35,51,"arguments"],[51,53,35,51],[51,61,35,51,"undefined"],[51,70,35,51],[51,73,35,51,"arguments"],[51,82,35,51],[51,88,35,47],[51,89,35,48],[51,90,35,49],[52,10,35,49,"_ref2$head"],[52,20,35,49],[52,23,35,49,"_ref2"],[52,28,35,49],[52,29,35,22,"head"],[52,33,35,26],[53,10,35,22,"head"],[53,14,35,26],[53,17,35,26,"_ref2$head"],[53,27,35,26],[53,41,35,29],[53,46,35,34],[53,49,35,34,"_ref2$head"],[53,59,35,34],[54,10,35,36,"count"],[54,15,35,41],[54,18,35,41,"_ref2"],[54,23,35,41],[54,24,35,36,"count"],[54,29,35,41],[55,8,36,8],[55,12,36,14,"method"],[55,18,36,20],[55,21,36,23,"head"],[55,25,36,27],[55,28,36,30],[55,34,36,36],[55,37,36,39],[55,42,36,44],[56,8,37,8],[57,8,38,8],[57,12,38,12,"quoted"],[57,18,38,18],[57,21,38,21],[57,26,38,26],[58,8,39,8],[58,12,39,14,"cleanedColumns"],[58,26,39,28],[58,29,39,31],[58,30,39,32,"columns"],[58,37,39,39],[58,42,39,44],[58,46,39,48],[58,50,39,52,"columns"],[58,57,39,59],[58,62,39,64],[58,67,39,69],[58,68,39,70],[58,71,39,73,"columns"],[58,78,39,80],[58,81,39,83],[58,84,39,86],[58,86,40,13,"split"],[58,91,40,18],[58,92,40,19],[58,94,40,21],[58,95,40,22],[58,96,41,13,"map"],[58,99,41,16],[58,100,41,18,"c"],[58,101,41,19],[58,105,41,24],[59,10,42,12],[59,14,42,16],[59,18,42,20],[59,19,42,21,"test"],[59,23,42,25],[59,24,42,26,"c"],[59,25,42,27],[59,26,42,28],[59,30,42,32],[59,31,42,33,"quoted"],[59,37,42,39],[59,39,42,41],[60,12,43,16],[60,19,43,23],[60,21,43,25],[61,10,44,12],[62,10,45,12],[62,14,45,16,"c"],[62,15,45,17],[62,20,45,22],[62,23,45,25],[62,25,45,27],[63,12,46,16,"quoted"],[63,18,46,22],[63,21,46,25],[63,22,46,26,"quoted"],[63,28,46,32],[64,10,47,12],[65,10,48,12],[65,17,48,19,"c"],[65,18,48,20],[66,8,49,8],[66,9,49,9],[66,10,49,10],[66,11,50,13,"join"],[66,15,50,17],[66,16,50,18],[66,18,50,20],[66,19,50,21],[67,8,51,8],[67,12,51,12],[67,13,51,13,"url"],[67,16,51,16],[67,17,51,17,"searchParams"],[67,29,51,29],[67,30,51,30,"set"],[67,33,51,33],[67,34,51,34],[67,42,51,42],[67,44,51,44,"cleanedColumns"],[67,58,51,58],[67,59,51,59],[68,8,52,8],[68,12,52,12,"count"],[68,17,52,17],[68,19,52,19],[69,10,53,12],[69,14,53,16],[69,15,53,17,"headers"],[69,22,53,24],[69,23,53,25,"append"],[69,29,53,31],[69,30,53,32],[69,38,53,40],[69,40,53,42],[69,49,53,51,"count"],[69,54,53,56],[69,56,53,58],[69,57,53,59],[70,8,54,8],[71,8,55,8],[71,15,55,15],[71,19,55,19,"PostgrestFilterBuilder_1"],[71,43,55,43],[71,44,55,44,"default"],[71,51,55,51],[71,52,55,52],[72,10,56,12,"method"],[72,16,56,18],[73,10,57,12,"url"],[73,13,57,15],[73,15,57,17],[73,19,57,21],[73,20,57,22,"url"],[73,23,57,25],[74,10,58,12,"headers"],[74,17,58,19],[74,19,58,21],[74,23,58,25],[74,24,58,26,"headers"],[74,31,58,33],[75,10,59,12,"schema"],[75,16,59,18],[75,18,59,20],[75,22,59,24],[75,23,59,25,"schema"],[75,29,59,31],[76,10,60,12,"fetch"],[76,15,60,17],[76,17,60,19],[76,21,60,23],[76,22,60,24,"fetch"],[77,8,61,8],[77,9,61,9],[77,10,61,10],[78,6,62,4],[79,6,63,4],[80,0,64,0],[81,0,65,0],[82,0,66,0],[83,0,67,0],[84,0,68,0],[85,0,69,0],[86,0,70,0],[87,0,71,0],[88,0,72,0],[89,0,73,0],[90,0,74,0],[91,0,75,0],[92,0,76,0],[93,0,77,0],[94,0,78,0],[95,0,79,0],[96,0,80,0],[97,0,81,0],[98,0,82,0],[99,0,83,0],[100,0,84,0],[101,0,85,0],[102,0,86,0],[103,0,87,0],[104,0,88,0],[105,4,63,4],[106,6,63,4,"key"],[106,9,63,4],[107,6,63,4,"value"],[107,11,63,4],[107,13,89,4],[107,22,89,4,"insert"],[107,28,89,10,"insert"],[107,29,89,11,"values"],[107,35,89,17],[107,37,89,58],[108,8,89,58],[108,12,89,58,"_ref3"],[108,17,89,58],[108,20,89,58,"arguments"],[108,29,89,58],[108,30,89,58,"length"],[108,36,89,58],[108,44,89,58,"arguments"],[108,53,89,58],[108,61,89,58,"undefined"],[108,70,89,58],[108,73,89,58,"arguments"],[108,82,89,58],[108,88,89,54],[108,89,89,55],[108,90,89,56],[109,10,89,21,"count"],[109,15,89,26],[109,18,89,26,"_ref3"],[109,23,89,26],[109,24,89,21,"count"],[109,29,89,26],[110,10,89,26,"_ref3$defaultToNull"],[110,29,89,26],[110,32,89,26,"_ref3"],[110,37,89,26],[110,38,89,28,"defaultToNull"],[110,51,89,41],[111,10,89,28,"defaultToNull"],[111,23,89,41],[111,26,89,41,"_ref3$defaultToNull"],[111,45,89,41],[111,59,89,44],[111,63,89,48],[111,66,89,48,"_ref3$defaultToNull"],[111,85,89,48],[112,8,90,8],[112,12,90,12,"_a"],[112,14,90,14],[113,8,91,8],[113,12,91,14,"method"],[113,18,91,20],[113,21,91,23],[113,27,91,29],[114,8,92,8],[114,12,92,12,"count"],[114,17,92,17],[114,19,92,19],[115,10,93,12],[115,14,93,16],[115,15,93,17,"headers"],[115,22,93,24],[115,23,93,25,"append"],[115,29,93,31],[115,30,93,32],[115,38,93,40],[115,40,93,42],[115,49,93,51,"count"],[115,54,93,56],[115,56,93,58],[115,57,93,59],[116,8,94,8],[117,8,95,8],[117,12,95,12],[117,13,95,13,"defaultToNull"],[117,26,95,26],[117,28,95,28],[118,10,96,12],[118,14,96,16],[118,15,96,17,"headers"],[118,22,96,24],[118,23,96,25,"append"],[118,29,96,31],[118,30,96,32],[118,38,96,40],[118,40,96,42],[118,57,96,59],[118,58,96,60],[119,8,97,8],[120,8,98,8],[120,12,98,12,"Array"],[120,17,98,17],[120,18,98,18,"isArray"],[120,25,98,25],[120,26,98,26,"values"],[120,32,98,32],[120,33,98,33],[120,35,98,35],[121,10,99,12],[121,14,99,18,"columns"],[121,21,99,25],[121,24,99,28,"values"],[121,30,99,34],[121,31,99,35,"reduce"],[121,37,99,41],[121,38,99,42],[121,39,99,43,"acc"],[121,42,99,46],[121,44,99,48,"x"],[121,45,99,49],[121,50,99,54,"acc"],[121,53,99,57],[121,54,99,58,"concat"],[121,60,99,64],[121,61,99,65,"Object"],[121,67,99,71],[121,68,99,72,"keys"],[121,72,99,76],[121,73,99,77,"x"],[121,74,99,78],[121,75,99,79],[121,76,99,80],[121,78,99,82],[121,80,99,84],[121,81,99,85],[122,10,100,12],[122,14,100,16,"columns"],[122,21,100,23],[122,22,100,24,"length"],[122,28,100,30],[122,31,100,33],[122,32,100,34],[122,34,100,36],[123,12,101,16],[123,16,101,22,"uniqueColumns"],[123,29,101,35],[123,32,101,38],[123,33,101,39],[123,36,101,42],[123,40,101,46,"Set"],[123,43,101,49],[123,44,101,50,"columns"],[123,51,101,57],[123,52,101,58],[123,53,101,59],[123,54,101,60,"map"],[123,57,101,63],[123,58,101,65,"column"],[123,64,101,71],[123,68,101,76],[123,72,101,80,"column"],[123,78,101,86],[123,81,101,89],[123,82,101,90],[124,12,102,16],[124,16,102,20],[124,17,102,21,"url"],[124,20,102,24],[124,21,102,25,"searchParams"],[124,33,102,37],[124,34,102,38,"set"],[124,37,102,41],[124,38,102,42],[124,47,102,51],[124,49,102,53,"uniqueColumns"],[124,62,102,66],[124,63,102,67,"join"],[124,67,102,71],[124,68,102,72],[124,71,102,75],[124,72,102,76],[124,73,102,77],[125,10,103,12],[126,8,104,8],[127,8,105,8],[127,15,105,15],[127,19,105,19,"PostgrestFilterBuilder_1"],[127,43,105,43],[127,44,105,44,"default"],[127,51,105,51],[127,52,105,52],[128,10,106,12,"method"],[128,16,106,18],[129,10,107,12,"url"],[129,13,107,15],[129,15,107,17],[129,19,107,21],[129,20,107,22,"url"],[129,23,107,25],[130,10,108,12,"headers"],[130,17,108,19],[130,19,108,21],[130,23,108,25],[130,24,108,26,"headers"],[130,31,108,33],[131,10,109,12,"schema"],[131,16,109,18],[131,18,109,20],[131,22,109,24],[131,23,109,25,"schema"],[131,29,109,31],[132,10,110,12,"body"],[132,14,110,16],[132,16,110,18,"values"],[132,22,110,24],[133,10,111,12,"fetch"],[133,15,111,17],[133,17,111,19],[133,18,111,20,"_a"],[133,20,111,22],[133,23,111,25],[133,27,111,29],[133,28,111,30,"fetch"],[133,33,111,35],[133,39,111,41],[133,43,111,45],[133,47,111,49,"_a"],[133,49,111,51],[133,54,111,56],[133,59,111,61],[133,60,111,62],[133,63,111,65,"_a"],[133,65,111,67],[133,68,111,70,"fetch"],[134,8,112,8],[134,9,112,9],[134,10,112,10],[135,6,113,4],[136,6,114,4],[137,0,115,0],[138,0,116,0],[139,0,117,0],[140,0,118,0],[141,0,119,0],[142,0,120,0],[143,0,121,0],[144,0,122,0],[145,0,123,0],[146,0,124,0],[147,0,125,0],[148,0,126,0],[149,0,127,0],[150,0,128,0],[151,0,129,0],[152,0,130,0],[153,0,131,0],[154,0,132,0],[155,0,133,0],[156,0,134,0],[157,0,135,0],[158,0,136,0],[159,0,137,0],[160,0,138,0],[161,0,139,0],[162,0,140,0],[163,0,141,0],[164,0,142,0],[165,0,143,0],[166,0,144,0],[167,0,145,0],[168,0,146,0],[169,0,147,0],[170,0,148,0],[171,0,149,0],[172,0,150,0],[173,0,151,0],[174,4,114,4],[175,6,114,4,"key"],[175,9,114,4],[176,6,114,4,"value"],[176,11,114,4],[176,13,152,4],[176,22,152,4,"upsert"],[176,28,152,10,"upsert"],[176,29,152,11,"values"],[176,35,152,17],[176,37,152,96],[177,8,152,96],[177,12,152,96,"_ref4"],[177,17,152,96],[177,20,152,96,"arguments"],[177,29,152,96],[177,30,152,96,"length"],[177,36,152,96],[177,44,152,96,"arguments"],[177,53,152,96],[177,61,152,96,"undefined"],[177,70,152,96],[177,73,152,96,"arguments"],[177,82,152,96],[177,88,152,92],[177,89,152,93],[177,90,152,94],[178,10,152,21,"onConflict"],[178,20,152,31],[178,23,152,31,"_ref4"],[178,28,152,31],[178,29,152,21,"onConflict"],[178,39,152,31],[179,10,152,31,"_ref4$ignoreDuplicate"],[179,31,152,31],[179,34,152,31,"_ref4"],[179,39,152,31],[179,40,152,33,"ignoreDuplicates"],[179,56,152,49],[180,10,152,33,"ignoreDuplicates"],[180,26,152,49],[180,29,152,49,"_ref4$ignoreDuplicate"],[180,50,152,49],[180,64,152,52],[180,69,152,57],[180,72,152,57,"_ref4$ignoreDuplicate"],[180,93,152,57],[181,10,152,59,"count"],[181,15,152,64],[181,18,152,64,"_ref4"],[181,23,152,64],[181,24,152,59,"count"],[181,29,152,64],[182,10,152,64,"_ref4$defaultToNull"],[182,29,152,64],[182,32,152,64,"_ref4"],[182,37,152,64],[182,38,152,66,"defaultToNull"],[182,51,152,79],[183,10,152,66,"defaultToNull"],[183,23,152,79],[183,26,152,79,"_ref4$defaultToNull"],[183,45,152,79],[183,59,152,82],[183,63,152,86],[183,66,152,86,"_ref4$defaultToNull"],[183,85,152,86],[184,8,153,8],[184,12,153,12,"_a"],[184,14,153,14],[185,8,154,8],[185,12,154,14,"method"],[185,18,154,20],[185,21,154,23],[185,27,154,29],[186,8,155,8],[186,12,155,12],[186,13,155,13,"headers"],[186,20,155,20],[186,21,155,21,"append"],[186,27,155,27],[186,28,155,28],[186,36,155,36],[186,38,155,38],[186,52,155,52,"ignoreDuplicates"],[186,68,155,68],[186,71,155,71],[186,79,155,79],[186,82,155,82],[186,89,155,89],[186,102,155,102],[186,103,155,103],[187,8,156,8],[187,12,156,12,"onConflict"],[187,22,156,22],[187,27,156,27,"undefined"],[187,36,156,36],[187,38,157,12],[187,42,157,16],[187,43,157,17,"url"],[187,46,157,20],[187,47,157,21,"searchParams"],[187,59,157,33],[187,60,157,34,"set"],[187,63,157,37],[187,64,157,38],[187,77,157,51],[187,79,157,53,"onConflict"],[187,89,157,63],[187,90,157,64],[188,8,158,8],[188,12,158,12,"count"],[188,17,158,17],[188,19,158,19],[189,10,159,12],[189,14,159,16],[189,15,159,17,"headers"],[189,22,159,24],[189,23,159,25,"append"],[189,29,159,31],[189,30,159,32],[189,38,159,40],[189,40,159,42],[189,49,159,51,"count"],[189,54,159,56],[189,56,159,58],[189,57,159,59],[190,8,160,8],[191,8,161,8],[191,12,161,12],[191,13,161,13,"defaultToNull"],[191,26,161,26],[191,28,161,28],[192,10,162,12],[192,14,162,16],[192,15,162,17,"headers"],[192,22,162,24],[192,23,162,25,"append"],[192,29,162,31],[192,30,162,32],[192,38,162,40],[192,40,162,42],[192,57,162,59],[192,58,162,60],[193,8,163,8],[194,8,164,8],[194,12,164,12,"Array"],[194,17,164,17],[194,18,164,18,"isArray"],[194,25,164,25],[194,26,164,26,"values"],[194,32,164,32],[194,33,164,33],[194,35,164,35],[195,10,165,12],[195,14,165,18,"columns"],[195,21,165,25],[195,24,165,28,"values"],[195,30,165,34],[195,31,165,35,"reduce"],[195,37,165,41],[195,38,165,42],[195,39,165,43,"acc"],[195,42,165,46],[195,44,165,48,"x"],[195,45,165,49],[195,50,165,54,"acc"],[195,53,165,57],[195,54,165,58,"concat"],[195,60,165,64],[195,61,165,65,"Object"],[195,67,165,71],[195,68,165,72,"keys"],[195,72,165,76],[195,73,165,77,"x"],[195,74,165,78],[195,75,165,79],[195,76,165,80],[195,78,165,82],[195,80,165,84],[195,81,165,85],[196,10,166,12],[196,14,166,16,"columns"],[196,21,166,23],[196,22,166,24,"length"],[196,28,166,30],[196,31,166,33],[196,32,166,34],[196,34,166,36],[197,12,167,16],[197,16,167,22,"uniqueColumns"],[197,29,167,35],[197,32,167,38],[197,33,167,39],[197,36,167,42],[197,40,167,46,"Set"],[197,43,167,49],[197,44,167,50,"columns"],[197,51,167,57],[197,52,167,58],[197,53,167,59],[197,54,167,60,"map"],[197,57,167,63],[197,58,167,65,"column"],[197,64,167,71],[197,68,167,76],[197,72,167,80,"column"],[197,78,167,86],[197,81,167,89],[197,82,167,90],[198,12,168,16],[198,16,168,20],[198,17,168,21,"url"],[198,20,168,24],[198,21,168,25,"searchParams"],[198,33,168,37],[198,34,168,38,"set"],[198,37,168,41],[198,38,168,42],[198,47,168,51],[198,49,168,53,"uniqueColumns"],[198,62,168,66],[198,63,168,67,"join"],[198,67,168,71],[198,68,168,72],[198,71,168,75],[198,72,168,76],[198,73,168,77],[199,10,169,12],[200,8,170,8],[201,8,171,8],[201,15,171,15],[201,19,171,19,"PostgrestFilterBuilder_1"],[201,43,171,43],[201,44,171,44,"default"],[201,51,171,51],[201,52,171,52],[202,10,172,12,"method"],[202,16,172,18],[203,10,173,12,"url"],[203,13,173,15],[203,15,173,17],[203,19,173,21],[203,20,173,22,"url"],[203,23,173,25],[204,10,174,12,"headers"],[204,17,174,19],[204,19,174,21],[204,23,174,25],[204,24,174,26,"headers"],[204,31,174,33],[205,10,175,12,"schema"],[205,16,175,18],[205,18,175,20],[205,22,175,24],[205,23,175,25,"schema"],[205,29,175,31],[206,10,176,12,"body"],[206,14,176,16],[206,16,176,18,"values"],[206,22,176,24],[207,10,177,12,"fetch"],[207,15,177,17],[207,17,177,19],[207,18,177,20,"_a"],[207,20,177,22],[207,23,177,25],[207,27,177,29],[207,28,177,30,"fetch"],[207,33,177,35],[207,39,177,41],[207,43,177,45],[207,47,177,49,"_a"],[207,49,177,51],[207,54,177,56],[207,59,177,61],[207,60,177,62],[207,63,177,65,"_a"],[207,65,177,67],[207,68,177,70,"fetch"],[208,8,178,8],[208,9,178,9],[208,10,178,10],[209,6,179,4],[210,6,180,4],[211,0,181,0],[212,0,182,0],[213,0,183,0],[214,0,184,0],[215,0,185,0],[216,0,186,0],[217,0,187,0],[218,0,188,0],[219,0,189,0],[220,0,190,0],[221,0,191,0],[222,0,192,0],[223,0,193,0],[224,0,194,0],[225,0,195,0],[226,0,196,0],[227,0,197,0],[228,0,198,0],[229,0,199,0],[230,0,200,0],[231,4,180,4],[232,6,180,4,"key"],[232,9,180,4],[233,6,180,4,"value"],[233,11,180,4],[233,13,201,4],[233,22,201,4,"update"],[233,28,201,10,"update"],[233,29,201,11,"values"],[233,35,201,17],[233,37,201,36],[234,8,201,36],[234,12,201,36,"_ref5"],[234,17,201,36],[234,20,201,36,"arguments"],[234,29,201,36],[234,30,201,36,"length"],[234,36,201,36],[234,44,201,36,"arguments"],[234,53,201,36],[234,61,201,36,"undefined"],[234,70,201,36],[234,73,201,36,"arguments"],[234,82,201,36],[234,88,201,32],[234,89,201,33],[234,90,201,34],[235,10,201,21,"count"],[235,15,201,26],[235,18,201,26,"_ref5"],[235,23,201,26],[235,24,201,21,"count"],[235,29,201,26],[236,8,202,8],[236,12,202,12,"_a"],[236,14,202,14],[237,8,203,8],[237,12,203,14,"method"],[237,18,203,20],[237,21,203,23],[237,28,203,30],[238,8,204,8],[238,12,204,12,"count"],[238,17,204,17],[238,19,204,19],[239,10,205,12],[239,14,205,16],[239,15,205,17,"headers"],[239,22,205,24],[239,23,205,25,"append"],[239,29,205,31],[239,30,205,32],[239,38,205,40],[239,40,205,42],[239,49,205,51,"count"],[239,54,205,56],[239,56,205,58],[239,57,205,59],[240,8,206,8],[241,8,207,8],[241,15,207,15],[241,19,207,19,"PostgrestFilterBuilder_1"],[241,43,207,43],[241,44,207,44,"default"],[241,51,207,51],[241,52,207,52],[242,10,208,12,"method"],[242,16,208,18],[243,10,209,12,"url"],[243,13,209,15],[243,15,209,17],[243,19,209,21],[243,20,209,22,"url"],[243,23,209,25],[244,10,210,12,"headers"],[244,17,210,19],[244,19,210,21],[244,23,210,25],[244,24,210,26,"headers"],[244,31,210,33],[245,10,211,12,"schema"],[245,16,211,18],[245,18,211,20],[245,22,211,24],[245,23,211,25,"schema"],[245,29,211,31],[246,10,212,12,"body"],[246,14,212,16],[246,16,212,18,"values"],[246,22,212,24],[247,10,213,12,"fetch"],[247,15,213,17],[247,17,213,19],[247,18,213,20,"_a"],[247,20,213,22],[247,23,213,25],[247,27,213,29],[247,28,213,30,"fetch"],[247,33,213,35],[247,39,213,41],[247,43,213,45],[247,47,213,49,"_a"],[247,49,213,51],[247,54,213,56],[247,59,213,61],[247,60,213,62],[247,63,213,65,"_a"],[247,65,213,67],[247,68,213,70,"fetch"],[248,8,214,8],[248,9,214,9],[248,10,214,10],[249,6,215,4],[250,6,216,4],[251,0,217,0],[252,0,218,0],[253,0,219,0],[254,0,220,0],[255,0,221,0],[256,0,222,0],[257,0,223,0],[258,0,224,0],[259,0,225,0],[260,0,226,0],[261,0,227,0],[262,0,228,0],[263,0,229,0],[264,0,230,0],[265,0,231,0],[266,0,232,0],[267,0,233,0],[268,0,234,0],[269,4,216,4],[270,6,216,4,"key"],[270,9,216,4],[271,6,216,4,"value"],[271,11,216,4],[271,13,235,4],[271,22,235,4,"delete"],[271,29,235,10,"delete"],[271,30,235,10],[271,32,235,28],[272,8,235,28],[272,12,235,28,"_ref6"],[272,17,235,28],[272,20,235,28,"arguments"],[272,29,235,28],[272,30,235,28,"length"],[272,36,235,28],[272,44,235,28,"arguments"],[272,53,235,28],[272,61,235,28,"undefined"],[272,70,235,28],[272,73,235,28,"arguments"],[272,82,235,28],[272,88,235,24],[272,89,235,25],[272,90,235,26],[273,10,235,13,"count"],[273,15,235,18],[273,18,235,18,"_ref6"],[273,23,235,18],[273,24,235,13,"count"],[273,29,235,18],[274,8,236,8],[274,12,236,12,"_a"],[274,14,236,14],[275,8,237,8],[275,12,237,14,"method"],[275,18,237,20],[275,21,237,23],[275,29,237,31],[276,8,238,8],[276,12,238,12,"count"],[276,17,238,17],[276,19,238,19],[277,10,239,12],[277,14,239,16],[277,15,239,17,"headers"],[277,22,239,24],[277,23,239,25,"append"],[277,29,239,31],[277,30,239,32],[277,38,239,40],[277,40,239,42],[277,49,239,51,"count"],[277,54,239,56],[277,56,239,58],[277,57,239,59],[278,8,240,8],[279,8,241,8],[279,15,241,15],[279,19,241,19,"PostgrestFilterBuilder_1"],[279,43,241,43],[279,44,241,44,"default"],[279,51,241,51],[279,52,241,52],[280,10,242,12,"method"],[280,16,242,18],[281,10,243,12,"url"],[281,13,243,15],[281,15,243,17],[281,19,243,21],[281,20,243,22,"url"],[281,23,243,25],[282,10,244,12,"headers"],[282,17,244,19],[282,19,244,21],[282,23,244,25],[282,24,244,26,"headers"],[282,31,244,33],[283,10,245,12,"schema"],[283,16,245,18],[283,18,245,20],[283,22,245,24],[283,23,245,25,"schema"],[283,29,245,31],[284,10,246,12,"fetch"],[284,15,246,17],[284,17,246,19],[284,18,246,20,"_a"],[284,20,246,22],[284,23,246,25],[284,27,246,29],[284,28,246,30,"fetch"],[284,33,246,35],[284,39,246,41],[284,43,246,45],[284,47,246,49,"_a"],[284,49,246,51],[284,54,246,56],[284,59,246,61],[284,60,246,62],[284,63,246,65,"_a"],[284,65,246,67],[284,68,246,70,"fetch"],[285,8,247,8],[285,9,247,9],[285,10,247,10],[286,6,248,4],[287,4,248,5],[288,2,248,5],[289,2,250,0,"exports"],[289,9,250,7],[289,10,250,8,"default"],[289,17,250,15],[289,20,250,18,"PostgrestQueryBuilder"],[289,41,250,39],[290,0,250,40],[290,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestQueryBuilder","constructor","select","split.map$argument_0","insert","values.reduce$argument_0","map$argument_0","upsert","update","_delete"],"mappings":"AAA;wDCC;CDE;AEG;ICC;KDK;IEsB;iBCM;SDQ;KFa;II2B;0CCU,sCD;gEEE,yBF;KJY;IOuC;0CFa,sCE;gEDE,yBC;KPY;IQsB;KRc;ISoB;KTa;CFC"},"hasCjsExports":true},"type":"js/module"}]}