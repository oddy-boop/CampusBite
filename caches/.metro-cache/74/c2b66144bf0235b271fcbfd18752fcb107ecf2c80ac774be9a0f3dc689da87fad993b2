{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"./lib/websocket-factory","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":39,"column":44,"index":1619},"end":{"line":39,"column":78,"index":1653}}],"key":"lRz+66J0Lcsacu60DEtZ56ZNEzw=","exportNames":["*"],"imports":1}},{"name":"./lib/constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":20,"index":1676},"end":{"line":40,"column":46,"index":1702}}],"key":"Tozkr70n9lVAcLLAJew2JSVOK9Y=","exportNames":["*"],"imports":1}},{"name":"./lib/serializer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":37,"index":1741},"end":{"line":41,"column":64,"index":1768}}],"key":"w6PS/DWxGJvYtDNZkOtbDcmG8Nw=","exportNames":["*"],"imports":1}},{"name":"./lib/timer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":42,"column":32,"index":1803},"end":{"line":42,"column":54,"index":1825}}],"key":"w0qAHA9+ZFUiKikDuQKxEElN35A=","exportNames":["*"],"imports":1}},{"name":"./lib/transformers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":43,"column":23,"index":1851},"end":{"line":43,"column":52,"index":1880}}],"key":"WvmsZDe1rMnc+jBORnBzUNvCIm8=","exportNames":["*"],"imports":1}},{"name":"./RealtimeChannel","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":42,"index":1924},"end":{"line":44,"column":70,"index":1952}}],"key":"XSu+A4jXCyp4V+QR2OkNPazTe3s=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _asyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\").default;\n  var _classCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\").default;\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var websocket_factory_1 = __importDefault(require(_dependencyMap[3], \"./lib/websocket-factory\"));\n  var constants_1 = require(_dependencyMap[4], \"./lib/constants\");\n  var serializer_1 = __importDefault(require(_dependencyMap[5], \"./lib/serializer\"));\n  var timer_1 = __importDefault(require(_dependencyMap[6], \"./lib/timer\"));\n  var transformers_1 = require(_dependencyMap[7], \"./lib/transformers\");\n  var RealtimeChannel_1 = __importDefault(require(_dependencyMap[8], \"./RealtimeChannel\"));\n  var noop = () => {};\n  // Connection-related constants\n  var CONNECTION_TIMEOUTS = {\n    HEARTBEAT_INTERVAL: 25000,\n    RECONNECT_DELAY: 10,\n    HEARTBEAT_TIMEOUT_FALLBACK: 100\n  };\n  var RECONNECT_INTERVALS = [1000, 2000, 5000, 10000];\n  var DEFAULT_RECONNECT_FALLBACK = 10000;\n  var WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\n  var RealtimeClient = /*#__PURE__*/function () {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.heartbeatCallback The optional function to handle heartbeat status.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.logLevel Sets the log level for Realtime\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    function RealtimeClient(endPoint, options) {\n      _classCallCheck(this, RealtimeClient);\n      var _a;\n      this.accessTokenValue = null;\n      this.apiKey = null;\n      this.channels = new Array();\n      this.endPoint = '';\n      this.httpEndpoint = '';\n      /** @deprecated headers cannot be set on websocket connections */\n      this.headers = {};\n      this.params = {};\n      this.timeout = constants_1.DEFAULT_TIMEOUT;\n      this.transport = null;\n      this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n      this.heartbeatTimer = undefined;\n      this.pendingHeartbeatRef = null;\n      this.heartbeatCallback = noop;\n      this.ref = 0;\n      this.reconnectTimer = null;\n      this.logger = noop;\n      this.conn = null;\n      this.sendBuffer = [];\n      this.serializer = new serializer_1.default();\n      this.stateChangeCallbacks = {\n        open: [],\n        close: [],\n        error: [],\n        message: []\n      };\n      this.accessToken = null;\n      this._connectionState = 'disconnected';\n      this._wasManualDisconnect = false;\n      this._authPromise = null;\n      /**\n       * Use either custom fetch, if provided, or default fetch to make HTTP requests\n       *\n       * @internal\n       */\n      this._resolveFetch = customFetch => {\n        var _fetch;\n        if (customFetch) {\n          _fetch = customFetch;\n        } else if (typeof fetch === 'undefined') {\n          // Node.js environment without native fetch\n          _fetch = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return Promise.resolve(`${'@supabase/node-fetch'}`).then(s => __importStar(function (line) {\n              throw new Error('Dynamic require defined at line ' + line + '; not supported by Metro');\n            }(124))).then(_ref => {\n              var fetch = _ref.default;\n              return fetch(...args);\n            }).catch(error => {\n              throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. ` + `This is required for HTTP requests in Node.js environments without native fetch.`);\n            });\n          };\n        } else {\n          _fetch = fetch;\n        }\n        return function () {\n          return _fetch(...arguments);\n        };\n      };\n      // Validate required parameters\n      if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {\n        throw new Error('API key is required to connect to Realtime');\n      }\n      this.apiKey = options.params.apikey;\n      // Initialize endpoint URLs\n      this.endPoint = `${endPoint}/${constants_1.TRANSPORTS.websocket}`;\n      this.httpEndpoint = (0, transformers_1.httpEndpointURL)(endPoint);\n      this._initializeOptions(options);\n      this._setupReconnectionTimer();\n      this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    return _createClass(RealtimeClient, [{\n      key: \"connect\",\n      value: function connect() {\n        // Skip if already connecting, disconnecting, or connected\n        if (this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected()) {\n          return;\n        }\n        this._setConnectionState('connecting');\n        this._setAuthSafely('connect');\n        // Establish WebSocket connection\n        if (this.transport) {\n          // Use custom transport if provided\n          this.conn = new this.transport(this.endpointURL());\n        } else {\n          // Try to use native WebSocket\n          try {\n            this.conn = websocket_factory_1.default.createWebSocket(this.endpointURL());\n          } catch (error) {\n            this._setConnectionState('disconnected');\n            var errorMessage = error.message;\n            // Provide helpful error message based on environment\n            if (errorMessage.includes('Node.js')) {\n              throw new Error(`${errorMessage}\\n\\n` + 'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' + 'Option 1: Use Node.js 22+ which has native WebSocket support\\n' + 'Option 2: Install and provide the \"ws\" package:\\n\\n' + '  npm install ws\\n\\n' + '  import ws from \"ws\"\\n' + '  const client = new RealtimeClient(url, {\\n' + '    ...options,\\n' + '    transport: ws\\n' + '  })');\n            }\n            throw new Error(`WebSocket not available: ${errorMessage}`);\n          }\n        }\n        this._setupConnectionHandlers();\n      }\n      /**\n       * Returns the URL of the websocket.\n       * @returns string The URL of the websocket.\n       */\n    }, {\n      key: \"endpointURL\",\n      value: function endpointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n          vsn: constants_1.VSN\n        }));\n      }\n      /**\n       * Disconnects the socket.\n       *\n       * @param code A numeric status code to send on disconnect.\n       * @param reason A custom reason for the disconnect.\n       */\n    }, {\n      key: \"disconnect\",\n      value: function disconnect(code, reason) {\n        if (this.isDisconnecting()) {\n          return;\n        }\n        this._setConnectionState('disconnecting', true);\n        if (this.conn) {\n          // Setup fallback timer to prevent hanging in disconnecting state\n          var fallbackTimer = setTimeout(() => {\n            this._setConnectionState('disconnected');\n          }, 100);\n          this.conn.onclose = () => {\n            clearTimeout(fallbackTimer);\n            this._setConnectionState('disconnected');\n          };\n          // Close the WebSocket connection\n          if (code) {\n            this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n          } else {\n            this.conn.close();\n          }\n          this._teardownConnection();\n        } else {\n          this._setConnectionState('disconnected');\n        }\n      }\n      /**\n       * Returns all created channels\n       */\n    }, {\n      key: \"getChannels\",\n      value: function getChannels() {\n        return this.channels;\n      }\n      /**\n       * Unsubscribes and removes a single channel\n       * @param channel A RealtimeChannel instance\n       */\n    }, {\n      key: \"removeChannel\",\n      value: (function () {\n        var _removeChannel = _asyncToGenerator(function* (channel) {\n          var status = yield channel.unsubscribe();\n          if (this.channels.length === 0) {\n            this.disconnect();\n          }\n          return status;\n        });\n        function removeChannel(_x) {\n          return _removeChannel.apply(this, arguments);\n        }\n        return removeChannel;\n      }()\n      /**\n       * Unsubscribes and removes all channels\n       */\n      )\n    }, {\n      key: \"removeAllChannels\",\n      value: (function () {\n        var _removeAllChannels = _asyncToGenerator(function* () {\n          var values_1 = yield Promise.all(this.channels.map(channel => channel.unsubscribe()));\n          this.channels = [];\n          this.disconnect();\n          return values_1;\n        });\n        function removeAllChannels() {\n          return _removeAllChannels.apply(this, arguments);\n        }\n        return removeAllChannels;\n      }()\n      /**\n       * Logs the message.\n       *\n       * For customized logging, `this.logger` can be overridden.\n       */\n      )\n    }, {\n      key: \"log\",\n      value: function log(kind, msg, data) {\n        this.logger(kind, msg, data);\n      }\n      /**\n       * Returns the current state of the socket.\n       */\n    }, {\n      key: \"connectionState\",\n      value: function connectionState() {\n        switch (this.conn && this.conn.readyState) {\n          case constants_1.SOCKET_STATES.connecting:\n            return constants_1.CONNECTION_STATE.Connecting;\n          case constants_1.SOCKET_STATES.open:\n            return constants_1.CONNECTION_STATE.Open;\n          case constants_1.SOCKET_STATES.closing:\n            return constants_1.CONNECTION_STATE.Closing;\n          default:\n            return constants_1.CONNECTION_STATE.Closed;\n        }\n      }\n      /**\n       * Returns `true` is the connection is open.\n       */\n    }, {\n      key: \"isConnected\",\n      value: function isConnected() {\n        return this.connectionState() === constants_1.CONNECTION_STATE.Open;\n      }\n      /**\n       * Returns `true` if the connection is currently connecting.\n       */\n    }, {\n      key: \"isConnecting\",\n      value: function isConnecting() {\n        return this._connectionState === 'connecting';\n      }\n      /**\n       * Returns `true` if the connection is currently disconnecting.\n       */\n    }, {\n      key: \"isDisconnecting\",\n      value: function isDisconnecting() {\n        return this._connectionState === 'disconnecting';\n      }\n    }, {\n      key: \"channel\",\n      value: function channel(topic) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          config: {}\n        };\n        var realtimeTopic = `realtime:${topic}`;\n        var exists = this.getChannels().find(c => c.topic === realtimeTopic);\n        if (!exists) {\n          var chan = new RealtimeChannel_1.default(`realtime:${topic}`, params, this);\n          this.channels.push(chan);\n          return chan;\n        } else {\n          return exists;\n        }\n      }\n      /**\n       * Push out a message if the socket is connected.\n       *\n       * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n       */\n    }, {\n      key: \"push\",\n      value: function push(data) {\n        var topic = data.topic,\n          event = data.event,\n          payload = data.payload,\n          ref = data.ref;\n        var callback = () => {\n          this.encode(data, result => {\n            var _a;\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n          });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n          callback();\n        } else {\n          this.sendBuffer.push(callback);\n        }\n      }\n      /**\n       * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n       *\n       * If param is null it will use the `accessToken` callback function or the token set on the client.\n       *\n       * On callback used, it will set the value of the token internal to the client.\n       *\n       * @param token A JWT string to override the token set on the client.\n       */\n    }, {\n      key: \"setAuth\",\n      value: (function () {\n        var _setAuth = _asyncToGenerator(function* () {\n          var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          this._authPromise = this._performAuth(token);\n          try {\n            yield this._authPromise;\n          } finally {\n            this._authPromise = null;\n          }\n        });\n        function setAuth() {\n          return _setAuth.apply(this, arguments);\n        }\n        return setAuth;\n      }()\n      /**\n       * Sends a heartbeat message if the socket is connected.\n       */\n      )\n    }, {\n      key: \"sendHeartbeat\",\n      value: (function () {\n        var _sendHeartbeat = _asyncToGenerator(function* () {\n          var _a;\n          if (!this.isConnected()) {\n            try {\n              this.heartbeatCallback('disconnected');\n            } catch (e) {\n              this.log('error', 'error in heartbeat callback', e);\n            }\n            return;\n          }\n          // Handle heartbeat timeout and force reconnection if needed\n          if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            try {\n              this.heartbeatCallback('timeout');\n            } catch (e) {\n              this.log('error', 'error in heartbeat callback', e);\n            }\n            // Force reconnection after heartbeat timeout\n            this._wasManualDisconnect = false;\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(constants_1.WS_CLOSE_NORMAL, 'heartbeat timeout');\n            setTimeout(() => {\n              var _a;\n              if (!this.isConnected()) {\n                (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n              }\n            }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);\n            return;\n          }\n          // Send heartbeat message to server\n          this.pendingHeartbeatRef = this._makeRef();\n          this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef\n          });\n          try {\n            this.heartbeatCallback('sent');\n          } catch (e) {\n            this.log('error', 'error in heartbeat callback', e);\n          }\n          this._setAuthSafely('heartbeat');\n        });\n        function sendHeartbeat() {\n          return _sendHeartbeat.apply(this, arguments);\n        }\n        return sendHeartbeat;\n      }())\n    }, {\n      key: \"onHeartbeat\",\n      value: function onHeartbeat(callback) {\n        this.heartbeatCallback = callback;\n      }\n      /**\n       * Flushes send buffer\n       */\n    }, {\n      key: \"flushSendBuffer\",\n      value: function flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n          this.sendBuffer.forEach(callback => callback());\n          this.sendBuffer = [];\n        }\n      }\n      /**\n       * Return the next message ref, accounting for overflows\n       *\n       * @internal\n       */\n    }, {\n      key: \"_makeRef\",\n      value: function _makeRef() {\n        var newRef = this.ref + 1;\n        if (newRef === this.ref) {\n          this.ref = 0;\n        } else {\n          this.ref = newRef;\n        }\n        return this.ref.toString();\n      }\n      /**\n       * Unsubscribe from channels with the specified topic.\n       *\n       * @internal\n       */\n    }, {\n      key: \"_leaveOpenTopic\",\n      value: function _leaveOpenTopic(topic) {\n        var dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n        if (dupChannel) {\n          this.log('transport', `leaving duplicate topic \"${topic}\"`);\n          dupChannel.unsubscribe();\n        }\n      }\n      /**\n       * Removes a subscription from the socket.\n       *\n       * @param channel An open subscription.\n       *\n       * @internal\n       */\n    }, {\n      key: \"_remove\",\n      value: function _remove(channel) {\n        this.channels = this.channels.filter(c => c.topic !== channel.topic);\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnMessage\",\n      value: function _onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, msg => {\n          // Handle heartbeat responses\n          if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\n            try {\n              this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error');\n            } catch (e) {\n              this.log('error', 'error in heartbeat callback', e);\n            }\n          }\n          // Handle pending heartbeat reference cleanup\n          if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n          }\n          // Log incoming message\n          var topic = msg.topic,\n            event = msg.event,\n            payload = msg.payload,\n            ref = msg.ref;\n          var refString = ref ? `(${ref})` : '';\n          var status = payload.status || '';\n          this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload);\n          // Route message to appropriate channels\n          this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n          this._triggerStateCallbacks('message', msg);\n        });\n      }\n      /**\n       * Clear specific timer\n       * @internal\n       */\n    }, {\n      key: \"_clearTimer\",\n      value: function _clearTimer(timer) {\n        var _a;\n        if (timer === 'heartbeat' && this.heartbeatTimer) {\n          clearInterval(this.heartbeatTimer);\n          this.heartbeatTimer = undefined;\n        } else if (timer === 'reconnect') {\n          (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();\n        }\n      }\n      /**\n       * Clear all timers\n       * @internal\n       */\n    }, {\n      key: \"_clearAllTimers\",\n      value: function _clearAllTimers() {\n        this._clearTimer('heartbeat');\n        this._clearTimer('reconnect');\n      }\n      /**\n       * Setup connection handlers for WebSocket events\n       * @internal\n       */\n    }, {\n      key: \"_setupConnectionHandlers\",\n      value: function _setupConnectionHandlers() {\n        if (!this.conn) return;\n        // Set binary type if supported (browsers and most WebSocket implementations)\n        if ('binaryType' in this.conn) {\n          ;\n          this.conn.binaryType = 'arraybuffer';\n        }\n        this.conn.onopen = () => this._onConnOpen();\n        this.conn.onerror = error => this._onConnError(error);\n        this.conn.onmessage = event => this._onConnMessage(event);\n        this.conn.onclose = event => this._onConnClose(event);\n      }\n      /**\n       * Teardown connection and cleanup resources\n       * @internal\n       */\n    }, {\n      key: \"_teardownConnection\",\n      value: function _teardownConnection() {\n        if (this.conn) {\n          this.conn.onopen = null;\n          this.conn.onerror = null;\n          this.conn.onmessage = null;\n          this.conn.onclose = null;\n          this.conn = null;\n        }\n        this._clearAllTimers();\n        this.channels.forEach(channel => channel.teardown());\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnOpen\",\n      value: function _onConnOpen() {\n        this._setConnectionState('connected');\n        this.log('transport', `connected to ${this.endpointURL()}`);\n        this.flushSendBuffer();\n        this._clearTimer('reconnect');\n        if (!this.worker) {\n          this._startHeartbeat();\n        } else {\n          if (!this.workerRef) {\n            this._startWorkerHeartbeat();\n          }\n        }\n        this._triggerStateCallbacks('open');\n      }\n      /** @internal */\n    }, {\n      key: \"_startHeartbeat\",\n      value: function _startHeartbeat() {\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n      }\n      /** @internal */\n    }, {\n      key: \"_startWorkerHeartbeat\",\n      value: function _startWorkerHeartbeat() {\n        if (this.workerUrl) {\n          this.log('worker', `starting worker for from ${this.workerUrl}`);\n        } else {\n          this.log('worker', `starting default worker`);\n        }\n        var objectUrl = this._workerObjectUrl(this.workerUrl);\n        this.workerRef = new Worker(objectUrl);\n        this.workerRef.onerror = error => {\n          this.log('worker', 'worker error', error.message);\n          this.workerRef.terminate();\n        };\n        this.workerRef.onmessage = event => {\n          if (event.data.event === 'keepAlive') {\n            this.sendHeartbeat();\n          }\n        };\n        this.workerRef.postMessage({\n          event: 'start',\n          interval: this.heartbeatIntervalMs\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnClose\",\n      value: function _onConnClose(event) {\n        var _a;\n        this._setConnectionState('disconnected');\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this._clearTimer('heartbeat');\n        // Only schedule reconnection if it wasn't a manual disconnect\n        if (!this._wasManualDisconnect) {\n          (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n        }\n        this._triggerStateCallbacks('close', event);\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnError\",\n      value: function _onConnError(error) {\n        this._setConnectionState('disconnected');\n        this.log('transport', `${error}`);\n        this._triggerChanError();\n        this._triggerStateCallbacks('error', error);\n      }\n      /** @internal */\n    }, {\n      key: \"_triggerChanError\",\n      value: function _triggerChanError() {\n        this.channels.forEach(channel => channel._trigger(constants_1.CHANNEL_EVENTS.error));\n      }\n      /** @internal */\n    }, {\n      key: \"_appendParams\",\n      value: function _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n          return url;\n        }\n        var prefix = url.match(/\\?/) ? '&' : '?';\n        var query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n      }\n    }, {\n      key: \"_workerObjectUrl\",\n      value: function _workerObjectUrl(url) {\n        var result_url;\n        if (url) {\n          result_url = url;\n        } else {\n          var blob = new Blob([WORKER_SCRIPT], {\n            type: 'application/javascript'\n          });\n          result_url = URL.createObjectURL(blob);\n        }\n        return result_url;\n      }\n      /**\n       * Set connection state with proper state management\n       * @internal\n       */\n    }, {\n      key: \"_setConnectionState\",\n      value: function _setConnectionState(state) {\n        var manual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        this._connectionState = state;\n        if (state === 'connecting') {\n          this._wasManualDisconnect = false;\n        } else if (state === 'disconnecting') {\n          this._wasManualDisconnect = manual;\n        }\n      }\n      /**\n       * Perform the actual auth operation\n       * @internal\n       */\n    }, {\n      key: \"_performAuth\",\n      value: (function () {\n        var _performAuth2 = _asyncToGenerator(function* () {\n          var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          var tokenToSend;\n          if (token) {\n            tokenToSend = token;\n          } else if (this.accessToken) {\n            // Always call the accessToken callback to get fresh token\n            tokenToSend = yield this.accessToken();\n          } else {\n            tokenToSend = this.accessTokenValue;\n          }\n          if (this.accessTokenValue != tokenToSend) {\n            this.accessTokenValue = tokenToSend;\n            this.channels.forEach(channel => {\n              var payload = {\n                access_token: tokenToSend,\n                version: constants_1.DEFAULT_VERSION\n              };\n              tokenToSend && channel.updateJoinPayload(payload);\n              if (channel.joinedOnce && channel._isJoined()) {\n                channel._push(constants_1.CHANNEL_EVENTS.access_token, {\n                  access_token: tokenToSend\n                });\n              }\n            });\n          }\n        });\n        function _performAuth() {\n          return _performAuth2.apply(this, arguments);\n        }\n        return _performAuth;\n      }()\n      /**\n       * Wait for any in-flight auth operations to complete\n       * @internal\n       */\n      )\n    }, {\n      key: \"_waitForAuthIfNeeded\",\n      value: (function () {\n        var _waitForAuthIfNeeded2 = _asyncToGenerator(function* () {\n          if (this._authPromise) {\n            yield this._authPromise;\n          }\n        });\n        function _waitForAuthIfNeeded() {\n          return _waitForAuthIfNeeded2.apply(this, arguments);\n        }\n        return _waitForAuthIfNeeded;\n      }()\n      /**\n       * Safely call setAuth with standardized error handling\n       * @internal\n       */\n      )\n    }, {\n      key: \"_setAuthSafely\",\n      value: function _setAuthSafely() {\n        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'general';\n        this.setAuth().catch(e => {\n          this.log('error', `error setting auth in ${context}`, e);\n        });\n      }\n      /**\n       * Trigger state change callbacks with proper error handling\n       * @internal\n       */\n    }, {\n      key: \"_triggerStateCallbacks\",\n      value: function _triggerStateCallbacks(event, data) {\n        try {\n          this.stateChangeCallbacks[event].forEach(callback => {\n            try {\n              callback(data);\n            } catch (e) {\n              this.log('error', `error in ${event} callback`, e);\n            }\n          });\n        } catch (e) {\n          this.log('error', `error triggering ${event} callbacks`, e);\n        }\n      }\n      /**\n       * Setup reconnection timer with proper configuration\n       * @internal\n       */\n    }, {\n      key: \"_setupReconnectionTimer\",\n      value: function _setupReconnectionTimer() {\n        var _this = this;\n        this.reconnectTimer = new timer_1.default(/*#__PURE__*/_asyncToGenerator(function* () {\n          setTimeout(/*#__PURE__*/_asyncToGenerator(function* () {\n            yield _this._waitForAuthIfNeeded();\n            if (!_this.isConnected()) {\n              _this.connect();\n            }\n          }), CONNECTION_TIMEOUTS.RECONNECT_DELAY);\n        }), this.reconnectAfterMs);\n      }\n      /**\n       * Initialize client options with defaults\n       * @internal\n       */\n    }, {\n      key: \"_initializeOptions\",\n      value: function _initializeOptions(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        // Set defaults\n        this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;\n        this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_TIMEOUT;\n        this.heartbeatIntervalMs = (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n        this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;\n        this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;\n        this.heartbeatCallback = (_f = options === null || options === void 0 ? void 0 : options.heartbeatCallback) !== null && _f !== void 0 ? _f : noop;\n        // Handle special cases\n        if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n        if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\n          this.logLevel = options.logLevel || options.log_level;\n          this.params = Object.assign(Object.assign({}, this.params), {\n            log_level: this.logLevel\n          });\n        }\n        // Set up functions with defaults\n        this.reconnectAfterMs = (_g = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _g !== void 0 ? _g : tries => {\n          return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;\n        };\n        this.encode = (_h = options === null || options === void 0 ? void 0 : options.encode) !== null && _h !== void 0 ? _h : (payload, callback) => {\n          return callback(JSON.stringify(payload));\n        };\n        this.decode = (_j = options === null || options === void 0 ? void 0 : options.decode) !== null && _j !== void 0 ? _j : this.serializer.decode.bind(this.serializer);\n        // Handle worker setup\n        if (this.worker) {\n          if (typeof window !== 'undefined' && !window.Worker) {\n            throw new Error('Web Worker is not supported');\n          }\n          this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n        }\n      }\n    }]);\n  }();\n  exports.default = RealtimeClient;\n});","lineCount":886,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_asyncToGenerator"],[4,23,1,13],[4,26,1,13,"require"],[4,33,1,13],[4,34,1,13,"_dependencyMap"],[4,48,1,13],[4,96,1,13,"default"],[4,103,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[5,92,1,13,"default"],[5,99,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"require"],[6,28,1,13],[6,29,1,13,"_dependencyMap"],[6,43,1,13],[6,86,1,13,"default"],[6,93,1,13],[7,2,2,0],[7,6,2,4,"__createBinding"],[7,21,2,19],[7,24,2,23],[7,28,2,27],[7,32,2,31],[7,36,2,35],[7,37,2,36,"__createBinding"],[7,52,2,51],[7,57,2,57,"Object"],[7,63,2,63],[7,64,2,64,"create"],[7,70,2,70],[7,73,2,74],[7,83,2,83,"o"],[7,84,2,84],[7,86,2,86,"m"],[7,87,2,87],[7,89,2,89,"k"],[7,90,2,90],[7,92,2,92,"k2"],[7,94,2,94],[7,96,2,96],[8,4,3,4],[8,8,3,8,"k2"],[8,10,3,10],[8,15,3,15,"undefined"],[8,24,3,24],[8,26,3,26,"k2"],[8,28,3,28],[8,31,3,31,"k"],[8,32,3,32],[9,4,4,4],[9,8,4,8,"desc"],[9,12,4,12],[9,15,4,15,"Object"],[9,21,4,21],[9,22,4,22,"getOwnPropertyDescriptor"],[9,46,4,46],[9,47,4,47,"m"],[9,48,4,48],[9,50,4,50,"k"],[9,51,4,51],[9,52,4,52],[10,4,5,4],[10,8,5,8],[10,9,5,9,"desc"],[10,13,5,13],[10,18,5,18],[10,23,5,23],[10,27,5,27,"desc"],[10,31,5,31],[10,34,5,34],[10,35,5,35,"m"],[10,36,5,36],[10,37,5,37,"__esModule"],[10,47,5,47],[10,50,5,50,"desc"],[10,54,5,54],[10,55,5,55,"writable"],[10,63,5,63],[10,67,5,67,"desc"],[10,71,5,71],[10,72,5,72,"configurable"],[10,84,5,84],[10,85,5,85],[10,87,5,87],[11,6,6,6,"desc"],[11,10,6,10],[11,13,6,13],[12,8,6,15,"enumerable"],[12,18,6,25],[12,20,6,27],[12,24,6,31],[13,8,6,33,"get"],[13,11,6,36],[13,13,6,38],[13,22,6,38,"get"],[13,23,6,38],[13,25,6,49],[14,10,6,51],[14,17,6,58,"m"],[14,18,6,59],[14,19,6,60,"k"],[14,20,6,61],[14,21,6,62],[15,8,6,64],[16,6,6,66],[16,7,6,67],[17,4,7,4],[18,4,8,4,"Object"],[18,10,8,10],[18,11,8,11,"defineProperty"],[18,25,8,25],[18,26,8,26,"o"],[18,27,8,27],[18,29,8,29,"k2"],[18,31,8,31],[18,33,8,33,"desc"],[18,37,8,37],[18,38,8,38],[19,2,9,0],[19,3,9,1],[19,6,9,6],[19,16,9,15,"o"],[19,17,9,16],[19,19,9,18,"m"],[19,20,9,19],[19,22,9,21,"k"],[19,23,9,22],[19,25,9,24,"k2"],[19,27,9,26],[19,29,9,28],[20,4,10,4],[20,8,10,8,"k2"],[20,10,10,10],[20,15,10,15,"undefined"],[20,24,10,24],[20,26,10,26,"k2"],[20,28,10,28],[20,31,10,31,"k"],[20,32,10,32],[21,4,11,4,"o"],[21,5,11,5],[21,6,11,6,"k2"],[21,8,11,8],[21,9,11,9],[21,12,11,12,"m"],[21,13,11,13],[21,14,11,14,"k"],[21,15,11,15],[21,16,11,16],[22,2,12,0],[22,3,12,2],[22,4,12,3],[23,2,13,0],[23,6,13,4,"__setModuleDefault"],[23,24,13,22],[23,27,13,26],[23,31,13,30],[23,35,13,34],[23,39,13,38],[23,40,13,39,"__setModuleDefault"],[23,58,13,57],[23,63,13,63,"Object"],[23,69,13,69],[23,70,13,70,"create"],[23,76,13,76],[23,79,13,80],[23,89,13,89,"o"],[23,90,13,90],[23,92,13,92,"v"],[23,93,13,93],[23,95,13,95],[24,4,14,4,"Object"],[24,10,14,10],[24,11,14,11,"defineProperty"],[24,25,14,25],[24,26,14,26,"o"],[24,27,14,27],[24,29,14,29],[24,38,14,38],[24,40,14,40],[25,6,14,42,"enumerable"],[25,16,14,52],[25,18,14,54],[25,22,14,58],[26,6,14,60,"value"],[26,11,14,65],[26,13,14,67,"v"],[27,4,14,69],[27,5,14,70],[27,6,14,71],[28,2,15,0],[28,3,15,1],[28,6,15,5],[28,16,15,14,"o"],[28,17,15,15],[28,19,15,17,"v"],[28,20,15,18],[28,22,15,20],[29,4,16,4,"o"],[29,5,16,5],[29,6,16,6],[29,15,16,15],[29,16,16,16],[29,19,16,19,"v"],[29,20,16,20],[30,2,17,0],[30,3,17,1],[30,4,17,2],[31,2,18,0],[31,6,18,4,"__importStar"],[31,18,18,16],[31,21,18,20],[31,25,18,24],[31,29,18,28],[31,33,18,32],[31,34,18,33,"__importStar"],[31,46,18,45],[31,50,18,51],[31,62,18,63],[32,4,19,4],[32,8,19,8,"ownKeys"],[32,15,19,15],[32,18,19,18],[32,27,19,18,"ownKeys"],[32,28,19,27,"o"],[32,29,19,28],[32,31,19,30],[33,6,20,8,"ownKeys"],[33,13,20,15],[33,16,20,18,"Object"],[33,22,20,24],[33,23,20,25,"getOwnPropertyNames"],[33,42,20,44],[33,46,20,48],[33,56,20,58,"o"],[33,57,20,59],[33,59,20,61],[34,8,21,12],[34,12,21,16,"ar"],[34,14,21,18],[34,17,21,21],[34,19,21,23],[35,8,22,12],[35,13,22,17],[35,17,22,21,"k"],[35,18,22,22],[35,22,22,26,"o"],[35,23,22,27],[35,25,22,29],[35,29,22,33,"Object"],[35,35,22,39],[35,36,22,40,"prototype"],[35,45,22,49],[35,46,22,50,"hasOwnProperty"],[35,60,22,64],[35,61,22,65,"call"],[35,65,22,69],[35,66,22,70,"o"],[35,67,22,71],[35,69,22,73,"k"],[35,70,22,74],[35,71,22,75],[35,73,22,77,"ar"],[35,75,22,79],[35,76,22,80,"ar"],[35,78,22,82],[35,79,22,83,"length"],[35,85,22,89],[35,86,22,90],[35,89,22,93,"k"],[35,90,22,94],[36,8,23,12],[36,15,23,19,"ar"],[36,17,23,21],[37,6,24,8],[37,7,24,9],[38,6,25,8],[38,13,25,15,"ownKeys"],[38,20,25,22],[38,21,25,23,"o"],[38,22,25,24],[38,23,25,25],[39,4,26,4],[39,5,26,5],[40,4,27,4],[40,11,27,11],[40,21,27,21,"mod"],[40,24,27,24],[40,26,27,26],[41,6,28,8],[41,10,28,12,"mod"],[41,13,28,15],[41,17,28,19,"mod"],[41,20,28,22],[41,21,28,23,"__esModule"],[41,31,28,33],[41,33,28,35],[41,40,28,42,"mod"],[41,43,28,45],[42,6,29,8],[42,10,29,12,"result"],[42,16,29,18],[42,19,29,21],[42,20,29,22],[42,21,29,23],[43,6,30,8],[43,10,30,12,"mod"],[43,13,30,15],[43,17,30,19],[43,21,30,23],[43,23,30,25],[43,28,30,30],[43,32,30,34,"k"],[43,33,30,35],[43,36,30,38,"ownKeys"],[43,43,30,45],[43,44,30,46,"mod"],[43,47,30,49],[43,48,30,50],[43,50,30,52,"i"],[43,51,30,53],[43,54,30,56],[43,55,30,57],[43,57,30,59,"i"],[43,58,30,60],[43,61,30,63,"k"],[43,62,30,64],[43,63,30,65,"length"],[43,69,30,71],[43,71,30,73,"i"],[43,72,30,74],[43,74,30,76],[43,76,30,78],[43,80,30,82,"k"],[43,81,30,83],[43,82,30,84,"i"],[43,83,30,85],[43,84,30,86],[43,89,30,91],[43,98,30,100],[43,100,30,102,"__createBinding"],[43,115,30,117],[43,116,30,118,"result"],[43,122,30,124],[43,124,30,126,"mod"],[43,127,30,129],[43,129,30,131,"k"],[43,130,30,132],[43,131,30,133,"i"],[43,132,30,134],[43,133,30,135],[43,134,30,136],[44,6,31,8,"__setModuleDefault"],[44,24,31,26],[44,25,31,27,"result"],[44,31,31,33],[44,33,31,35,"mod"],[44,36,31,38],[44,37,31,39],[45,6,32,8],[45,13,32,15,"result"],[45,19,32,21],[46,4,33,4],[46,5,33,5],[47,2,34,0],[47,3,34,1],[47,4,34,3],[47,5,34,4],[48,2,35,0],[48,6,35,4,"__importDefault"],[48,21,35,19],[48,24,35,23],[48,28,35,27],[48,32,35,31],[48,36,35,35],[48,37,35,36,"__importDefault"],[48,52,35,51],[48,56,35,56],[48,66,35,66,"mod"],[48,69,35,69],[48,71,35,71],[49,4,36,4],[49,11,36,12,"mod"],[49,14,36,15],[49,18,36,19,"mod"],[49,21,36,22],[49,22,36,23,"__esModule"],[49,32,36,33],[49,35,36,37,"mod"],[49,38,36,40],[49,41,36,43],[50,6,36,45],[50,15,36,54],[50,17,36,56,"mod"],[51,4,36,60],[51,5,36,61],[52,2,37,0],[52,3,37,1],[53,2,38,0,"Object"],[53,8,38,6],[53,9,38,7,"defineProperty"],[53,23,38,21],[53,24,38,22,"exports"],[53,31,38,29],[53,33,38,31],[53,45,38,43],[53,47,38,45],[54,4,38,47,"value"],[54,9,38,52],[54,11,38,54],[55,2,38,59],[55,3,38,60],[55,4,38,61],[56,2,39,0],[56,6,39,6,"websocket_factory_1"],[56,25,39,25],[56,28,39,28,"__importDefault"],[56,43,39,43],[56,44,39,44,"require"],[56,51,39,51],[56,52,39,51,"_dependencyMap"],[56,66,39,51],[56,96,39,77],[56,97,39,78],[56,98,39,79],[57,2,40,0],[57,6,40,6,"constants_1"],[57,17,40,17],[57,20,40,20,"require"],[57,27,40,27],[57,28,40,27,"_dependencyMap"],[57,42,40,27],[57,64,40,45],[57,65,40,46],[58,2,41,0],[58,6,41,6,"serializer_1"],[58,18,41,18],[58,21,41,21,"__importDefault"],[58,36,41,36],[58,37,41,37,"require"],[58,44,41,44],[58,45,41,44,"_dependencyMap"],[58,59,41,44],[58,82,41,63],[58,83,41,64],[58,84,41,65],[59,2,42,0],[59,6,42,6,"timer_1"],[59,13,42,13],[59,16,42,16,"__importDefault"],[59,31,42,31],[59,32,42,32,"require"],[59,39,42,39],[59,40,42,39,"_dependencyMap"],[59,54,42,39],[59,72,42,53],[59,73,42,54],[59,74,42,55],[60,2,43,0],[60,6,43,6,"transformers_1"],[60,20,43,20],[60,23,43,23,"require"],[60,30,43,30],[60,31,43,30,"_dependencyMap"],[60,45,43,30],[60,70,43,51],[60,71,43,52],[61,2,44,0],[61,6,44,6,"RealtimeChannel_1"],[61,23,44,23],[61,26,44,26,"__importDefault"],[61,41,44,41],[61,42,44,42,"require"],[61,49,44,49],[61,50,44,49,"_dependencyMap"],[61,64,44,49],[61,88,44,69],[61,89,44,70],[61,90,44,71],[62,2,45,0],[62,6,45,6,"noop"],[62,10,45,10],[62,13,45,13,"noop"],[62,14,45,13],[62,19,45,19],[62,20,45,21],[62,21,45,22],[63,2,46,0],[64,2,47,0],[64,6,47,6,"CONNECTION_TIMEOUTS"],[64,25,47,25],[64,28,47,28],[65,4,48,4,"HEARTBEAT_INTERVAL"],[65,22,48,22],[65,24,48,24],[65,29,48,29],[66,4,49,4,"RECONNECT_DELAY"],[66,19,49,19],[66,21,49,21],[66,23,49,23],[67,4,50,4,"HEARTBEAT_TIMEOUT_FALLBACK"],[67,30,50,30],[67,32,50,32],[68,2,51,0],[68,3,51,1],[69,2,52,0],[69,6,52,6,"RECONNECT_INTERVALS"],[69,25,52,25],[69,28,52,28],[69,29,52,29],[69,33,52,33],[69,35,52,35],[69,39,52,39],[69,41,52,41],[69,45,52,45],[69,47,52,47],[69,52,52,52],[69,53,52,53],[70,2,53,0],[70,6,53,6,"DEFAULT_RECONNECT_FALLBACK"],[70,32,53,32],[70,35,53,35],[70,40,53,40],[71,2,54,0],[71,6,54,6,"WORKER_SCRIPT"],[71,19,54,19],[71,22,54,22],[72,0,55,0],[73,0,56,0],[74,0,57,0],[75,0,58,0],[76,0,59,0],[76,6,59,6],[77,2,59,7],[77,6,60,6,"RealtimeClient"],[77,20,60,20],[78,4,61,4],[79,0,62,0],[80,0,63,0],[81,0,64,0],[82,0,65,0],[83,0,66,0],[84,0,67,0],[85,0,68,0],[86,0,69,0],[87,0,70,0],[88,0,71,0],[89,0,72,0],[90,0,73,0],[91,0,74,0],[92,0,75,0],[93,0,76,0],[94,0,77,0],[95,0,78,0],[96,0,79,0],[97,4,80,4],[97,13,80,4,"RealtimeClient"],[97,28,80,16,"endPoint"],[97,36,80,24],[97,38,80,26,"options"],[97,45,80,33],[97,47,80,35],[98,6,80,35,"_classCallCheck"],[98,21,80,35],[98,28,80,35,"RealtimeClient"],[98,42,80,35],[99,6,81,8],[99,10,81,12,"_a"],[99,12,81,14],[100,6,82,8],[100,10,82,12],[100,11,82,13,"accessTokenValue"],[100,27,82,29],[100,30,82,32],[100,34,82,36],[101,6,83,8],[101,10,83,12],[101,11,83,13,"apiKey"],[101,17,83,19],[101,20,83,22],[101,24,83,26],[102,6,84,8],[102,10,84,12],[102,11,84,13,"channels"],[102,19,84,21],[102,22,84,24],[102,26,84,28,"Array"],[102,31,84,33],[102,32,84,34],[102,33,84,35],[103,6,85,8],[103,10,85,12],[103,11,85,13,"endPoint"],[103,19,85,21],[103,22,85,24],[103,24,85,26],[104,6,86,8],[104,10,86,12],[104,11,86,13,"httpEndpoint"],[104,23,86,25],[104,26,86,28],[104,28,86,30],[105,6,87,8],[106,6,88,8],[106,10,88,12],[106,11,88,13,"headers"],[106,18,88,20],[106,21,88,23],[106,22,88,24],[106,23,88,25],[107,6,89,8],[107,10,89,12],[107,11,89,13,"params"],[107,17,89,19],[107,20,89,22],[107,21,89,23],[107,22,89,24],[108,6,90,8],[108,10,90,12],[108,11,90,13,"timeout"],[108,18,90,20],[108,21,90,23,"constants_1"],[108,32,90,34],[108,33,90,35,"DEFAULT_TIMEOUT"],[108,48,90,50],[109,6,91,8],[109,10,91,12],[109,11,91,13,"transport"],[109,20,91,22],[109,23,91,25],[109,27,91,29],[110,6,92,8],[110,10,92,12],[110,11,92,13,"heartbeatIntervalMs"],[110,30,92,32],[110,33,92,35,"CONNECTION_TIMEOUTS"],[110,52,92,54],[110,53,92,55,"HEARTBEAT_INTERVAL"],[110,71,92,73],[111,6,93,8],[111,10,93,12],[111,11,93,13,"heartbeatTimer"],[111,25,93,27],[111,28,93,30,"undefined"],[111,37,93,39],[112,6,94,8],[112,10,94,12],[112,11,94,13,"pendingHeartbeatRef"],[112,30,94,32],[112,33,94,35],[112,37,94,39],[113,6,95,8],[113,10,95,12],[113,11,95,13,"heartbeatCallback"],[113,28,95,30],[113,31,95,33,"noop"],[113,35,95,37],[114,6,96,8],[114,10,96,12],[114,11,96,13,"ref"],[114,14,96,16],[114,17,96,19],[114,18,96,20],[115,6,97,8],[115,10,97,12],[115,11,97,13,"reconnectTimer"],[115,25,97,27],[115,28,97,30],[115,32,97,34],[116,6,98,8],[116,10,98,12],[116,11,98,13,"logger"],[116,17,98,19],[116,20,98,22,"noop"],[116,24,98,26],[117,6,99,8],[117,10,99,12],[117,11,99,13,"conn"],[117,15,99,17],[117,18,99,20],[117,22,99,24],[118,6,100,8],[118,10,100,12],[118,11,100,13,"sendBuffer"],[118,21,100,23],[118,24,100,26],[118,26,100,28],[119,6,101,8],[119,10,101,12],[119,11,101,13,"serializer"],[119,21,101,23],[119,24,101,26],[119,28,101,30,"serializer_1"],[119,40,101,42],[119,41,101,43,"default"],[119,48,101,50],[119,49,101,51],[119,50,101,52],[120,6,102,8],[120,10,102,12],[120,11,102,13,"stateChangeCallbacks"],[120,31,102,33],[120,34,102,36],[121,8,103,12,"open"],[121,12,103,16],[121,14,103,18],[121,16,103,20],[122,8,104,12,"close"],[122,13,104,17],[122,15,104,19],[122,17,104,21],[123,8,105,12,"error"],[123,13,105,17],[123,15,105,19],[123,17,105,21],[124,8,106,12,"message"],[124,15,106,19],[124,17,106,21],[125,6,107,8],[125,7,107,9],[126,6,108,8],[126,10,108,12],[126,11,108,13,"accessToken"],[126,22,108,24],[126,25,108,27],[126,29,108,31],[127,6,109,8],[127,10,109,12],[127,11,109,13,"_connectionState"],[127,27,109,29],[127,30,109,32],[127,44,109,46],[128,6,110,8],[128,10,110,12],[128,11,110,13,"_wasManualDisconnect"],[128,31,110,33],[128,34,110,36],[128,39,110,41],[129,6,111,8],[129,10,111,12],[129,11,111,13,"_authPromise"],[129,23,111,25],[129,26,111,28],[129,30,111,32],[130,6,112,8],[131,0,113,0],[132,0,114,0],[133,0,115,0],[134,0,116,0],[135,6,117,8],[135,10,117,12],[135,11,117,13,"_resolveFetch"],[135,24,117,26],[135,27,117,30,"customFetch"],[135,38,117,41],[135,42,117,46],[136,8,118,12],[136,12,118,16,"_fetch"],[136,18,118,22],[137,8,119,12],[137,12,119,16,"customFetch"],[137,23,119,27],[137,25,119,29],[138,10,120,16,"_fetch"],[138,16,120,22],[138,19,120,25,"customFetch"],[138,30,120,36],[139,8,121,12],[139,9,121,13],[139,15,122,17],[139,19,122,21],[139,26,122,28,"fetch"],[139,31,122,33],[139,36,122,38],[139,47,122,49],[139,49,122,51],[140,10,123,16],[141,10,124,16,"_fetch"],[141,16,124,22],[141,19,124,25],[141,28,124,25,"_fetch"],[141,29,124,25],[142,12,124,25],[142,21,124,25,"_len"],[142,25,124,25],[142,28,124,25,"arguments"],[142,37,124,25],[142,38,124,25,"length"],[142,44,124,25],[142,46,124,29,"args"],[142,50,124,33],[142,57,124,33,"Array"],[142,62,124,33],[142,63,124,33,"_len"],[142,67,124,33],[142,70,124,33,"_key"],[142,74,124,33],[142,80,124,33,"_key"],[142,84,124,33],[142,87,124,33,"_len"],[142,91,124,33],[142,93,124,33,"_key"],[142,97,124,33],[143,14,124,29,"args"],[143,18,124,33],[143,19,124,33,"_key"],[143,23,124,33],[143,27,124,33,"arguments"],[143,36,124,33],[143,37,124,33,"_key"],[143,41,124,33],[144,12,124,33],[145,12,124,33],[145,19,124,38,"Promise"],[145,26,124,45],[145,27,124,46,"resolve"],[145,34,124,53],[145,35,124,54],[145,38,124,57],[145,60,124,79],[145,62,124,81],[145,63,124,82],[145,64,124,83,"then"],[145,68,124,87],[145,69,124,88,"s"],[145,70,124,89],[145,74,124,93,"__importStar"],[145,86,124,105],[145,97,124,105,"line"],[145,101,124,105],[146,14,124,105],[146,24,124,105,"Error"],[146,29,124,105],[146,67,124,105,"line"],[146,71,124,105],[147,12,124,105],[147,18,124,116],[147,19,124,117],[147,20,124,118],[147,21,124,119,"then"],[147,25,124,123],[147,26,124,124,"_ref"],[147,30,124,124],[148,14,124,124],[148,18,124,136,"fetch"],[148,23,124,141],[148,26,124,141,"_ref"],[148,30,124,141],[148,31,124,127,"default"],[148,38,124,134],[149,14,124,134],[149,21,124,148,"fetch"],[149,26,124,153],[149,27,124,154],[149,30,124,157,"args"],[149,34,124,161],[149,35,124,162],[150,12,124,162],[150,14,124,163],[150,15,125,21,"catch"],[150,20,125,26],[150,21,125,28,"error"],[150,26,125,33],[150,30,125,38],[151,14,126,20],[151,20,126,26],[151,24,126,30,"Error"],[151,29,126,35],[151,30,126,36],[151,70,126,76,"error"],[151,75,126,81],[151,76,126,82,"message"],[151,83,126,89],[151,87,126,93],[151,90,127,24],[151,172,127,106],[151,173,127,107],[152,12,128,16],[152,13,128,17],[152,14,128,18],[153,10,128,18],[154,8,129,12],[154,9,129,13],[154,15,130,17],[155,10,131,16,"_fetch"],[155,16,131,22],[155,19,131,25,"fetch"],[155,24,131,30],[156,8,132,12],[157,8,133,12],[157,15,133,19],[158,10,133,19],[158,17,133,32,"_fetch"],[158,23,133,38],[158,24,133,39],[158,27,133,39,"arguments"],[158,36,133,46],[158,37,133,47],[159,8,133,47],[160,6,134,8],[160,7,134,9],[161,6,135,8],[162,6,136,8],[162,10,136,12],[162,12,136,14],[162,13,136,15,"_a"],[162,15,136,17],[162,18,136,20,"options"],[162,25,136,27],[162,30,136,32],[162,34,136,36],[162,38,136,40,"options"],[162,45,136,47],[162,50,136,52],[162,55,136,57],[162,56,136,58],[162,59,136,61],[162,64,136,66],[162,65,136,67],[162,68,136,70,"options"],[162,75,136,77],[162,76,136,78,"params"],[162,82,136,84],[162,88,136,90],[162,92,136,94],[162,96,136,98,"_a"],[162,98,136,100],[162,103,136,105],[162,108,136,110],[162,109,136,111],[162,112,136,114],[162,117,136,119],[162,118,136,120],[162,121,136,123,"_a"],[162,123,136,125],[162,124,136,126,"apikey"],[162,130,136,132],[162,131,136,133],[162,133,136,135],[163,8,137,12],[163,14,137,18],[163,18,137,22,"Error"],[163,23,137,27],[163,24,137,28],[163,68,137,72],[163,69,137,73],[164,6,138,8],[165,6,139,8],[165,10,139,12],[165,11,139,13,"apiKey"],[165,17,139,19],[165,20,139,22,"options"],[165,27,139,29],[165,28,139,30,"params"],[165,34,139,36],[165,35,139,37,"apikey"],[165,41,139,43],[166,6,140,8],[167,6,141,8],[167,10,141,12],[167,11,141,13,"endPoint"],[167,19,141,21],[167,22,141,24],[167,25,141,27,"endPoint"],[167,33,141,35],[167,37,141,39,"constants_1"],[167,48,141,50],[167,49,141,51,"TRANSPORTS"],[167,59,141,61],[167,60,141,62,"websocket"],[167,69,141,71],[167,71,141,73],[168,6,142,8],[168,10,142,12],[168,11,142,13,"httpEndpoint"],[168,23,142,25],[168,26,142,28],[168,27,142,29],[168,28,142,30],[168,30,142,32,"transformers_1"],[168,44,142,46],[168,45,142,47,"httpEndpointURL"],[168,60,142,62],[168,62,142,64,"endPoint"],[168,70,142,72],[168,71,142,73],[169,6,143,8],[169,10,143,12],[169,11,143,13,"_initializeOptions"],[169,29,143,31],[169,30,143,32,"options"],[169,37,143,39],[169,38,143,40],[170,6,144,8],[170,10,144,12],[170,11,144,13,"_setupReconnectionTimer"],[170,34,144,36],[170,35,144,37],[170,36,144,38],[171,6,145,8],[171,10,145,12],[171,11,145,13,"fetch"],[171,16,145,18],[171,19,145,21],[171,23,145,25],[171,24,145,26,"_resolveFetch"],[171,37,145,39],[171,38,145,40,"options"],[171,45,145,47],[171,50,145,52],[171,54,145,56],[171,58,145,60,"options"],[171,65,145,67],[171,70,145,72],[171,75,145,77],[171,76,145,78],[171,79,145,81],[171,84,145,86],[171,85,145,87],[171,88,145,90,"options"],[171,95,145,97],[171,96,145,98,"fetch"],[171,101,145,103],[171,102,145,104],[172,4,146,4],[173,4,147,4],[174,0,148,0],[175,0,149,0],[176,4,147,4],[176,11,147,4,"_createClass"],[176,23,147,4],[176,24,147,4,"RealtimeClient"],[176,38,147,4],[177,6,147,4,"key"],[177,9,147,4],[178,6,147,4,"value"],[178,11,147,4],[178,13,150,4],[178,22,150,4,"connect"],[178,29,150,11,"connect"],[178,30,150,11],[178,32,150,14],[179,8,151,8],[180,8,152,8],[180,12,152,12],[180,16,152,16],[180,17,152,17,"isConnecting"],[180,29,152,29],[180,30,152,30],[180,31,152,31],[180,35,153,12],[180,39,153,16],[180,40,153,17,"isDisconnecting"],[180,55,153,32],[180,56,153,33],[180,57,153,34],[180,61,154,13],[180,65,154,17],[180,66,154,18,"conn"],[180,70,154,22],[180,75,154,27],[180,79,154,31],[180,83,154,35],[180,87,154,39],[180,88,154,40,"isConnected"],[180,99,154,51],[180,100,154,52],[180,101,154,54],[180,103,154,56],[181,10,155,12],[182,8,156,8],[183,8,157,8],[183,12,157,12],[183,13,157,13,"_setConnectionState"],[183,32,157,32],[183,33,157,33],[183,45,157,45],[183,46,157,46],[184,8,158,8],[184,12,158,12],[184,13,158,13,"_setAuthSafely"],[184,27,158,27],[184,28,158,28],[184,37,158,37],[184,38,158,38],[185,8,159,8],[186,8,160,8],[186,12,160,12],[186,16,160,16],[186,17,160,17,"transport"],[186,26,160,26],[186,28,160,28],[187,10,161,12],[188,10,162,12],[188,14,162,16],[188,15,162,17,"conn"],[188,19,162,21],[188,22,162,24],[188,26,162,28],[188,30,162,32],[188,31,162,33,"transport"],[188,40,162,42],[188,41,162,43],[188,45,162,47],[188,46,162,48,"endpointURL"],[188,57,162,59],[188,58,162,60],[188,59,162,61],[188,60,162,62],[189,8,163,8],[189,9,163,9],[189,15,164,13],[190,10,165,12],[191,10,166,12],[191,14,166,16],[192,12,167,16],[192,16,167,20],[192,17,167,21,"conn"],[192,21,167,25],[192,24,167,28,"websocket_factory_1"],[192,43,167,47],[192,44,167,48,"default"],[192,51,167,55],[192,52,167,56,"createWebSocket"],[192,67,167,71],[192,68,167,72],[192,72,167,76],[192,73,167,77,"endpointURL"],[192,84,167,88],[192,85,167,89],[192,86,167,90],[192,87,167,91],[193,10,168,12],[193,11,168,13],[193,12,169,12],[193,19,169,19,"error"],[193,24,169,24],[193,26,169,26],[194,12,170,16],[194,16,170,20],[194,17,170,21,"_setConnectionState"],[194,36,170,40],[194,37,170,41],[194,51,170,55],[194,52,170,56],[195,12,171,16],[195,16,171,22,"errorMessage"],[195,28,171,34],[195,31,171,37,"error"],[195,36,171,42],[195,37,171,43,"message"],[195,44,171,50],[196,12,172,16],[197,12,173,16],[197,16,173,20,"errorMessage"],[197,28,173,32],[197,29,173,33,"includes"],[197,37,173,41],[197,38,173,42],[197,47,173,51],[197,48,173,52],[197,50,173,54],[198,14,174,20],[198,20,174,26],[198,24,174,30,"Error"],[198,29,174,35],[198,30,174,36],[198,33,174,39,"errorMessage"],[198,45,174,51],[198,51,174,57],[198,54,175,24],[198,135,175,105],[198,138,176,24],[198,202,176,88],[198,205,177,24],[198,258,177,77],[198,261,178,24],[198,283,178,46],[198,286,179,24],[198,311,179,49],[198,314,180,24],[198,360,180,70],[198,363,181,24],[198,382,181,43],[198,385,182,24],[198,406,182,45],[198,409,183,24],[198,415,183,30],[198,416,183,31],[199,12,184,16],[200,12,185,16],[200,18,185,22],[200,22,185,26,"Error"],[200,27,185,31],[200,28,185,32],[200,56,185,60,"errorMessage"],[200,68,185,72],[200,70,185,74],[200,71,185,75],[201,10,186,12],[202,8,187,8],[203,8,188,8],[203,12,188,12],[203,13,188,13,"_setupConnectionHandlers"],[203,37,188,37],[203,38,188,38],[203,39,188,39],[204,6,189,4],[205,6,190,4],[206,0,191,0],[207,0,192,0],[208,0,193,0],[209,4,190,4],[210,6,190,4,"key"],[210,9,190,4],[211,6,190,4,"value"],[211,11,190,4],[211,13,194,4],[211,22,194,4,"endpointURL"],[211,33,194,15,"endpointURL"],[211,34,194,15],[211,36,194,18],[212,8,195,8],[212,15,195,15],[212,19,195,19],[212,20,195,20,"_appendParams"],[212,33,195,33],[212,34,195,34],[212,38,195,38],[212,39,195,39,"endPoint"],[212,47,195,47],[212,49,195,49,"Object"],[212,55,195,55],[212,56,195,56,"assign"],[212,62,195,62],[212,63,195,63],[212,64,195,64],[212,65,195,65],[212,67,195,67],[212,71,195,71],[212,72,195,72,"params"],[212,78,195,78],[212,80,195,80],[213,10,195,82,"vsn"],[213,13,195,85],[213,15,195,87,"constants_1"],[213,26,195,98],[213,27,195,99,"VSN"],[214,8,195,103],[214,9,195,104],[214,10,195,105],[214,11,195,106],[215,6,196,4],[216,6,197,4],[217,0,198,0],[218,0,199,0],[219,0,200,0],[220,0,201,0],[221,0,202,0],[222,4,197,4],[223,6,197,4,"key"],[223,9,197,4],[224,6,197,4,"value"],[224,11,197,4],[224,13,203,4],[224,22,203,4,"disconnect"],[224,32,203,14,"disconnect"],[224,33,203,15,"code"],[224,37,203,19],[224,39,203,21,"reason"],[224,45,203,27],[224,47,203,29],[225,8,204,8],[225,12,204,12],[225,16,204,16],[225,17,204,17,"isDisconnecting"],[225,32,204,32],[225,33,204,33],[225,34,204,34],[225,36,204,36],[226,10,205,12],[227,8,206,8],[228,8,207,8],[228,12,207,12],[228,13,207,13,"_setConnectionState"],[228,32,207,32],[228,33,207,33],[228,48,207,48],[228,50,207,50],[228,54,207,54],[228,55,207,55],[229,8,208,8],[229,12,208,12],[229,16,208,16],[229,17,208,17,"conn"],[229,21,208,21],[229,23,208,23],[230,10,209,12],[231,10,210,12],[231,14,210,18,"fallbackTimer"],[231,27,210,31],[231,30,210,34,"setTimeout"],[231,40,210,44],[231,41,210,45],[231,47,210,51],[232,12,211,16],[232,16,211,20],[232,17,211,21,"_setConnectionState"],[232,36,211,40],[232,37,211,41],[232,51,211,55],[232,52,211,56],[233,10,212,12],[233,11,212,13],[233,13,212,15],[233,16,212,18],[233,17,212,19],[234,10,213,12],[234,14,213,16],[234,15,213,17,"conn"],[234,19,213,21],[234,20,213,22,"onclose"],[234,27,213,29],[234,30,213,32],[234,36,213,38],[235,12,214,16,"clearTimeout"],[235,24,214,28],[235,25,214,29,"fallbackTimer"],[235,38,214,42],[235,39,214,43],[236,12,215,16],[236,16,215,20],[236,17,215,21,"_setConnectionState"],[236,36,215,40],[236,37,215,41],[236,51,215,55],[236,52,215,56],[237,10,216,12],[237,11,216,13],[238,10,217,12],[239,10,218,12],[239,14,218,16,"code"],[239,18,218,20],[239,20,218,22],[240,12,219,16],[240,16,219,20],[240,17,219,21,"conn"],[240,21,219,25],[240,22,219,26,"close"],[240,27,219,31],[240,28,219,32,"code"],[240,32,219,36],[240,34,219,38,"reason"],[240,40,219,44],[240,45,219,49],[240,49,219,53],[240,53,219,57,"reason"],[240,59,219,63],[240,64,219,68],[240,69,219,73],[240,70,219,74],[240,73,219,77,"reason"],[240,79,219,83],[240,82,219,86],[240,84,219,88],[240,85,219,89],[241,10,220,12],[241,11,220,13],[241,17,221,17],[242,12,222,16],[242,16,222,20],[242,17,222,21,"conn"],[242,21,222,25],[242,22,222,26,"close"],[242,27,222,31],[242,28,222,32],[242,29,222,33],[243,10,223,12],[244,10,224,12],[244,14,224,16],[244,15,224,17,"_teardownConnection"],[244,34,224,36],[244,35,224,37],[244,36,224,38],[245,8,225,8],[245,9,225,9],[245,15,226,13],[246,10,227,12],[246,14,227,16],[246,15,227,17,"_setConnectionState"],[246,34,227,36],[246,35,227,37],[246,49,227,51],[246,50,227,52],[247,8,228,8],[248,6,229,4],[249,6,230,4],[250,0,231,0],[251,0,232,0],[252,4,230,4],[253,6,230,4,"key"],[253,9,230,4],[254,6,230,4,"value"],[254,11,230,4],[254,13,233,4],[254,22,233,4,"getChannels"],[254,33,233,15,"getChannels"],[254,34,233,15],[254,36,233,18],[255,8,234,8],[255,15,234,15],[255,19,234,19],[255,20,234,20,"channels"],[255,28,234,28],[256,6,235,4],[257,6,236,4],[258,0,237,0],[259,0,238,0],[260,0,239,0],[261,4,236,4],[262,6,236,4,"key"],[262,9,236,4],[263,6,236,4,"value"],[263,11,236,4],[264,8,236,4],[264,12,236,4,"_removeChannel"],[264,26,236,4],[264,29,236,4,"_asyncToGenerator"],[264,46,236,4],[264,47,240,4],[264,58,240,24,"channel"],[264,65,240,31],[264,67,240,33],[265,10,241,8],[265,14,241,14,"status"],[265,20,241,20],[265,29,241,29,"channel"],[265,36,241,36],[265,37,241,37,"unsubscribe"],[265,48,241,48],[265,49,241,49],[265,50,241,50],[266,10,242,8],[266,14,242,12],[266,18,242,16],[266,19,242,17,"channels"],[266,27,242,25],[266,28,242,26,"length"],[266,34,242,32],[266,39,242,37],[266,40,242,38],[266,42,242,40],[267,12,243,12],[267,16,243,16],[267,17,243,17,"disconnect"],[267,27,243,27],[267,28,243,28],[267,29,243,29],[268,10,244,8],[269,10,245,8],[269,17,245,15,"status"],[269,23,245,21],[270,8,246,4],[270,9,246,5],[271,8,246,5],[271,17,240,10,"removeChannel"],[271,30,240,23,"removeChannel"],[271,31,240,23,"_x"],[271,33,240,23],[272,10,240,23],[272,17,240,23,"_removeChannel"],[272,31,240,23],[272,32,240,23,"apply"],[272,37,240,23],[272,44,240,23,"arguments"],[272,53,240,23],[273,8,240,23],[274,8,240,23],[274,15,240,10,"removeChannel"],[274,28,240,23],[275,6,240,23],[276,6,247,4],[277,0,248,0],[278,0,249,0],[279,6,247,4],[280,4,247,4],[281,6,247,4,"key"],[281,9,247,4],[282,6,247,4,"value"],[282,11,247,4],[283,8,247,4],[283,12,247,4,"_removeAllChannels"],[283,30,247,4],[283,33,247,4,"_asyncToGenerator"],[283,50,247,4],[283,51,250,4],[283,64,250,30],[284,10,251,8],[284,14,251,14,"values_1"],[284,22,251,22],[284,31,251,31,"Promise"],[284,38,251,38],[284,39,251,39,"all"],[284,42,251,42],[284,43,251,43],[284,47,251,47],[284,48,251,48,"channels"],[284,56,251,56],[284,57,251,57,"map"],[284,60,251,60],[284,61,251,62,"channel"],[284,68,251,69],[284,72,251,74,"channel"],[284,79,251,81],[284,80,251,82,"unsubscribe"],[284,91,251,93],[284,92,251,94],[284,93,251,95],[284,94,251,96],[284,95,251,97],[285,10,252,8],[285,14,252,12],[285,15,252,13,"channels"],[285,23,252,21],[285,26,252,24],[285,28,252,26],[286,10,253,8],[286,14,253,12],[286,15,253,13,"disconnect"],[286,25,253,23],[286,26,253,24],[286,27,253,25],[287,10,254,8],[287,17,254,15,"values_1"],[287,25,254,23],[288,8,255,4],[288,9,255,5],[289,8,255,5],[289,17,250,10,"removeAllChannels"],[289,34,250,27,"removeAllChannels"],[289,35,250,27],[290,10,250,27],[290,17,250,27,"_removeAllChannels"],[290,35,250,27],[290,36,250,27,"apply"],[290,41,250,27],[290,48,250,27,"arguments"],[290,57,250,27],[291,8,250,27],[292,8,250,27],[292,15,250,10,"removeAllChannels"],[292,32,250,27],[293,6,250,27],[294,6,256,4],[295,0,257,0],[296,0,258,0],[297,0,259,0],[298,0,260,0],[299,6,256,4],[300,4,256,4],[301,6,256,4,"key"],[301,9,256,4],[302,6,256,4,"value"],[302,11,256,4],[302,13,261,4],[302,22,261,4,"log"],[302,25,261,7,"log"],[302,26,261,8,"kind"],[302,30,261,12],[302,32,261,14,"msg"],[302,35,261,17],[302,37,261,19,"data"],[302,41,261,23],[302,43,261,25],[303,8,262,8],[303,12,262,12],[303,13,262,13,"logger"],[303,19,262,19],[303,20,262,20,"kind"],[303,24,262,24],[303,26,262,26,"msg"],[303,29,262,29],[303,31,262,31,"data"],[303,35,262,35],[303,36,262,36],[304,6,263,4],[305,6,264,4],[306,0,265,0],[307,0,266,0],[308,4,264,4],[309,6,264,4,"key"],[309,9,264,4],[310,6,264,4,"value"],[310,11,264,4],[310,13,267,4],[310,22,267,4,"connectionState"],[310,37,267,19,"connectionState"],[310,38,267,19],[310,40,267,22],[311,8,268,8],[311,16,268,16],[311,20,268,20],[311,21,268,21,"conn"],[311,25,268,25],[311,29,268,29],[311,33,268,33],[311,34,268,34,"conn"],[311,38,268,38],[311,39,268,39,"readyState"],[311,49,268,49],[312,10,269,12],[312,15,269,17,"constants_1"],[312,26,269,28],[312,27,269,29,"SOCKET_STATES"],[312,40,269,42],[312,41,269,43,"connecting"],[312,51,269,53],[313,12,270,16],[313,19,270,23,"constants_1"],[313,30,270,34],[313,31,270,35,"CONNECTION_STATE"],[313,47,270,51],[313,48,270,52,"Connecting"],[313,58,270,62],[314,10,271,12],[314,15,271,17,"constants_1"],[314,26,271,28],[314,27,271,29,"SOCKET_STATES"],[314,40,271,42],[314,41,271,43,"open"],[314,45,271,47],[315,12,272,16],[315,19,272,23,"constants_1"],[315,30,272,34],[315,31,272,35,"CONNECTION_STATE"],[315,47,272,51],[315,48,272,52,"Open"],[315,52,272,56],[316,10,273,12],[316,15,273,17,"constants_1"],[316,26,273,28],[316,27,273,29,"SOCKET_STATES"],[316,40,273,42],[316,41,273,43,"closing"],[316,48,273,50],[317,12,274,16],[317,19,274,23,"constants_1"],[317,30,274,34],[317,31,274,35,"CONNECTION_STATE"],[317,47,274,51],[317,48,274,52,"Closing"],[317,55,274,59],[318,10,275,12],[319,12,276,16],[319,19,276,23,"constants_1"],[319,30,276,34],[319,31,276,35,"CONNECTION_STATE"],[319,47,276,51],[319,48,276,52,"Closed"],[319,54,276,58],[320,8,277,8],[321,6,278,4],[322,6,279,4],[323,0,280,0],[324,0,281,0],[325,4,279,4],[326,6,279,4,"key"],[326,9,279,4],[327,6,279,4,"value"],[327,11,279,4],[327,13,282,4],[327,22,282,4,"isConnected"],[327,33,282,15,"isConnected"],[327,34,282,15],[327,36,282,18],[328,8,283,8],[328,15,283,15],[328,19,283,19],[328,20,283,20,"connectionState"],[328,35,283,35],[328,36,283,36],[328,37,283,37],[328,42,283,42,"constants_1"],[328,53,283,53],[328,54,283,54,"CONNECTION_STATE"],[328,70,283,70],[328,71,283,71,"Open"],[328,75,283,75],[329,6,284,4],[330,6,285,4],[331,0,286,0],[332,0,287,0],[333,4,285,4],[334,6,285,4,"key"],[334,9,285,4],[335,6,285,4,"value"],[335,11,285,4],[335,13,288,4],[335,22,288,4,"isConnecting"],[335,34,288,16,"isConnecting"],[335,35,288,16],[335,37,288,19],[336,8,289,8],[336,15,289,15],[336,19,289,19],[336,20,289,20,"_connectionState"],[336,36,289,36],[336,41,289,41],[336,53,289,53],[337,6,290,4],[338,6,291,4],[339,0,292,0],[340,0,293,0],[341,4,291,4],[342,6,291,4,"key"],[342,9,291,4],[343,6,291,4,"value"],[343,11,291,4],[343,13,294,4],[343,22,294,4,"isDisconnecting"],[343,37,294,19,"isDisconnecting"],[343,38,294,19],[343,40,294,22],[344,8,295,8],[344,15,295,15],[344,19,295,19],[344,20,295,20,"_connectionState"],[344,36,295,36],[344,41,295,41],[344,56,295,56],[345,6,296,4],[346,4,296,5],[347,6,296,5,"key"],[347,9,296,5],[348,6,296,5,"value"],[348,11,296,5],[348,13,297,4],[348,22,297,4,"channel"],[348,29,297,11,"channel"],[348,30,297,12,"topic"],[348,35,297,17],[348,37,297,44],[349,8,297,44],[349,12,297,19,"params"],[349,18,297,25],[349,21,297,25,"arguments"],[349,30,297,25],[349,31,297,25,"length"],[349,37,297,25],[349,45,297,25,"arguments"],[349,54,297,25],[349,62,297,25,"undefined"],[349,71,297,25],[349,74,297,25,"arguments"],[349,83,297,25],[349,89,297,28],[350,10,297,30,"config"],[350,16,297,36],[350,18,297,38],[350,19,297,39],[351,8,297,41],[351,9,297,42],[352,8,298,8],[352,12,298,14,"realtimeTopic"],[352,25,298,27],[352,28,298,30],[352,40,298,42,"topic"],[352,45,298,47],[352,47,298,49],[353,8,299,8],[353,12,299,14,"exists"],[353,18,299,20],[353,21,299,23],[353,25,299,27],[353,26,299,28,"getChannels"],[353,37,299,39],[353,38,299,40],[353,39,299,41],[353,40,299,42,"find"],[353,44,299,46],[353,45,299,48,"c"],[353,46,299,49],[353,50,299,54,"c"],[353,51,299,55],[353,52,299,56,"topic"],[353,57,299,61],[353,62,299,66,"realtimeTopic"],[353,75,299,79],[353,76,299,80],[354,8,300,8],[354,12,300,12],[354,13,300,13,"exists"],[354,19,300,19],[354,21,300,21],[355,10,301,12],[355,14,301,18,"chan"],[355,18,301,22],[355,21,301,25],[355,25,301,29,"RealtimeChannel_1"],[355,42,301,46],[355,43,301,47,"default"],[355,50,301,54],[355,51,301,55],[355,63,301,67,"topic"],[355,68,301,72],[355,70,301,74],[355,72,301,76,"params"],[355,78,301,82],[355,80,301,84],[355,84,301,88],[355,85,301,89],[356,10,302,12],[356,14,302,16],[356,15,302,17,"channels"],[356,23,302,25],[356,24,302,26,"push"],[356,28,302,30],[356,29,302,31,"chan"],[356,33,302,35],[356,34,302,36],[357,10,303,12],[357,17,303,19,"chan"],[357,21,303,23],[358,8,304,8],[358,9,304,9],[358,15,305,13],[359,10,306,12],[359,17,306,19,"exists"],[359,23,306,25],[360,8,307,8],[361,6,308,4],[362,6,309,4],[363,0,310,0],[364,0,311,0],[365,0,312,0],[366,0,313,0],[367,4,309,4],[368,6,309,4,"key"],[368,9,309,4],[369,6,309,4,"value"],[369,11,309,4],[369,13,314,4],[369,22,314,4,"push"],[369,26,314,8,"push"],[369,27,314,9,"data"],[369,31,314,13],[369,33,314,15],[370,8,315,8],[370,12,315,16,"topic"],[370,17,315,21],[370,20,315,47,"data"],[370,24,315,51],[370,25,315,16,"topic"],[370,30,315,21],[371,10,315,23,"event"],[371,15,315,28],[371,18,315,47,"data"],[371,22,315,51],[371,23,315,23,"event"],[371,28,315,28],[372,10,315,30,"payload"],[372,17,315,37],[372,20,315,47,"data"],[372,24,315,51],[372,25,315,30,"payload"],[372,32,315,37],[373,10,315,39,"ref"],[373,13,315,42],[373,16,315,47,"data"],[373,20,315,51],[373,21,315,39,"ref"],[373,24,315,42],[374,8,316,8],[374,12,316,14,"callback"],[374,20,316,22],[374,23,316,25,"callback"],[374,24,316,25],[374,29,316,31],[375,10,317,12],[375,14,317,16],[375,15,317,17,"encode"],[375,21,317,23],[375,22,317,24,"data"],[375,26,317,28],[375,28,317,31,"result"],[375,34,317,37],[375,38,317,42],[376,12,318,16],[376,16,318,20,"_a"],[376,18,318,22],[377,12,319,16],[377,13,319,17,"_a"],[377,15,319,19],[377,18,319,22],[377,22,319,26],[377,23,319,27,"conn"],[377,27,319,31],[377,33,319,37],[377,37,319,41],[377,41,319,45,"_a"],[377,43,319,47],[377,48,319,52],[377,53,319,57],[377,54,319,58],[377,57,319,61],[377,62,319,66],[377,63,319,67],[377,66,319,70,"_a"],[377,68,319,72],[377,69,319,73,"send"],[377,73,319,77],[377,74,319,78,"result"],[377,80,319,84],[377,81,319,85],[378,10,320,12],[378,11,320,13],[378,12,320,14],[379,8,321,8],[379,9,321,9],[380,8,322,8],[380,12,322,12],[380,13,322,13,"log"],[380,16,322,16],[380,17,322,17],[380,23,322,23],[380,25,322,25],[380,28,322,28,"topic"],[380,33,322,33],[380,37,322,37,"event"],[380,42,322,42],[380,47,322,47,"ref"],[380,50,322,50],[380,53,322,53],[380,55,322,55,"payload"],[380,62,322,62],[380,63,322,63],[381,8,323,8],[381,12,323,12],[381,16,323,16],[381,17,323,17,"isConnected"],[381,28,323,28],[381,29,323,29],[381,30,323,30],[381,32,323,32],[382,10,324,12,"callback"],[382,18,324,20],[382,19,324,21],[382,20,324,22],[383,8,325,8],[383,9,325,9],[383,15,326,13],[384,10,327,12],[384,14,327,16],[384,15,327,17,"sendBuffer"],[384,25,327,27],[384,26,327,28,"push"],[384,30,327,32],[384,31,327,33,"callback"],[384,39,327,41],[384,40,327,42],[385,8,328,8],[386,6,329,4],[387,6,330,4],[388,0,331,0],[389,0,332,0],[390,0,333,0],[391,0,334,0],[392,0,335,0],[393,0,336,0],[394,0,337,0],[395,0,338,0],[396,4,330,4],[397,6,330,4,"key"],[397,9,330,4],[398,6,330,4,"value"],[398,11,330,4],[399,8,330,4],[399,12,330,4,"_setAuth"],[399,20,330,4],[399,23,330,4,"_asyncToGenerator"],[399,40,330,4],[399,41,339,4],[399,54,339,32],[400,10,339,32],[400,14,339,18,"token"],[400,19,339,23],[400,22,339,23,"arguments"],[400,31,339,23],[400,32,339,23,"length"],[400,38,339,23],[400,46,339,23,"arguments"],[400,55,339,23],[400,63,339,23,"undefined"],[400,72,339,23],[400,75,339,23,"arguments"],[400,84,339,23],[400,90,339,26],[400,94,339,30],[401,10,340,8],[401,14,340,12],[401,15,340,13,"_authPromise"],[401,27,340,25],[401,30,340,28],[401,34,340,32],[401,35,340,33,"_performAuth"],[401,47,340,45],[401,48,340,46,"token"],[401,53,340,51],[401,54,340,52],[402,10,341,8],[402,14,341,12],[403,12,342,12],[403,18,342,18],[403,22,342,22],[403,23,342,23,"_authPromise"],[403,35,342,35],[404,10,343,8],[404,11,343,9],[404,20,344,16],[405,12,345,12],[405,16,345,16],[405,17,345,17,"_authPromise"],[405,29,345,29],[405,32,345,32],[405,36,345,36],[406,10,346,8],[407,8,347,4],[407,9,347,5],[408,8,347,5],[408,17,339,10,"setAuth"],[408,24,339,17,"setAuth"],[408,25,339,17],[409,10,339,17],[409,17,339,17,"_setAuth"],[409,25,339,17],[409,26,339,17,"apply"],[409,31,339,17],[409,38,339,17,"arguments"],[409,47,339,17],[410,8,339,17],[411,8,339,17],[411,15,339,10,"setAuth"],[411,22,339,17],[412,6,339,17],[413,6,348,4],[414,0,349,0],[415,0,350,0],[416,6,348,4],[417,4,348,4],[418,6,348,4,"key"],[418,9,348,4],[419,6,348,4,"value"],[419,11,348,4],[420,8,348,4],[420,12,348,4,"_sendHeartbeat"],[420,26,348,4],[420,29,348,4,"_asyncToGenerator"],[420,46,348,4],[420,47,351,4],[420,60,351,26],[421,10,352,8],[421,14,352,12,"_a"],[421,16,352,14],[422,10,353,8],[422,14,353,12],[422,15,353,13],[422,19,353,17],[422,20,353,18,"isConnected"],[422,31,353,29],[422,32,353,30],[422,33,353,31],[422,35,353,33],[423,12,354,12],[423,16,354,16],[424,14,355,16],[424,18,355,20],[424,19,355,21,"heartbeatCallback"],[424,36,355,38],[424,37,355,39],[424,51,355,53],[424,52,355,54],[425,12,356,12],[425,13,356,13],[425,14,357,12],[425,21,357,19,"e"],[425,22,357,20],[425,24,357,22],[426,14,358,16],[426,18,358,20],[426,19,358,21,"log"],[426,22,358,24],[426,23,358,25],[426,30,358,32],[426,32,358,34],[426,61,358,63],[426,63,358,65,"e"],[426,64,358,66],[426,65,358,67],[427,12,359,12],[428,12,360,12],[429,10,361,8],[430,10,362,8],[431,10,363,8],[431,14,363,12],[431,18,363,16],[431,19,363,17,"pendingHeartbeatRef"],[431,38,363,36],[431,40,363,38],[432,12,364,12],[432,16,364,16],[432,17,364,17,"pendingHeartbeatRef"],[432,36,364,36],[432,39,364,39],[432,43,364,43],[433,12,365,12],[433,16,365,16],[433,17,365,17,"log"],[433,20,365,20],[433,21,365,21],[433,32,365,32],[433,34,365,34],[433,92,365,92],[433,93,365,93],[434,12,366,12],[434,16,366,16],[435,14,367,16],[435,18,367,20],[435,19,367,21,"heartbeatCallback"],[435,36,367,38],[435,37,367,39],[435,46,367,48],[435,47,367,49],[436,12,368,12],[436,13,368,13],[436,14,369,12],[436,21,369,19,"e"],[436,22,369,20],[436,24,369,22],[437,14,370,16],[437,18,370,20],[437,19,370,21,"log"],[437,22,370,24],[437,23,370,25],[437,30,370,32],[437,32,370,34],[437,61,370,63],[437,63,370,65,"e"],[437,64,370,66],[437,65,370,67],[438,12,371,12],[439,12,372,12],[440,12,373,12],[440,16,373,16],[440,17,373,17,"_wasManualDisconnect"],[440,37,373,37],[440,40,373,40],[440,45,373,45],[441,12,374,12],[441,13,374,13,"_a"],[441,15,374,15],[441,18,374,18],[441,22,374,22],[441,23,374,23,"conn"],[441,27,374,27],[441,33,374,33],[441,37,374,37],[441,41,374,41,"_a"],[441,43,374,43],[441,48,374,48],[441,53,374,53],[441,54,374,54],[441,57,374,57],[441,62,374,62],[441,63,374,63],[441,66,374,66,"_a"],[441,68,374,68],[441,69,374,69,"close"],[441,74,374,74],[441,75,374,75,"constants_1"],[441,86,374,86],[441,87,374,87,"WS_CLOSE_NORMAL"],[441,102,374,102],[441,104,374,104],[441,123,374,123],[441,124,374,124],[442,12,375,12,"setTimeout"],[442,22,375,22],[442,23,375,23],[442,29,375,29],[443,14,376,16],[443,18,376,20,"_a"],[443,20,376,22],[444,14,377,16],[444,18,377,20],[444,19,377,21],[444,23,377,25],[444,24,377,26,"isConnected"],[444,35,377,37],[444,36,377,38],[444,37,377,39],[444,39,377,41],[445,16,378,20],[445,17,378,21,"_a"],[445,19,378,23],[445,22,378,26],[445,26,378,30],[445,27,378,31,"reconnectTimer"],[445,41,378,45],[445,47,378,51],[445,51,378,55],[445,55,378,59,"_a"],[445,57,378,61],[445,62,378,66],[445,67,378,71],[445,68,378,72],[445,71,378,75],[445,76,378,80],[445,77,378,81],[445,80,378,84,"_a"],[445,82,378,86],[445,83,378,87,"scheduleTimeout"],[445,98,378,102],[445,99,378,103],[445,100,378,104],[446,14,379,16],[447,12,380,12],[447,13,380,13],[447,15,380,15,"CONNECTION_TIMEOUTS"],[447,34,380,34],[447,35,380,35,"HEARTBEAT_TIMEOUT_FALLBACK"],[447,61,380,61],[447,62,380,62],[448,12,381,12],[449,10,382,8],[450,10,383,8],[451,10,384,8],[451,14,384,12],[451,15,384,13,"pendingHeartbeatRef"],[451,34,384,32],[451,37,384,35],[451,41,384,39],[451,42,384,40,"_makeRef"],[451,50,384,48],[451,51,384,49],[451,52,384,50],[452,10,385,8],[452,14,385,12],[452,15,385,13,"push"],[452,19,385,17],[452,20,385,18],[453,12,386,12,"topic"],[453,17,386,17],[453,19,386,19],[453,28,386,28],[454,12,387,12,"event"],[454,17,387,17],[454,19,387,19],[454,30,387,30],[455,12,388,12,"payload"],[455,19,388,19],[455,21,388,21],[455,22,388,22],[455,23,388,23],[456,12,389,12,"ref"],[456,15,389,15],[456,17,389,17],[456,21,389,21],[456,22,389,22,"pendingHeartbeatRef"],[457,10,390,8],[457,11,390,9],[457,12,390,10],[458,10,391,8],[458,14,391,12],[459,12,392,12],[459,16,392,16],[459,17,392,17,"heartbeatCallback"],[459,34,392,34],[459,35,392,35],[459,41,392,41],[459,42,392,42],[460,10,393,8],[460,11,393,9],[460,12,394,8],[460,19,394,15,"e"],[460,20,394,16],[460,22,394,18],[461,12,395,12],[461,16,395,16],[461,17,395,17,"log"],[461,20,395,20],[461,21,395,21],[461,28,395,28],[461,30,395,30],[461,59,395,59],[461,61,395,61,"e"],[461,62,395,62],[461,63,395,63],[462,10,396,8],[463,10,397,8],[463,14,397,12],[463,15,397,13,"_setAuthSafely"],[463,29,397,27],[463,30,397,28],[463,41,397,39],[463,42,397,40],[464,8,398,4],[464,9,398,5],[465,8,398,5],[465,17,351,10,"sendHeartbeat"],[465,30,351,23,"sendHeartbeat"],[465,31,351,23],[466,10,351,23],[466,17,351,23,"_sendHeartbeat"],[466,31,351,23],[466,32,351,23,"apply"],[466,37,351,23],[466,44,351,23,"arguments"],[466,53,351,23],[467,8,351,23],[468,8,351,23],[468,15,351,10,"sendHeartbeat"],[468,28,351,23],[469,6,351,23],[470,4,351,23],[471,6,351,23,"key"],[471,9,351,23],[472,6,351,23,"value"],[472,11,351,23],[472,13,399,4],[472,22,399,4,"onHeartbeat"],[472,33,399,15,"onHeartbeat"],[472,34,399,16,"callback"],[472,42,399,24],[472,44,399,26],[473,8,400,8],[473,12,400,12],[473,13,400,13,"heartbeatCallback"],[473,30,400,30],[473,33,400,33,"callback"],[473,41,400,41],[474,6,401,4],[475,6,402,4],[476,0,403,0],[477,0,404,0],[478,4,402,4],[479,6,402,4,"key"],[479,9,402,4],[480,6,402,4,"value"],[480,11,402,4],[480,13,405,4],[480,22,405,4,"flushSendBuffer"],[480,37,405,19,"flushSendBuffer"],[480,38,405,19],[480,40,405,22],[481,8,406,8],[481,12,406,12],[481,16,406,16],[481,17,406,17,"isConnected"],[481,28,406,28],[481,29,406,29],[481,30,406,30],[481,34,406,34],[481,38,406,38],[481,39,406,39,"sendBuffer"],[481,49,406,49],[481,50,406,50,"length"],[481,56,406,56],[481,59,406,59],[481,60,406,60],[481,62,406,62],[482,10,407,12],[482,14,407,16],[482,15,407,17,"sendBuffer"],[482,25,407,27],[482,26,407,28,"forEach"],[482,33,407,35],[482,34,407,37,"callback"],[482,42,407,45],[482,46,407,50,"callback"],[482,54,407,58],[482,55,407,59],[482,56,407,60],[482,57,407,61],[483,10,408,12],[483,14,408,16],[483,15,408,17,"sendBuffer"],[483,25,408,27],[483,28,408,30],[483,30,408,32],[484,8,409,8],[485,6,410,4],[486,6,411,4],[487,0,412,0],[488,0,413,0],[489,0,414,0],[490,0,415,0],[491,4,411,4],[492,6,411,4,"key"],[492,9,411,4],[493,6,411,4,"value"],[493,11,411,4],[493,13,416,4],[493,22,416,4,"_makeRef"],[493,30,416,12,"_makeRef"],[493,31,416,12],[493,33,416,15],[494,8,417,8],[494,12,417,12,"newRef"],[494,18,417,18],[494,21,417,21],[494,25,417,25],[494,26,417,26,"ref"],[494,29,417,29],[494,32,417,32],[494,33,417,33],[495,8,418,8],[495,12,418,12,"newRef"],[495,18,418,18],[495,23,418,23],[495,27,418,27],[495,28,418,28,"ref"],[495,31,418,31],[495,33,418,33],[496,10,419,12],[496,14,419,16],[496,15,419,17,"ref"],[496,18,419,20],[496,21,419,23],[496,22,419,24],[497,8,420,8],[497,9,420,9],[497,15,421,13],[498,10,422,12],[498,14,422,16],[498,15,422,17,"ref"],[498,18,422,20],[498,21,422,23,"newRef"],[498,27,422,29],[499,8,423,8],[500,8,424,8],[500,15,424,15],[500,19,424,19],[500,20,424,20,"ref"],[500,23,424,23],[500,24,424,24,"toString"],[500,32,424,32],[500,33,424,33],[500,34,424,34],[501,6,425,4],[502,6,426,4],[503,0,427,0],[504,0,428,0],[505,0,429,0],[506,0,430,0],[507,4,426,4],[508,6,426,4,"key"],[508,9,426,4],[509,6,426,4,"value"],[509,11,426,4],[509,13,431,4],[509,22,431,4,"_leaveOpenTopic"],[509,37,431,19,"_leaveOpenTopic"],[509,38,431,20,"topic"],[509,43,431,25],[509,45,431,27],[510,8,432,8],[510,12,432,12,"dupChannel"],[510,22,432,22],[510,25,432,25],[510,29,432,29],[510,30,432,30,"channels"],[510,38,432,38],[510,39,432,39,"find"],[510,43,432,43],[510,44,432,45,"c"],[510,45,432,46],[510,49,432,51,"c"],[510,50,432,52],[510,51,432,53,"topic"],[510,56,432,58],[510,61,432,63,"topic"],[510,66,432,68],[510,71,432,73,"c"],[510,72,432,74],[510,73,432,75,"_isJoined"],[510,82,432,84],[510,83,432,85],[510,84,432,86],[510,88,432,90,"c"],[510,89,432,91],[510,90,432,92,"_isJoining"],[510,100,432,102],[510,101,432,103],[510,102,432,104],[510,103,432,105],[510,104,432,106],[511,8,433,8],[511,12,433,12,"dupChannel"],[511,22,433,22],[511,24,433,24],[512,10,434,12],[512,14,434,16],[512,15,434,17,"log"],[512,18,434,20],[512,19,434,21],[512,30,434,32],[512,32,434,34],[512,60,434,62,"topic"],[512,65,434,67],[512,68,434,70],[512,69,434,71],[513,10,435,12,"dupChannel"],[513,20,435,22],[513,21,435,23,"unsubscribe"],[513,32,435,34],[513,33,435,35],[513,34,435,36],[514,8,436,8],[515,6,437,4],[516,6,438,4],[517,0,439,0],[518,0,440,0],[519,0,441,0],[520,0,442,0],[521,0,443,0],[522,0,444,0],[523,4,438,4],[524,6,438,4,"key"],[524,9,438,4],[525,6,438,4,"value"],[525,11,438,4],[525,13,445,4],[525,22,445,4,"_remove"],[525,29,445,11,"_remove"],[525,30,445,12,"channel"],[525,37,445,19],[525,39,445,21],[526,8,446,8],[526,12,446,12],[526,13,446,13,"channels"],[526,21,446,21],[526,24,446,24],[526,28,446,28],[526,29,446,29,"channels"],[526,37,446,37],[526,38,446,38,"filter"],[526,44,446,44],[526,45,446,46,"c"],[526,46,446,47],[526,50,446,52,"c"],[526,51,446,53],[526,52,446,54,"topic"],[526,57,446,59],[526,62,446,64,"channel"],[526,69,446,71],[526,70,446,72,"topic"],[526,75,446,77],[526,76,446,78],[527,6,447,4],[528,6,448,4],[529,4,448,4],[530,6,448,4,"key"],[530,9,448,4],[531,6,448,4,"value"],[531,11,448,4],[531,13,449,4],[531,22,449,4,"_onConnMessage"],[531,36,449,18,"_onConnMessage"],[531,37,449,19,"rawMessage"],[531,47,449,29],[531,49,449,31],[532,8,450,8],[532,12,450,12],[532,13,450,13,"decode"],[532,19,450,19],[532,20,450,20,"rawMessage"],[532,30,450,30],[532,31,450,31,"data"],[532,35,450,35],[532,37,450,38,"msg"],[532,40,450,41],[532,44,450,46],[533,10,451,12],[534,10,452,12],[534,14,452,16,"msg"],[534,17,452,19],[534,18,452,20,"topic"],[534,23,452,25],[534,28,452,30],[534,37,452,39],[534,41,452,43,"msg"],[534,44,452,46],[534,45,452,47,"event"],[534,50,452,52],[534,55,452,57],[534,66,452,68],[534,68,452,70],[535,12,453,16],[535,16,453,20],[536,14,454,20],[536,18,454,24],[536,19,454,25,"heartbeatCallback"],[536,36,454,42],[536,37,454,43,"msg"],[536,40,454,46],[536,41,454,47,"payload"],[536,48,454,54],[536,49,454,55,"status"],[536,55,454,61],[536,60,454,66],[536,64,454,70],[536,67,454,73],[536,71,454,77],[536,74,454,80],[536,81,454,87],[536,82,454,88],[537,12,455,16],[537,13,455,17],[537,14,456,16],[537,21,456,23,"e"],[537,22,456,24],[537,24,456,26],[538,14,457,20],[538,18,457,24],[538,19,457,25,"log"],[538,22,457,28],[538,23,457,29],[538,30,457,36],[538,32,457,38],[538,61,457,67],[538,63,457,69,"e"],[538,64,457,70],[538,65,457,71],[539,12,458,16],[540,10,459,12],[541,10,460,12],[542,10,461,12],[542,14,461,16,"msg"],[542,17,461,19],[542,18,461,20,"ref"],[542,21,461,23],[542,25,461,27,"msg"],[542,28,461,30],[542,29,461,31,"ref"],[542,32,461,34],[542,37,461,39],[542,41,461,43],[542,42,461,44,"pendingHeartbeatRef"],[542,61,461,63],[542,63,461,65],[543,12,462,16],[543,16,462,20],[543,17,462,21,"pendingHeartbeatRef"],[543,36,462,40],[543,39,462,43],[543,43,462,47],[544,10,463,12],[545,10,464,12],[546,10,465,12],[546,14,465,20,"topic"],[546,19,465,25],[546,22,465,51,"msg"],[546,25,465,54],[546,26,465,20,"topic"],[546,31,465,25],[547,12,465,27,"event"],[547,17,465,32],[547,20,465,51,"msg"],[547,23,465,54],[547,24,465,27,"event"],[547,29,465,32],[548,12,465,34,"payload"],[548,19,465,41],[548,22,465,51,"msg"],[548,25,465,54],[548,26,465,34,"payload"],[548,33,465,41],[549,12,465,43,"ref"],[549,15,465,46],[549,18,465,51,"msg"],[549,21,465,54],[549,22,465,43,"ref"],[549,25,465,46],[550,10,466,12],[550,14,466,18,"refString"],[550,23,466,27],[550,26,466,30,"ref"],[550,29,466,33],[550,32,466,36],[550,36,466,40,"ref"],[550,39,466,43],[550,42,466,46],[550,45,466,49],[550,47,466,51],[551,10,467,12],[551,14,467,18,"status"],[551,20,467,24],[551,23,467,27,"payload"],[551,30,467,34],[551,31,467,35,"status"],[551,37,467,41],[551,41,467,45],[551,43,467,47],[552,10,468,12],[552,14,468,16],[552,15,468,17,"log"],[552,18,468,20],[552,19,468,21],[552,28,468,30],[552,30,468,32],[552,33,468,35,"status"],[552,39,468,41],[552,43,468,45,"topic"],[552,48,468,50],[552,52,468,54,"event"],[552,57,468,59],[552,61,468,63,"refString"],[552,70,468,72],[552,72,468,74],[552,73,468,75,"trim"],[552,77,468,79],[552,78,468,80],[552,79,468,81],[552,81,468,83,"payload"],[552,88,468,90],[552,89,468,91],[553,10,469,12],[554,10,470,12],[554,14,470,16],[554,15,470,17,"channels"],[554,23,470,25],[554,24,471,17,"filter"],[554,30,471,23],[554,31,471,25,"channel"],[554,38,471,32],[554,42,471,37,"channel"],[554,49,471,44],[554,50,471,45,"_isMember"],[554,59,471,54],[554,60,471,55,"topic"],[554,65,471,60],[554,66,471,61],[554,67,471,62],[554,68,472,17,"forEach"],[554,75,472,24],[554,76,472,26,"channel"],[554,83,472,33],[554,87,472,38,"channel"],[554,94,472,45],[554,95,472,46,"_trigger"],[554,103,472,54],[554,104,472,55,"event"],[554,109,472,60],[554,111,472,62,"payload"],[554,118,472,69],[554,120,472,71,"ref"],[554,123,472,74],[554,124,472,75],[554,125,472,76],[555,10,473,12],[555,14,473,16],[555,15,473,17,"_triggerStateCallbacks"],[555,37,473,39],[555,38,473,40],[555,47,473,49],[555,49,473,51,"msg"],[555,52,473,54],[555,53,473,55],[556,8,474,8],[556,9,474,9],[556,10,474,10],[557,6,475,4],[558,6,476,4],[559,0,477,0],[560,0,478,0],[561,0,479,0],[562,4,476,4],[563,6,476,4,"key"],[563,9,476,4],[564,6,476,4,"value"],[564,11,476,4],[564,13,480,4],[564,22,480,4,"_clearTimer"],[564,33,480,15,"_clearTimer"],[564,34,480,16,"timer"],[564,39,480,21],[564,41,480,23],[565,8,481,8],[565,12,481,12,"_a"],[565,14,481,14],[566,8,482,8],[566,12,482,12,"timer"],[566,17,482,17],[566,22,482,22],[566,33,482,33],[566,37,482,37],[566,41,482,41],[566,42,482,42,"heartbeatTimer"],[566,56,482,56],[566,58,482,58],[567,10,483,12,"clearInterval"],[567,23,483,25],[567,24,483,26],[567,28,483,30],[567,29,483,31,"heartbeatTimer"],[567,43,483,45],[567,44,483,46],[568,10,484,12],[568,14,484,16],[568,15,484,17,"heartbeatTimer"],[568,29,484,31],[568,32,484,34,"undefined"],[568,41,484,43],[569,8,485,8],[569,9,485,9],[569,15,486,13],[569,19,486,17,"timer"],[569,24,486,22],[569,29,486,27],[569,40,486,38],[569,42,486,40],[570,10,487,12],[570,11,487,13,"_a"],[570,13,487,15],[570,16,487,18],[570,20,487,22],[570,21,487,23,"reconnectTimer"],[570,35,487,37],[570,41,487,43],[570,45,487,47],[570,49,487,51,"_a"],[570,51,487,53],[570,56,487,58],[570,61,487,63],[570,62,487,64],[570,65,487,67],[570,70,487,72],[570,71,487,73],[570,74,487,76,"_a"],[570,76,487,78],[570,77,487,79,"reset"],[570,82,487,84],[570,83,487,85],[570,84,487,86],[571,8,488,8],[572,6,489,4],[573,6,490,4],[574,0,491,0],[575,0,492,0],[576,0,493,0],[577,4,490,4],[578,6,490,4,"key"],[578,9,490,4],[579,6,490,4,"value"],[579,11,490,4],[579,13,494,4],[579,22,494,4,"_clearAllTimers"],[579,37,494,19,"_clearAllTimers"],[579,38,494,19],[579,40,494,22],[580,8,495,8],[580,12,495,12],[580,13,495,13,"_clearTimer"],[580,24,495,24],[580,25,495,25],[580,36,495,36],[580,37,495,37],[581,8,496,8],[581,12,496,12],[581,13,496,13,"_clearTimer"],[581,24,496,24],[581,25,496,25],[581,36,496,36],[581,37,496,37],[582,6,497,4],[583,6,498,4],[584,0,499,0],[585,0,500,0],[586,0,501,0],[587,4,498,4],[588,6,498,4,"key"],[588,9,498,4],[589,6,498,4,"value"],[589,11,498,4],[589,13,502,4],[589,22,502,4,"_setupConnectionHandlers"],[589,46,502,28,"_setupConnectionHandlers"],[589,47,502,28],[589,49,502,31],[590,8,503,8],[590,12,503,12],[590,13,503,13],[590,17,503,17],[590,18,503,18,"conn"],[590,22,503,22],[590,24,504,12],[591,8,505,8],[592,8,506,8],[592,12,506,12],[592,24,506,24],[592,28,506,28],[592,32,506,32],[592,33,506,33,"conn"],[592,37,506,37],[592,39,506,39],[593,10,507,12],[594,10,508,12],[594,14,508,16],[594,15,508,17,"conn"],[594,19,508,21],[594,20,508,22,"binaryType"],[594,30,508,32],[594,33,508,35],[594,46,508,48],[595,8,509,8],[596,8,510,8],[596,12,510,12],[596,13,510,13,"conn"],[596,17,510,17],[596,18,510,18,"onopen"],[596,24,510,24],[596,27,510,27],[596,33,510,33],[596,37,510,37],[596,38,510,38,"_onConnOpen"],[596,49,510,49],[596,50,510,50],[596,51,510,51],[597,8,511,8],[597,12,511,12],[597,13,511,13,"conn"],[597,17,511,17],[597,18,511,18,"onerror"],[597,25,511,25],[597,28,511,29,"error"],[597,33,511,34],[597,37,511,39],[597,41,511,43],[597,42,511,44,"_onConnError"],[597,54,511,56],[597,55,511,57,"error"],[597,60,511,62],[597,61,511,63],[598,8,512,8],[598,12,512,12],[598,13,512,13,"conn"],[598,17,512,17],[598,18,512,18,"onmessage"],[598,27,512,27],[598,30,512,31,"event"],[598,35,512,36],[598,39,512,41],[598,43,512,45],[598,44,512,46,"_onConnMessage"],[598,58,512,60],[598,59,512,61,"event"],[598,64,512,66],[598,65,512,67],[599,8,513,8],[599,12,513,12],[599,13,513,13,"conn"],[599,17,513,17],[599,18,513,18,"onclose"],[599,25,513,25],[599,28,513,29,"event"],[599,33,513,34],[599,37,513,39],[599,41,513,43],[599,42,513,44,"_onConnClose"],[599,54,513,56],[599,55,513,57,"event"],[599,60,513,62],[599,61,513,63],[600,6,514,4],[601,6,515,4],[602,0,516,0],[603,0,517,0],[604,0,518,0],[605,4,515,4],[606,6,515,4,"key"],[606,9,515,4],[607,6,515,4,"value"],[607,11,515,4],[607,13,519,4],[607,22,519,4,"_teardownConnection"],[607,41,519,23,"_teardownConnection"],[607,42,519,23],[607,44,519,26],[608,8,520,8],[608,12,520,12],[608,16,520,16],[608,17,520,17,"conn"],[608,21,520,21],[608,23,520,23],[609,10,521,12],[609,14,521,16],[609,15,521,17,"conn"],[609,19,521,21],[609,20,521,22,"onopen"],[609,26,521,28],[609,29,521,31],[609,33,521,35],[610,10,522,12],[610,14,522,16],[610,15,522,17,"conn"],[610,19,522,21],[610,20,522,22,"onerror"],[610,27,522,29],[610,30,522,32],[610,34,522,36],[611,10,523,12],[611,14,523,16],[611,15,523,17,"conn"],[611,19,523,21],[611,20,523,22,"onmessage"],[611,29,523,31],[611,32,523,34],[611,36,523,38],[612,10,524,12],[612,14,524,16],[612,15,524,17,"conn"],[612,19,524,21],[612,20,524,22,"onclose"],[612,27,524,29],[612,30,524,32],[612,34,524,36],[613,10,525,12],[613,14,525,16],[613,15,525,17,"conn"],[613,19,525,21],[613,22,525,24],[613,26,525,28],[614,8,526,8],[615,8,527,8],[615,12,527,12],[615,13,527,13,"_clearAllTimers"],[615,28,527,28],[615,29,527,29],[615,30,527,30],[616,8,528,8],[616,12,528,12],[616,13,528,13,"channels"],[616,21,528,21],[616,22,528,22,"forEach"],[616,29,528,29],[616,30,528,31,"channel"],[616,37,528,38],[616,41,528,43,"channel"],[616,48,528,50],[616,49,528,51,"teardown"],[616,57,528,59],[616,58,528,60],[616,59,528,61],[616,60,528,62],[617,6,529,4],[618,6,530,4],[619,4,530,4],[620,6,530,4,"key"],[620,9,530,4],[621,6,530,4,"value"],[621,11,530,4],[621,13,531,4],[621,22,531,4,"_onConnOpen"],[621,33,531,15,"_onConnOpen"],[621,34,531,15],[621,36,531,18],[622,8,532,8],[622,12,532,12],[622,13,532,13,"_setConnectionState"],[622,32,532,32],[622,33,532,33],[622,44,532,44],[622,45,532,45],[623,8,533,8],[623,12,533,12],[623,13,533,13,"log"],[623,16,533,16],[623,17,533,17],[623,28,533,28],[623,30,533,30],[623,46,533,46],[623,50,533,50],[623,51,533,51,"endpointURL"],[623,62,533,62],[623,63,533,63],[623,64,533,64],[623,66,533,66],[623,67,533,67],[624,8,534,8],[624,12,534,12],[624,13,534,13,"flushSendBuffer"],[624,28,534,28],[624,29,534,29],[624,30,534,30],[625,8,535,8],[625,12,535,12],[625,13,535,13,"_clearTimer"],[625,24,535,24],[625,25,535,25],[625,36,535,36],[625,37,535,37],[626,8,536,8],[626,12,536,12],[626,13,536,13],[626,17,536,17],[626,18,536,18,"worker"],[626,24,536,24],[626,26,536,26],[627,10,537,12],[627,14,537,16],[627,15,537,17,"_startHeartbeat"],[627,30,537,32],[627,31,537,33],[627,32,537,34],[628,8,538,8],[628,9,538,9],[628,15,539,13],[629,10,540,12],[629,14,540,16],[629,15,540,17],[629,19,540,21],[629,20,540,22,"workerRef"],[629,29,540,31],[629,31,540,33],[630,12,541,16],[630,16,541,20],[630,17,541,21,"_startWorkerHeartbeat"],[630,38,541,42],[630,39,541,43],[630,40,541,44],[631,10,542,12],[632,8,543,8],[633,8,544,8],[633,12,544,12],[633,13,544,13,"_triggerStateCallbacks"],[633,35,544,35],[633,36,544,36],[633,42,544,42],[633,43,544,43],[634,6,545,4],[635,6,546,4],[636,4,546,4],[637,6,546,4,"key"],[637,9,546,4],[638,6,546,4,"value"],[638,11,546,4],[638,13,547,4],[638,22,547,4,"_startHeartbeat"],[638,37,547,19,"_startHeartbeat"],[638,38,547,19],[638,40,547,22],[639,8,548,8],[639,12,548,12],[639,13,548,13,"heartbeatTimer"],[639,27,548,27],[639,31,548,31,"clearInterval"],[639,44,548,44],[639,45,548,45],[639,49,548,49],[639,50,548,50,"heartbeatTimer"],[639,64,548,64],[639,65,548,65],[640,8,549,8],[640,12,549,12],[640,13,549,13,"heartbeatTimer"],[640,27,549,27],[640,30,549,30,"setInterval"],[640,41,549,41],[640,42,549,42],[640,48,549,48],[640,52,549,52],[640,53,549,53,"sendHeartbeat"],[640,66,549,66],[640,67,549,67],[640,68,549,68],[640,70,549,70],[640,74,549,74],[640,75,549,75,"heartbeatIntervalMs"],[640,94,549,94],[640,95,549,95],[641,6,550,4],[642,6,551,4],[643,4,551,4],[644,6,551,4,"key"],[644,9,551,4],[645,6,551,4,"value"],[645,11,551,4],[645,13,552,4],[645,22,552,4,"_startWorkerHeartbeat"],[645,43,552,25,"_startWorkerHeartbeat"],[645,44,552,25],[645,46,552,28],[646,8,553,8],[646,12,553,12],[646,16,553,16],[646,17,553,17,"workerUrl"],[646,26,553,26],[646,28,553,28],[647,10,554,12],[647,14,554,16],[647,15,554,17,"log"],[647,18,554,20],[647,19,554,21],[647,27,554,29],[647,29,554,31],[647,57,554,59],[647,61,554,63],[647,62,554,64,"workerUrl"],[647,71,554,73],[647,73,554,75],[647,74,554,76],[648,8,555,8],[648,9,555,9],[648,15,556,13],[649,10,557,12],[649,14,557,16],[649,15,557,17,"log"],[649,18,557,20],[649,19,557,21],[649,27,557,29],[649,29,557,31],[649,54,557,56],[649,55,557,57],[650,8,558,8],[651,8,559,8],[651,12,559,14,"objectUrl"],[651,21,559,23],[651,24,559,26],[651,28,559,30],[651,29,559,31,"_workerObjectUrl"],[651,45,559,47],[651,46,559,48],[651,50,559,52],[651,51,559,53,"workerUrl"],[651,60,559,62],[651,61,559,63],[652,8,560,8],[652,12,560,12],[652,13,560,13,"workerRef"],[652,22,560,22],[652,25,560,25],[652,29,560,29,"Worker"],[652,35,560,35],[652,36,560,36,"objectUrl"],[652,45,560,45],[652,46,560,46],[653,8,561,8],[653,12,561,12],[653,13,561,13,"workerRef"],[653,22,561,22],[653,23,561,23,"onerror"],[653,30,561,30],[653,33,561,34,"error"],[653,38,561,39],[653,42,561,44],[654,10,562,12],[654,14,562,16],[654,15,562,17,"log"],[654,18,562,20],[654,19,562,21],[654,27,562,29],[654,29,562,31],[654,43,562,45],[654,45,562,47,"error"],[654,50,562,52],[654,51,562,53,"message"],[654,58,562,60],[654,59,562,61],[655,10,563,12],[655,14,563,16],[655,15,563,17,"workerRef"],[655,24,563,26],[655,25,563,27,"terminate"],[655,34,563,36],[655,35,563,37],[655,36,563,38],[656,8,564,8],[656,9,564,9],[657,8,565,8],[657,12,565,12],[657,13,565,13,"workerRef"],[657,22,565,22],[657,23,565,23,"onmessage"],[657,32,565,32],[657,35,565,36,"event"],[657,40,565,41],[657,44,565,46],[658,10,566,12],[658,14,566,16,"event"],[658,19,566,21],[658,20,566,22,"data"],[658,24,566,26],[658,25,566,27,"event"],[658,30,566,32],[658,35,566,37],[658,46,566,48],[658,48,566,50],[659,12,567,16],[659,16,567,20],[659,17,567,21,"sendHeartbeat"],[659,30,567,34],[659,31,567,35],[659,32,567,36],[660,10,568,12],[661,8,569,8],[661,9,569,9],[662,8,570,8],[662,12,570,12],[662,13,570,13,"workerRef"],[662,22,570,22],[662,23,570,23,"postMessage"],[662,34,570,34],[662,35,570,35],[663,10,571,12,"event"],[663,15,571,17],[663,17,571,19],[663,24,571,26],[664,10,572,12,"interval"],[664,18,572,20],[664,20,572,22],[664,24,572,26],[664,25,572,27,"heartbeatIntervalMs"],[665,8,573,8],[665,9,573,9],[665,10,573,10],[666,6,574,4],[667,6,575,4],[668,4,575,4],[669,6,575,4,"key"],[669,9,575,4],[670,6,575,4,"value"],[670,11,575,4],[670,13,576,4],[670,22,576,4,"_onConnClose"],[670,34,576,16,"_onConnClose"],[670,35,576,17,"event"],[670,40,576,22],[670,42,576,24],[671,8,577,8],[671,12,577,12,"_a"],[671,14,577,14],[672,8,578,8],[672,12,578,12],[672,13,578,13,"_setConnectionState"],[672,32,578,32],[672,33,578,33],[672,47,578,47],[672,48,578,48],[673,8,579,8],[673,12,579,12],[673,13,579,13,"log"],[673,16,579,16],[673,17,579,17],[673,28,579,28],[673,30,579,30],[673,37,579,37],[673,39,579,39,"event"],[673,44,579,44],[673,45,579,45],[674,8,580,8],[674,12,580,12],[674,13,580,13,"_triggerChanError"],[674,30,580,30],[674,31,580,31],[674,32,580,32],[675,8,581,8],[675,12,581,12],[675,13,581,13,"_clearTimer"],[675,24,581,24],[675,25,581,25],[675,36,581,36],[675,37,581,37],[676,8,582,8],[677,8,583,8],[677,12,583,12],[677,13,583,13],[677,17,583,17],[677,18,583,18,"_wasManualDisconnect"],[677,38,583,38],[677,40,583,40],[678,10,584,12],[678,11,584,13,"_a"],[678,13,584,15],[678,16,584,18],[678,20,584,22],[678,21,584,23,"reconnectTimer"],[678,35,584,37],[678,41,584,43],[678,45,584,47],[678,49,584,51,"_a"],[678,51,584,53],[678,56,584,58],[678,61,584,63],[678,62,584,64],[678,65,584,67],[678,70,584,72],[678,71,584,73],[678,74,584,76,"_a"],[678,76,584,78],[678,77,584,79,"scheduleTimeout"],[678,92,584,94],[678,93,584,95],[678,94,584,96],[679,8,585,8],[680,8,586,8],[680,12,586,12],[680,13,586,13,"_triggerStateCallbacks"],[680,35,586,35],[680,36,586,36],[680,43,586,43],[680,45,586,45,"event"],[680,50,586,50],[680,51,586,51],[681,6,587,4],[682,6,588,4],[683,4,588,4],[684,6,588,4,"key"],[684,9,588,4],[685,6,588,4,"value"],[685,11,588,4],[685,13,589,4],[685,22,589,4,"_onConnError"],[685,34,589,16,"_onConnError"],[685,35,589,17,"error"],[685,40,589,22],[685,42,589,24],[686,8,590,8],[686,12,590,12],[686,13,590,13,"_setConnectionState"],[686,32,590,32],[686,33,590,33],[686,47,590,47],[686,48,590,48],[687,8,591,8],[687,12,591,12],[687,13,591,13,"log"],[687,16,591,16],[687,17,591,17],[687,28,591,28],[687,30,591,30],[687,33,591,33,"error"],[687,38,591,38],[687,40,591,40],[687,41,591,41],[688,8,592,8],[688,12,592,12],[688,13,592,13,"_triggerChanError"],[688,30,592,30],[688,31,592,31],[688,32,592,32],[689,8,593,8],[689,12,593,12],[689,13,593,13,"_triggerStateCallbacks"],[689,35,593,35],[689,36,593,36],[689,43,593,43],[689,45,593,45,"error"],[689,50,593,50],[689,51,593,51],[690,6,594,4],[691,6,595,4],[692,4,595,4],[693,6,595,4,"key"],[693,9,595,4],[694,6,595,4,"value"],[694,11,595,4],[694,13,596,4],[694,22,596,4,"_triggerChanError"],[694,39,596,21,"_triggerChanError"],[694,40,596,21],[694,42,596,24],[695,8,597,8],[695,12,597,12],[695,13,597,13,"channels"],[695,21,597,21],[695,22,597,22,"forEach"],[695,29,597,29],[695,30,597,31,"channel"],[695,37,597,38],[695,41,597,43,"channel"],[695,48,597,50],[695,49,597,51,"_trigger"],[695,57,597,59],[695,58,597,60,"constants_1"],[695,69,597,71],[695,70,597,72,"CHANNEL_EVENTS"],[695,84,597,86],[695,85,597,87,"error"],[695,90,597,92],[695,91,597,93],[695,92,597,94],[696,6,598,4],[697,6,599,4],[698,4,599,4],[699,6,599,4,"key"],[699,9,599,4],[700,6,599,4,"value"],[700,11,599,4],[700,13,600,4],[700,22,600,4,"_appendParams"],[700,35,600,17,"_appendParams"],[700,36,600,18,"url"],[700,39,600,21],[700,41,600,23,"params"],[700,47,600,29],[700,49,600,31],[701,8,601,8],[701,12,601,12,"Object"],[701,18,601,18],[701,19,601,19,"keys"],[701,23,601,23],[701,24,601,24,"params"],[701,30,601,30],[701,31,601,31],[701,32,601,32,"length"],[701,38,601,38],[701,43,601,43],[701,44,601,44],[701,46,601,46],[702,10,602,12],[702,17,602,19,"url"],[702,20,602,22],[703,8,603,8],[704,8,604,8],[704,12,604,14,"prefix"],[704,18,604,20],[704,21,604,23,"url"],[704,24,604,26],[704,25,604,27,"match"],[704,30,604,32],[704,31,604,33],[704,35,604,37],[704,36,604,38],[704,39,604,41],[704,42,604,44],[704,45,604,47],[704,48,604,50],[705,8,605,8],[705,12,605,14,"query"],[705,17,605,19],[705,20,605,22],[705,24,605,26,"URLSearchParams"],[705,39,605,41],[705,40,605,42,"params"],[705,46,605,48],[705,47,605,49],[706,8,606,8],[706,15,606,15],[706,18,606,18,"url"],[706,21,606,21],[706,24,606,24,"prefix"],[706,30,606,30],[706,33,606,33,"query"],[706,38,606,38],[706,40,606,40],[707,6,607,4],[708,4,607,5],[709,6,607,5,"key"],[709,9,607,5],[710,6,607,5,"value"],[710,11,607,5],[710,13,608,4],[710,22,608,4,"_workerObjectUrl"],[710,38,608,20,"_workerObjectUrl"],[710,39,608,21,"url"],[710,42,608,24],[710,44,608,26],[711,8,609,8],[711,12,609,12,"result_url"],[711,22,609,22],[712,8,610,8],[712,12,610,12,"url"],[712,15,610,15],[712,17,610,17],[713,10,611,12,"result_url"],[713,20,611,22],[713,23,611,25,"url"],[713,26,611,28],[714,8,612,8],[714,9,612,9],[714,15,613,13],[715,10,614,12],[715,14,614,18,"blob"],[715,18,614,22],[715,21,614,25],[715,25,614,29,"Blob"],[715,29,614,33],[715,30,614,34],[715,31,614,35,"WORKER_SCRIPT"],[715,44,614,48],[715,45,614,49],[715,47,614,51],[716,12,614,53,"type"],[716,16,614,57],[716,18,614,59],[717,10,614,84],[717,11,614,85],[717,12,614,86],[718,10,615,12,"result_url"],[718,20,615,22],[718,23,615,25,"URL"],[718,26,615,28],[718,27,615,29,"createObjectURL"],[718,42,615,44],[718,43,615,45,"blob"],[718,47,615,49],[718,48,615,50],[719,8,616,8],[720,8,617,8],[720,15,617,15,"result_url"],[720,25,617,25],[721,6,618,4],[722,6,619,4],[723,0,620,0],[724,0,621,0],[725,0,622,0],[726,4,619,4],[727,6,619,4,"key"],[727,9,619,4],[728,6,619,4,"value"],[728,11,619,4],[728,13,623,4],[728,22,623,4,"_setConnectionState"],[728,41,623,23,"_setConnectionState"],[728,42,623,24,"state"],[728,47,623,29],[728,49,623,47],[729,8,623,47],[729,12,623,31,"manual"],[729,18,623,37],[729,21,623,37,"arguments"],[729,30,623,37],[729,31,623,37,"length"],[729,37,623,37],[729,45,623,37,"arguments"],[729,54,623,37],[729,62,623,37,"undefined"],[729,71,623,37],[729,74,623,37,"arguments"],[729,83,623,37],[729,89,623,40],[729,94,623,45],[730,8,624,8],[730,12,624,12],[730,13,624,13,"_connectionState"],[730,29,624,29],[730,32,624,32,"state"],[730,37,624,37],[731,8,625,8],[731,12,625,12,"state"],[731,17,625,17],[731,22,625,22],[731,34,625,34],[731,36,625,36],[732,10,626,12],[732,14,626,16],[732,15,626,17,"_wasManualDisconnect"],[732,35,626,37],[732,38,626,40],[732,43,626,45],[733,8,627,8],[733,9,627,9],[733,15,628,13],[733,19,628,17,"state"],[733,24,628,22],[733,29,628,27],[733,44,628,42],[733,46,628,44],[734,10,629,12],[734,14,629,16],[734,15,629,17,"_wasManualDisconnect"],[734,35,629,37],[734,38,629,40,"manual"],[734,44,629,46],[735,8,630,8],[736,6,631,4],[737,6,632,4],[738,0,633,0],[739,0,634,0],[740,0,635,0],[741,4,632,4],[742,6,632,4,"key"],[742,9,632,4],[743,6,632,4,"value"],[743,11,632,4],[744,8,632,4],[744,12,632,4,"_performAuth2"],[744,25,632,4],[744,28,632,4,"_asyncToGenerator"],[744,45,632,4],[744,46,636,4],[744,59,636,37],[745,10,636,37],[745,14,636,23,"token"],[745,19,636,28],[745,22,636,28,"arguments"],[745,31,636,28],[745,32,636,28,"length"],[745,38,636,28],[745,46,636,28,"arguments"],[745,55,636,28],[745,63,636,28,"undefined"],[745,72,636,28],[745,75,636,28,"arguments"],[745,84,636,28],[745,90,636,31],[745,94,636,35],[746,10,637,8],[746,14,637,12,"tokenToSend"],[746,25,637,23],[747,10,638,8],[747,14,638,12,"token"],[747,19,638,17],[747,21,638,19],[748,12,639,12,"tokenToSend"],[748,23,639,23],[748,26,639,26,"token"],[748,31,639,31],[749,10,640,8],[749,11,640,9],[749,17,641,13],[749,21,641,17],[749,25,641,21],[749,26,641,22,"accessToken"],[749,37,641,33],[749,39,641,35],[750,12,642,12],[751,12,643,12,"tokenToSend"],[751,23,643,23],[751,32,643,32],[751,36,643,36],[751,37,643,37,"accessToken"],[751,48,643,48],[751,49,643,49],[751,50,643,50],[752,10,644,8],[752,11,644,9],[752,17,645,13],[753,12,646,12,"tokenToSend"],[753,23,646,23],[753,26,646,26],[753,30,646,30],[753,31,646,31,"accessTokenValue"],[753,47,646,47],[754,10,647,8],[755,10,648,8],[755,14,648,12],[755,18,648,16],[755,19,648,17,"accessTokenValue"],[755,35,648,33],[755,39,648,37,"tokenToSend"],[755,50,648,48],[755,52,648,50],[756,12,649,12],[756,16,649,16],[756,17,649,17,"accessTokenValue"],[756,33,649,33],[756,36,649,36,"tokenToSend"],[756,47,649,47],[757,12,650,12],[757,16,650,16],[757,17,650,17,"channels"],[757,25,650,25],[757,26,650,26,"forEach"],[757,33,650,33],[757,34,650,35,"channel"],[757,41,650,42],[757,45,650,47],[758,14,651,16],[758,18,651,22,"payload"],[758,25,651,29],[758,28,651,32],[759,16,652,20,"access_token"],[759,28,652,32],[759,30,652,34,"tokenToSend"],[759,41,652,45],[760,16,653,20,"version"],[760,23,653,27],[760,25,653,29,"constants_1"],[760,36,653,40],[760,37,653,41,"DEFAULT_VERSION"],[761,14,654,16],[761,15,654,17],[762,14,655,16,"tokenToSend"],[762,25,655,27],[762,29,655,31,"channel"],[762,36,655,38],[762,37,655,39,"updateJoinPayload"],[762,54,655,56],[762,55,655,57,"payload"],[762,62,655,64],[762,63,655,65],[763,14,656,16],[763,18,656,20,"channel"],[763,25,656,27],[763,26,656,28,"joinedOnce"],[763,36,656,38],[763,40,656,42,"channel"],[763,47,656,49],[763,48,656,50,"_isJoined"],[763,57,656,59],[763,58,656,60],[763,59,656,61],[763,61,656,63],[764,16,657,20,"channel"],[764,23,657,27],[764,24,657,28,"_push"],[764,29,657,33],[764,30,657,34,"constants_1"],[764,41,657,45],[764,42,657,46,"CHANNEL_EVENTS"],[764,56,657,60],[764,57,657,61,"access_token"],[764,69,657,73],[764,71,657,75],[765,18,658,24,"access_token"],[765,30,658,36],[765,32,658,38,"tokenToSend"],[766,16,659,20],[766,17,659,21],[766,18,659,22],[767,14,660,16],[768,12,661,12],[768,13,661,13],[768,14,661,14],[769,10,662,8],[770,8,663,4],[770,9,663,5],[771,8,663,5],[771,17,636,10,"_performAuth"],[771,29,636,22,"_performAuth"],[771,30,636,22],[772,10,636,22],[772,17,636,22,"_performAuth2"],[772,30,636,22],[772,31,636,22,"apply"],[772,36,636,22],[772,43,636,22,"arguments"],[772,52,636,22],[773,8,636,22],[774,8,636,22],[774,15,636,10,"_performAuth"],[774,27,636,22],[775,6,636,22],[776,6,664,4],[777,0,665,0],[778,0,666,0],[779,0,667,0],[780,6,664,4],[781,4,664,4],[782,6,664,4,"key"],[782,9,664,4],[783,6,664,4,"value"],[783,11,664,4],[784,8,664,4],[784,12,664,4,"_waitForAuthIfNeeded2"],[784,33,664,4],[784,36,664,4,"_asyncToGenerator"],[784,53,664,4],[784,54,668,4],[784,67,668,33],[785,10,669,8],[785,14,669,12],[785,18,669,16],[785,19,669,17,"_authPromise"],[785,31,669,29],[785,33,669,31],[786,12,670,12],[786,18,670,18],[786,22,670,22],[786,23,670,23,"_authPromise"],[786,35,670,35],[787,10,671,8],[788,8,672,4],[788,9,672,5],[789,8,672,5],[789,17,668,10,"_waitForAuthIfNeeded"],[789,37,668,30,"_waitForAuthIfNeeded"],[789,38,668,30],[790,10,668,30],[790,17,668,30,"_waitForAuthIfNeeded2"],[790,38,668,30],[790,39,668,30,"apply"],[790,44,668,30],[790,51,668,30,"arguments"],[790,60,668,30],[791,8,668,30],[792,8,668,30],[792,15,668,10,"_waitForAuthIfNeeded"],[792,35,668,30],[793,6,668,30],[794,6,673,4],[795,0,674,0],[796,0,675,0],[797,0,676,0],[798,6,673,4],[799,4,673,4],[800,6,673,4,"key"],[800,9,673,4],[801,6,673,4,"value"],[801,11,673,4],[801,13,677,4],[801,22,677,4,"_setAuthSafely"],[801,36,677,18,"_setAuthSafely"],[801,37,677,18],[801,39,677,40],[802,8,677,40],[802,12,677,19,"context"],[802,19,677,26],[802,22,677,26,"arguments"],[802,31,677,26],[802,32,677,26,"length"],[802,38,677,26],[802,46,677,26,"arguments"],[802,55,677,26],[802,63,677,26,"undefined"],[802,72,677,26],[802,75,677,26,"arguments"],[802,84,677,26],[802,90,677,29],[802,99,677,38],[803,8,678,8],[803,12,678,12],[803,13,678,13,"setAuth"],[803,20,678,20],[803,21,678,21],[803,22,678,22],[803,23,678,23,"catch"],[803,28,678,28],[803,29,678,30,"e"],[803,30,678,31],[803,34,678,36],[804,10,679,12],[804,14,679,16],[804,15,679,17,"log"],[804,18,679,20],[804,19,679,21],[804,26,679,28],[804,28,679,30],[804,53,679,55,"context"],[804,60,679,62],[804,62,679,64],[804,64,679,66,"e"],[804,65,679,67],[804,66,679,68],[805,8,680,8],[805,9,680,9],[805,10,680,10],[806,6,681,4],[807,6,682,4],[808,0,683,0],[809,0,684,0],[810,0,685,0],[811,4,682,4],[812,6,682,4,"key"],[812,9,682,4],[813,6,682,4,"value"],[813,11,682,4],[813,13,686,4],[813,22,686,4,"_triggerStateCallbacks"],[813,44,686,26,"_triggerStateCallbacks"],[813,45,686,27,"event"],[813,50,686,32],[813,52,686,34,"data"],[813,56,686,38],[813,58,686,40],[814,8,687,8],[814,12,687,12],[815,10,688,12],[815,14,688,16],[815,15,688,17,"stateChangeCallbacks"],[815,35,688,37],[815,36,688,38,"event"],[815,41,688,43],[815,42,688,44],[815,43,688,45,"forEach"],[815,50,688,52],[815,51,688,54,"callback"],[815,59,688,62],[815,63,688,67],[816,12,689,16],[816,16,689,20],[817,14,690,20,"callback"],[817,22,690,28],[817,23,690,29,"data"],[817,27,690,33],[817,28,690,34],[818,12,691,16],[818,13,691,17],[818,14,692,16],[818,21,692,23,"e"],[818,22,692,24],[818,24,692,26],[819,14,693,20],[819,18,693,24],[819,19,693,25,"log"],[819,22,693,28],[819,23,693,29],[819,30,693,36],[819,32,693,38],[819,44,693,50,"event"],[819,49,693,55],[819,60,693,66],[819,62,693,68,"e"],[819,63,693,69],[819,64,693,70],[820,12,694,16],[821,10,695,12],[821,11,695,13],[821,12,695,14],[822,8,696,8],[822,9,696,9],[822,10,697,8],[822,17,697,15,"e"],[822,18,697,16],[822,20,697,18],[823,10,698,12],[823,14,698,16],[823,15,698,17,"log"],[823,18,698,20],[823,19,698,21],[823,26,698,28],[823,28,698,30],[823,48,698,50,"event"],[823,53,698,55],[823,65,698,67],[823,67,698,69,"e"],[823,68,698,70],[823,69,698,71],[824,8,699,8],[825,6,700,4],[826,6,701,4],[827,0,702,0],[828,0,703,0],[829,0,704,0],[830,4,701,4],[831,6,701,4,"key"],[831,9,701,4],[832,6,701,4,"value"],[832,11,701,4],[832,13,705,4],[832,22,705,4,"_setupReconnectionTimer"],[832,45,705,27,"_setupReconnectionTimer"],[832,46,705,27],[832,48,705,30],[833,8,705,30],[833,12,705,30,"_this"],[833,17,705,30],[834,8,706,8],[834,12,706,12],[834,13,706,13,"reconnectTimer"],[834,27,706,27],[834,30,706,30],[834,34,706,34,"timer_1"],[834,41,706,41],[834,42,706,42,"default"],[834,49,706,49],[834,63,706,49,"_asyncToGenerator"],[834,80,706,49],[834,81,706,50],[834,94,706,62],[835,10,707,12,"setTimeout"],[835,20,707,22],[835,34,707,22,"_asyncToGenerator"],[835,51,707,22],[835,52,707,23],[835,65,707,35],[836,12,708,16],[836,18,708,22,"_this"],[836,23,708,26],[836,24,708,27,"_waitForAuthIfNeeded"],[836,44,708,47],[836,45,708,48],[836,46,708,49],[837,12,709,16],[837,16,709,20],[837,17,709,21,"_this"],[837,22,709,25],[837,23,709,26,"isConnected"],[837,34,709,37],[837,35,709,38],[837,36,709,39],[837,38,709,41],[838,14,710,20,"_this"],[838,19,710,24],[838,20,710,25,"connect"],[838,27,710,32],[838,28,710,33],[838,29,710,34],[839,12,711,16],[840,10,712,12],[840,11,712,13],[840,14,712,15,"CONNECTION_TIMEOUTS"],[840,33,712,34],[840,34,712,35,"RECONNECT_DELAY"],[840,49,712,50],[840,50,712,51],[841,8,713,8],[841,9,713,9],[841,12,713,11],[841,16,713,15],[841,17,713,16,"reconnectAfterMs"],[841,33,713,32],[841,34,713,33],[842,6,714,4],[843,6,715,4],[844,0,716,0],[845,0,717,0],[846,0,718,0],[847,4,715,4],[848,6,715,4,"key"],[848,9,715,4],[849,6,715,4,"value"],[849,11,715,4],[849,13,719,4],[849,22,719,4,"_initializeOptions"],[849,40,719,22,"_initializeOptions"],[849,41,719,23,"options"],[849,48,719,30],[849,50,719,32],[850,8,720,8],[850,12,720,12,"_a"],[850,14,720,14],[850,16,720,16,"_b"],[850,18,720,18],[850,20,720,20,"_c"],[850,22,720,22],[850,24,720,24,"_d"],[850,26,720,26],[850,28,720,28,"_e"],[850,30,720,30],[850,32,720,32,"_f"],[850,34,720,34],[850,36,720,36,"_g"],[850,38,720,38],[850,40,720,40,"_h"],[850,42,720,42],[850,44,720,44,"_j"],[850,46,720,46],[851,8,721,8],[852,8,722,8],[852,12,722,12],[852,13,722,13,"transport"],[852,22,722,22],[852,25,722,25],[852,26,722,26,"_a"],[852,28,722,28],[852,31,722,31,"options"],[852,38,722,38],[852,43,722,43],[852,47,722,47],[852,51,722,51,"options"],[852,58,722,58],[852,63,722,63],[852,68,722,68],[852,69,722,69],[852,72,722,72],[852,77,722,77],[852,78,722,78],[852,81,722,81,"options"],[852,88,722,88],[852,89,722,89,"transport"],[852,98,722,98],[852,104,722,104],[852,108,722,108],[852,112,722,112,"_a"],[852,114,722,114],[852,119,722,119],[852,124,722,124],[852,125,722,125],[852,128,722,128,"_a"],[852,130,722,130],[852,133,722,133],[852,137,722,137],[853,8,723,8],[853,12,723,12],[853,13,723,13,"timeout"],[853,20,723,20],[853,23,723,23],[853,24,723,24,"_b"],[853,26,723,26],[853,29,723,29,"options"],[853,36,723,36],[853,41,723,41],[853,45,723,45],[853,49,723,49,"options"],[853,56,723,56],[853,61,723,61],[853,66,723,66],[853,67,723,67],[853,70,723,70],[853,75,723,75],[853,76,723,76],[853,79,723,79,"options"],[853,86,723,86],[853,87,723,87,"timeout"],[853,94,723,94],[853,100,723,100],[853,104,723,104],[853,108,723,108,"_b"],[853,110,723,110],[853,115,723,115],[853,120,723,120],[853,121,723,121],[853,124,723,124,"_b"],[853,126,723,126],[853,129,723,129,"constants_1"],[853,140,723,140],[853,141,723,141,"DEFAULT_TIMEOUT"],[853,156,723,156],[854,8,724,8],[854,12,724,12],[854,13,724,13,"heartbeatIntervalMs"],[854,32,724,32],[854,35,725,12],[854,36,725,13,"_c"],[854,38,725,15],[854,41,725,18,"options"],[854,48,725,25],[854,53,725,30],[854,57,725,34],[854,61,725,38,"options"],[854,68,725,45],[854,73,725,50],[854,78,725,55],[854,79,725,56],[854,82,725,59],[854,87,725,64],[854,88,725,65],[854,91,725,68,"options"],[854,98,725,75],[854,99,725,76,"heartbeatIntervalMs"],[854,118,725,95],[854,124,725,101],[854,128,725,105],[854,132,725,109,"_c"],[854,134,725,111],[854,139,725,116],[854,144,725,121],[854,145,725,122],[854,148,725,125,"_c"],[854,150,725,127],[854,153,725,130,"CONNECTION_TIMEOUTS"],[854,172,725,149],[854,173,725,150,"HEARTBEAT_INTERVAL"],[854,191,725,168],[855,8,726,8],[855,12,726,12],[855,13,726,13,"worker"],[855,19,726,19],[855,22,726,22],[855,23,726,23,"_d"],[855,25,726,25],[855,28,726,28,"options"],[855,35,726,35],[855,40,726,40],[855,44,726,44],[855,48,726,48,"options"],[855,55,726,55],[855,60,726,60],[855,65,726,65],[855,66,726,66],[855,69,726,69],[855,74,726,74],[855,75,726,75],[855,78,726,78,"options"],[855,85,726,85],[855,86,726,86,"worker"],[855,92,726,92],[855,98,726,98],[855,102,726,102],[855,106,726,106,"_d"],[855,108,726,108],[855,113,726,113],[855,118,726,118],[855,119,726,119],[855,122,726,122,"_d"],[855,124,726,124],[855,127,726,127],[855,132,726,132],[856,8,727,8],[856,12,727,12],[856,13,727,13,"accessToken"],[856,24,727,24],[856,27,727,27],[856,28,727,28,"_e"],[856,30,727,30],[856,33,727,33,"options"],[856,40,727,40],[856,45,727,45],[856,49,727,49],[856,53,727,53,"options"],[856,60,727,60],[856,65,727,65],[856,70,727,70],[856,71,727,71],[856,74,727,74],[856,79,727,79],[856,80,727,80],[856,83,727,83,"options"],[856,90,727,90],[856,91,727,91,"accessToken"],[856,102,727,102],[856,108,727,108],[856,112,727,112],[856,116,727,116,"_e"],[856,118,727,118],[856,123,727,123],[856,128,727,128],[856,129,727,129],[856,132,727,132,"_e"],[856,134,727,134],[856,137,727,137],[856,141,727,141],[857,8,728,8],[857,12,728,12],[857,13,728,13,"heartbeatCallback"],[857,30,728,30],[857,33,728,33],[857,34,728,34,"_f"],[857,36,728,36],[857,39,728,39,"options"],[857,46,728,46],[857,51,728,51],[857,55,728,55],[857,59,728,59,"options"],[857,66,728,66],[857,71,728,71],[857,76,728,76],[857,77,728,77],[857,80,728,80],[857,85,728,85],[857,86,728,86],[857,89,728,89,"options"],[857,96,728,96],[857,97,728,97,"heartbeatCallback"],[857,114,728,114],[857,120,728,120],[857,124,728,124],[857,128,728,128,"_f"],[857,130,728,130],[857,135,728,135],[857,140,728,140],[857,141,728,141],[857,144,728,144,"_f"],[857,146,728,146],[857,149,728,149,"noop"],[857,153,728,153],[858,8,729,8],[859,8,730,8],[859,12,730,12,"options"],[859,19,730,19],[859,24,730,24],[859,28,730,28],[859,32,730,32,"options"],[859,39,730,39],[859,44,730,44],[859,49,730,49],[859,50,730,50],[859,53,730,53],[859,58,730,58],[859,59,730,59],[859,62,730,62,"options"],[859,69,730,69],[859,70,730,70,"params"],[859,76,730,76],[859,78,731,12],[859,82,731,16],[859,83,731,17,"params"],[859,89,731,23],[859,92,731,26,"options"],[859,99,731,33],[859,100,731,34,"params"],[859,106,731,40],[860,8,732,8],[860,12,732,12,"options"],[860,19,732,19],[860,24,732,24],[860,28,732,28],[860,32,732,32,"options"],[860,39,732,39],[860,44,732,44],[860,49,732,49],[860,50,732,50],[860,53,732,53],[860,58,732,58],[860,59,732,59],[860,62,732,62,"options"],[860,69,732,69],[860,70,732,70,"logger"],[860,76,732,76],[860,78,733,12],[860,82,733,16],[860,83,733,17,"logger"],[860,89,733,23],[860,92,733,26,"options"],[860,99,733,33],[860,100,733,34,"logger"],[860,106,733,40],[861,8,734,8],[861,12,734,12],[861,13,734,13,"options"],[861,20,734,20],[861,25,734,25],[861,29,734,29],[861,33,734,33,"options"],[861,40,734,40],[861,45,734,45],[861,50,734,50],[861,51,734,51],[861,54,734,54],[861,59,734,59],[861,60,734,60],[861,63,734,63,"options"],[861,70,734,70],[861,71,734,71,"logLevel"],[861,79,734,79],[861,85,734,85,"options"],[861,92,734,92],[861,97,734,97],[861,101,734,101],[861,105,734,105,"options"],[861,112,734,112],[861,117,734,117],[861,122,734,122],[861,123,734,123],[861,126,734,126],[861,131,734,131],[861,132,734,132],[861,135,734,135,"options"],[861,142,734,142],[861,143,734,143,"log_level"],[861,152,734,152],[861,153,734,153],[861,155,734,155],[862,10,735,12],[862,14,735,16],[862,15,735,17,"logLevel"],[862,23,735,25],[862,26,735,28,"options"],[862,33,735,35],[862,34,735,36,"logLevel"],[862,42,735,44],[862,46,735,48,"options"],[862,53,735,55],[862,54,735,56,"log_level"],[862,63,735,65],[863,10,736,12],[863,14,736,16],[863,15,736,17,"params"],[863,21,736,23],[863,24,736,26,"Object"],[863,30,736,32],[863,31,736,33,"assign"],[863,37,736,39],[863,38,736,40,"Object"],[863,44,736,46],[863,45,736,47,"assign"],[863,51,736,53],[863,52,736,54],[863,53,736,55],[863,54,736,56],[863,56,736,58],[863,60,736,62],[863,61,736,63,"params"],[863,67,736,69],[863,68,736,70],[863,70,736,72],[864,12,736,74,"log_level"],[864,21,736,83],[864,23,736,85],[864,27,736,89],[864,28,736,90,"logLevel"],[865,10,736,99],[865,11,736,100],[865,12,736,101],[866,8,737,8],[867,8,738,8],[868,8,739,8],[868,12,739,12],[868,13,739,13,"reconnectAfterMs"],[868,29,739,29],[868,32,740,12],[868,33,740,13,"_g"],[868,35,740,15],[868,38,740,18,"options"],[868,45,740,25],[868,50,740,30],[868,54,740,34],[868,58,740,38,"options"],[868,65,740,45],[868,70,740,50],[868,75,740,55],[868,76,740,56],[868,79,740,59],[868,84,740,64],[868,85,740,65],[868,88,740,68,"options"],[868,95,740,75],[868,96,740,76,"reconnectAfterMs"],[868,112,740,92],[868,118,740,98],[868,122,740,102],[868,126,740,106,"_g"],[868,128,740,108],[868,133,740,113],[868,138,740,118],[868,139,740,119],[868,142,740,122,"_g"],[868,144,740,124],[868,147,740,129,"tries"],[868,152,740,134],[868,156,740,139],[869,10,741,16],[869,17,741,23,"RECONNECT_INTERVALS"],[869,36,741,42],[869,37,741,43,"tries"],[869,42,741,48],[869,45,741,51],[869,46,741,52],[869,47,741,53],[869,51,741,57,"DEFAULT_RECONNECT_FALLBACK"],[869,77,741,83],[870,8,742,12],[870,9,742,14],[871,8,743,8],[871,12,743,12],[871,13,743,13,"encode"],[871,19,743,19],[871,22,744,12],[871,23,744,13,"_h"],[871,25,744,15],[871,28,744,18,"options"],[871,35,744,25],[871,40,744,30],[871,44,744,34],[871,48,744,38,"options"],[871,55,744,45],[871,60,744,50],[871,65,744,55],[871,66,744,56],[871,69,744,59],[871,74,744,64],[871,75,744,65],[871,78,744,68,"options"],[871,85,744,75],[871,86,744,76,"encode"],[871,92,744,82],[871,98,744,88],[871,102,744,92],[871,106,744,96,"_h"],[871,108,744,98],[871,113,744,103],[871,118,744,108],[871,119,744,109],[871,122,744,112,"_h"],[871,124,744,114],[871,127,744,118],[871,128,744,119,"payload"],[871,135,744,126],[871,137,744,128,"callback"],[871,145,744,136],[871,150,744,141],[872,10,745,16],[872,17,745,23,"callback"],[872,25,745,31],[872,26,745,32,"JSON"],[872,30,745,36],[872,31,745,37,"stringify"],[872,40,745,46],[872,41,745,47,"payload"],[872,48,745,54],[872,49,745,55],[872,50,745,56],[873,8,746,12],[873,9,746,14],[874,8,747,8],[874,12,747,12],[874,13,747,13,"decode"],[874,19,747,19],[874,22,748,12],[874,23,748,13,"_j"],[874,25,748,15],[874,28,748,18,"options"],[874,35,748,25],[874,40,748,30],[874,44,748,34],[874,48,748,38,"options"],[874,55,748,45],[874,60,748,50],[874,65,748,55],[874,66,748,56],[874,69,748,59],[874,74,748,64],[874,75,748,65],[874,78,748,68,"options"],[874,85,748,75],[874,86,748,76,"decode"],[874,92,748,82],[874,98,748,88],[874,102,748,92],[874,106,748,96,"_j"],[874,108,748,98],[874,113,748,103],[874,118,748,108],[874,119,748,109],[874,122,748,112,"_j"],[874,124,748,114],[874,127,748,117],[874,131,748,121],[874,132,748,122,"serializer"],[874,142,748,132],[874,143,748,133,"decode"],[874,149,748,139],[874,150,748,140,"bind"],[874,154,748,144],[874,155,748,145],[874,159,748,149],[874,160,748,150,"serializer"],[874,170,748,160],[874,171,748,161],[875,8,749,8],[876,8,750,8],[876,12,750,12],[876,16,750,16],[876,17,750,17,"worker"],[876,23,750,23],[876,25,750,25],[877,10,751,12],[877,14,751,16],[877,21,751,23,"window"],[877,27,751,29],[877,32,751,34],[877,43,751,45],[877,47,751,49],[877,48,751,50,"window"],[877,54,751,56],[877,55,751,57,"Worker"],[877,61,751,63],[877,63,751,65],[878,12,752,16],[878,18,752,22],[878,22,752,26,"Error"],[878,27,752,31],[878,28,752,32],[878,57,752,61],[878,58,752,62],[879,10,753,12],[880,10,754,12],[880,14,754,16],[880,15,754,17,"workerUrl"],[880,24,754,26],[880,27,754,29,"options"],[880,34,754,36],[880,39,754,41],[880,43,754,45],[880,47,754,49,"options"],[880,54,754,56],[880,59,754,61],[880,64,754,66],[880,65,754,67],[880,68,754,70],[880,73,754,75],[880,74,754,76],[880,77,754,79,"options"],[880,84,754,86],[880,85,754,87,"workerUrl"],[880,94,754,96],[881,8,755,8],[882,6,756,4],[883,4,756,5],[884,2,756,5],[885,2,758,0,"exports"],[885,9,758,7],[885,10,758,8,"default"],[885,17,758,15],[885,20,758,18,"RealtimeClient"],[885,34,758,32],[886,0,758,33],[886,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","noop","RealtimeClient","constructor","_resolveFetch","_fetch","Promise.resolve.then$argument_0","Promise.resolve.then.then$argument_0","Promise.resolve.then.then._catch$argument_0","connect","endpointURL","disconnect","setTimeout$argument_0","conn.onclose","getChannels","removeChannel","removeAllChannels","channels.map$argument_0","log","connectionState","isConnected","isConnecting","isDisconnecting","channel","getChannels.find$argument_0","push","callback","encode$argument_1","setAuth","sendHeartbeat","onHeartbeat","flushSendBuffer","sendBuffer.forEach$argument_0","_makeRef","_leaveOpenTopic","channels.find$argument_0","_remove","channels.filter$argument_0","_onConnMessage","decode$argument_1","channels.filter.forEach$argument_0","_clearTimer","_clearAllTimers","_setupConnectionHandlers","conn.onopen","conn.onerror","conn.onmessage","_teardownConnection","channels.forEach$argument_0","_onConnOpen","_startHeartbeat","setInterval$argument_0","_startWorkerHeartbeat","workerRef.onerror","workerRef.onmessage","_onConnClose","_onConnError","_triggerChanError","_appendParams","_workerObjectUrl","_setConnectionState","_performAuth","_waitForAuthIfNeeded","_setAuthSafely","setAuth._catch$argument_0","_triggerStateCallbacks","stateChangeCallbacks.event.forEach$argument_0","_setupReconnectionTimer","timer_1._default$argument_0","_initializeOptions"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;wDCC;CDE;aIQ,SJ;AKe;ICoB;6BCqC;yBCO,+DC,6BD,OE,sCF;2BGC;iBHG,CD;mBNK,4BM;SDC;KDY;IOI;KPuC;IQK;KRE;ISO;6CCO;aDE;gCEC;aFG;KTa;IYI;KZE;IaK;KbM;IcI;6DCC,kCD;KdI;IgBM;KhBE;IiBI;KjBW;IkBI;KlBE;ImBI;KnBE;IoBI;KpBE;IqBC;+CCE,gCD;KrBS;IuBM;yBCE;8BCC;aDG;SDC;KvBQ;I0BU;K1BQ;I2BI;uBjBwB;aiBK;K3BkB;I4BC;K5BE;I6BI;oCCE,wBD;K7BG;I+BM;K/BS;IgCM;4CCC,6DD;KhCK;IkCQ;6CCC,gCD;KlCC;IoCE;qCCC;wBFqB,qCE;yBCC,kDD;SDE;KpCC;IuCK;KvCS;IwCK;KxCG;IyCK;2BCQ,wBD;4BEC,mCF;8BGC,qCH;4B9BC,mC8B;KzCC;I6CK;8BCS,+BD;K7CC;I+CE;K/Cc;IgDE;0CCE,0BD;KhDC;IkDE;iCCS;SDG;mCEC;SFI;KlDK;IqDE;KrDW;IsDE;KtDK;IuDE;8BTC,+DS;KvDC;IwDE;KxDO;IyDC;KzDU;I0DK;K1DQ;I2DK;kCbc;aaW;K3DE;I4DK;K5DI;I6DK;6BCC;SDE;K7DC;I+DK;qDCE;aDO;K/DK;IiEK;kDCC;uBxDC;awDK;SDC;KjEC;ImEK;gIvEqB;auEE;sHvEE;auEE;KnEU;CLC"},"hasCjsExports":true},"type":"js/module"}]}