{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":17,"index":914},"end":{"line":15,"column":41,"index":938}}],"key":"+GSAvg/CWfG2ifOQrWLkai/D9hY=","exportNames":["*"],"imports":1}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":16,"index":956},"end":{"line":16,"column":39,"index":979}}],"key":"m5IduDkD0DmXIm44QxetlLAeo0E=","exportNames":["*"],"imports":1}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":18,"index":999},"end":{"line":17,"column":43,"index":1024}}],"key":"g7hF4pHwnWO84hRO36vjqsLwW80=","exportNames":["*"],"imports":1}},{"name":"./BlobDownloadBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":18,"column":46,"index":1072},"end":{"line":18,"column":78,"index":1104}}],"key":"ZOxbRXUyfDEL0iRFTQ4ys3MNGAs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\").default;\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var errors_1 = require(_dependencyMap[2], \"../lib/errors\");\n  var fetch_1 = require(_dependencyMap[3], \"../lib/fetch\");\n  var helpers_1 = require(_dependencyMap[4], \"../lib/helpers\");\n  var BlobDownloadBuilder_1 = __importDefault(require(_dependencyMap[5], \"./BlobDownloadBuilder\"));\n  var DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n      column: 'name',\n      order: 'asc'\n    }\n  };\n  var DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false\n  };\n  var StorageFileApi = /*#__PURE__*/function () {\n    function StorageFileApi(url) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n      var fetch = arguments.length > 3 ? arguments[3] : undefined;\n      _classCallCheck(this, StorageFileApi);\n      this.shouldThrowOnError = false;\n      this.url = url;\n      this.headers = headers;\n      this.bucketId = bucketId;\n      this.fetch = (0, helpers_1.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    return _createClass(StorageFileApi, [{\n      key: \"throwOnError\",\n      value: function throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n      }\n      /**\n       * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n       *\n       * @param method HTTP method.\n       * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"uploadOrUpdate\",\n      value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var body;\n            var options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n            var headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n              'x-upsert': String(options.upsert)\n            });\n            var metadata = options.metadata;\n            if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n              body = new FormData();\n              body.append('cacheControl', options.cacheControl);\n              if (metadata) {\n                body.append('metadata', this.encodeMetadata(metadata));\n              }\n              body.append('', fileBody);\n            } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n              body = fileBody;\n              body.append('cacheControl', options.cacheControl);\n              if (metadata) {\n                body.append('metadata', this.encodeMetadata(metadata));\n              }\n            } else {\n              body = fileBody;\n              headers['cache-control'] = `max-age=${options.cacheControl}`;\n              headers['content-type'] = options.contentType;\n              if (metadata) {\n                headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n              }\n            }\n            if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n              headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n            }\n            var cleanPath = this._removeEmptyFolders(path);\n            var _path = this._getFinalPath(cleanPath);\n            var data = yield (method == 'PUT' ? fetch_1.put : fetch_1.post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n              headers\n            }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n              duplex: options.duplex\n            } : {}));\n            return {\n              data: {\n                path: cleanPath,\n                id: data.Id,\n                fullPath: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Uploads a file to an existing bucket.\n       *\n       * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"upload\",\n      value: function upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n          return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n      }\n      /**\n       * Upload a file with a token generated from `createSignedUploadUrl`.\n       * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param token The token generated from `createSignedUploadUrl`\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"uploadToSignedUrl\",\n      value: function uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n          var cleanPath = this._removeEmptyFolders(path);\n          var _path = this._getFinalPath(cleanPath);\n          var url = new URL(this.url + `/object/upload/sign/${_path}`);\n          url.searchParams.set('token', token);\n          try {\n            var body;\n            var options = Object.assign({\n              upsert: DEFAULT_FILE_OPTIONS.upsert\n            }, fileOptions);\n            var headers = Object.assign(Object.assign({}, this.headers), {\n              'x-upsert': String(options.upsert)\n            });\n            if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n              body = new FormData();\n              body.append('cacheControl', options.cacheControl);\n              body.append('', fileBody);\n            } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n              body = fileBody;\n              body.append('cacheControl', options.cacheControl);\n            } else {\n              body = fileBody;\n              headers['cache-control'] = `max-age=${options.cacheControl}`;\n              headers['content-type'] = options.contentType;\n            }\n            var data = yield (0, fetch_1.put)(this.fetch, url.toString(), body, {\n              headers\n            });\n            return {\n              data: {\n                path: cleanPath,\n                fullPath: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates a signed upload URL.\n       * Signed upload URLs can be used to upload files to the bucket without further authentication.\n       * They are valid for 2 hours.\n       * @param path The file path, including the current file name. For example `folder/image.png`.\n       * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n       */\n    }, {\n      key: \"createSignedUploadUrl\",\n      value: function createSignedUploadUrl(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var _path = this._getFinalPath(path);\n            var headers = Object.assign({}, this.headers);\n            if (options === null || options === void 0 ? void 0 : options.upsert) {\n              headers['x-upsert'] = 'true';\n            }\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n              headers\n            });\n            var url = new URL(this.url + data.url);\n            var token = url.searchParams.get('token');\n            if (!token) {\n              throw new errors_1.StorageError('No token returned by API');\n            }\n            return {\n              data: {\n                signedUrl: url.toString(),\n                path,\n                token\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Replaces an existing file at the specified path with a new one.\n       *\n       * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"update\",\n      value: function update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n          return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n      }\n      /**\n       * Moves an existing file to a new path in the same bucket.\n       *\n       * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n       * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n       * @param options The destination options.\n       */\n    }, {\n      key: \"move\",\n      value: function move(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/move`, {\n              bucketId: this.bucketId,\n              sourceKey: fromPath,\n              destinationKey: toPath,\n              destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n            }, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Copies an existing file to a new path in the same bucket.\n       *\n       * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n       * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n       * @param options The destination options.\n       */\n    }, {\n      key: \"copy\",\n      value: function copy(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/copy`, {\n              bucketId: this.bucketId,\n              sourceKey: fromPath,\n              destinationKey: toPath,\n              destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n            }, {\n              headers: this.headers\n            });\n            return {\n              data: {\n                path: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n       *\n       * @param path The file path, including the current file name. For example `folder/image.png`.\n       * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n       * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"createSignedUrl\",\n      value: function createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var _path = this._getFinalPath(path);\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n              expiresIn\n            }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n              transform: options.transform\n            } : {}), {\n              headers: this.headers\n            });\n            var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n            var signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n            data = {\n              signedUrl\n            };\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n       *\n       * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n       * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n       * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       */\n    }, {\n      key: \"createSignedUrls\",\n      value: function createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n              expiresIn,\n              paths\n            }, {\n              headers: this.headers\n            });\n            var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n            return {\n              data: data.map(datum => Object.assign(Object.assign({}, datum), {\n                signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n              })),\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n       *\n       * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"download\",\n      value: function download(path, options) {\n        var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        var renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n        var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        var queryString = transformationQuery ? `?${transformationQuery}` : '';\n        var _path = this._getFinalPath(path);\n        var downloadFn = () => (0, fetch_1.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        return new BlobDownloadBuilder_1.default(downloadFn, this.shouldThrowOnError);\n      }\n      /**\n       * Retrieves the details of an existing file.\n       * @param path\n       */\n    }, {\n      key: \"info\",\n      value: function info(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n          var _path = this._getFinalPath(path);\n          try {\n            var data = yield (0, fetch_1.get)(this.fetch, `${this.url}/object/info/${_path}`, {\n              headers: this.headers\n            });\n            return {\n              data: (0, helpers_1.recursiveToCamel)(data),\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Checks the existence of a file.\n       * @param path\n       */\n    }, {\n      key: \"exists\",\n      value: function exists(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n          var _path = this._getFinalPath(path);\n          try {\n            yield (0, fetch_1.head)(this.fetch, `${this.url}/object/${_path}`, {\n              headers: this.headers\n            });\n            return {\n              data: true,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error) && error instanceof errors_1.StorageUnknownError) {\n              var originalError = error.originalError;\n              if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n                return {\n                  data: false,\n                  error\n                };\n              }\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n       * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n       *\n       * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n       * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"getPublicUrl\",\n      value: function getPublicUrl(path, options) {\n        var _path = this._getFinalPath(path);\n        var _queryString = [];\n        var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n        if (downloadQueryParam !== '') {\n          _queryString.push(downloadQueryParam);\n        }\n        var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        var renderPath = wantsTransformation ? 'render/image' : 'object';\n        var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n          _queryString.push(transformationQuery);\n        }\n        var queryString = _queryString.join('&');\n        if (queryString !== '') {\n          queryString = `?${queryString}`;\n        }\n        return {\n          data: {\n            publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n          }\n        };\n      }\n      /**\n       * Deletes files within the same bucket\n       *\n       * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n       */\n    }, {\n      key: \"remove\",\n      value: function remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, {\n              prefixes: paths\n            }, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Get file metadata\n       * @param id the file id to retrieve metadata\n       */\n      // async getMetadata(\n      //   id: string\n      // ): Promise<\n      //   | {\n      //       data: Metadata\n      //       error: null\n      //     }\n      //   | {\n      //       data: null\n      //       error: StorageError\n      //     }\n      // > {\n      //   try {\n      //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n      //     return { data, error: null }\n      //   } catch (error) {\n      //     if (isStorageError(error)) {\n      //       return { data: null, error }\n      //     }\n      //     throw error\n      //   }\n      // }\n      /**\n       * Update file metadata\n       * @param id the file id to update metadata\n       * @param meta the new file metadata\n       */\n      // async updateMetadata(\n      //   id: string,\n      //   meta: Metadata\n      // ): Promise<\n      //   | {\n      //       data: Metadata\n      //       error: null\n      //     }\n      //   | {\n      //       data: null\n      //       error: StorageError\n      //     }\n      // > {\n      //   try {\n      //     const data = await post(\n      //       this.fetch,\n      //       `${this.url}/metadata/${id}`,\n      //       { ...meta },\n      //       { headers: this.headers }\n      //     )\n      //     return { data, error: null }\n      //   } catch (error) {\n      //     if (isStorageError(error)) {\n      //       return { data: null, error }\n      //     }\n      //     throw error\n      //   }\n      // }\n      /**\n       * Lists all the files and folders within a path of the bucket.\n       * @param path The folder path.\n       * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n       */\n    }, {\n      key: \"list\",\n      value: function list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n              prefix: path || ''\n            });\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n              headers: this.headers\n            }, parameters);\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * @experimental this method signature might change in the future\n       * @param options search options\n       * @param parameters\n       */\n    }, {\n      key: \"listV2\",\n      value: function listV2(options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var body = Object.assign({}, options);\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n              headers: this.headers\n            }, parameters);\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n    }, {\n      key: \"encodeMetadata\",\n      value: function encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n      }\n    }, {\n      key: \"toBase64\",\n      value: function toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n          return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n      }\n    }, {\n      key: \"_getFinalPath\",\n      value: function _getFinalPath(path) {\n        return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n      }\n    }, {\n      key: \"_removeEmptyFolders\",\n      value: function _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n      }\n    }, {\n      key: \"transformOptsToQueryString\",\n      value: function transformOptsToQueryString(transform) {\n        var params = [];\n        if (transform.width) {\n          params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n          params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n          params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n          params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n          params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n      }\n    }]);\n  }();\n  exports.default = StorageFileApi;\n});","lineCount":765,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[4,92,1,13,"default"],[4,99,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[5,86,1,13,"default"],[5,93,1,13],[6,2,2,0],[6,6,2,4,"__awaiter"],[6,15,2,13],[6,18,2,17],[6,22,2,21],[6,26,2,25],[6,30,2,29],[6,31,2,30,"__awaiter"],[6,40,2,39],[6,44,2,44],[6,54,2,54,"thisArg"],[6,61,2,61],[6,63,2,63,"_arguments"],[6,73,2,73],[6,75,2,75,"P"],[6,76,2,76],[6,78,2,78,"generator"],[6,87,2,87],[6,89,2,89],[7,4,3,4],[7,13,3,13,"adopt"],[7,18,3,18,"adopt"],[7,19,3,19,"value"],[7,24,3,24],[7,26,3,26],[8,6,3,28],[8,13,3,35,"value"],[8,18,3,40],[8,30,3,52,"P"],[8,31,3,53],[8,34,3,56,"value"],[8,39,3,61],[8,42,3,64],[8,46,3,68,"P"],[8,47,3,69],[8,48,3,70],[8,58,3,80,"resolve"],[8,65,3,87],[8,67,3,89],[9,8,3,91,"resolve"],[9,15,3,98],[9,16,3,99,"value"],[9,21,3,104],[9,22,3,105],[10,6,3,107],[10,7,3,108],[10,8,3,109],[11,4,3,111],[12,4,4,4],[12,11,4,11],[12,16,4,16,"P"],[12,17,4,17],[12,22,4,22,"P"],[12,23,4,23],[12,26,4,26,"Promise"],[12,33,4,33],[12,34,4,34],[12,36,4,36],[12,46,4,46,"resolve"],[12,53,4,53],[12,55,4,55,"reject"],[12,61,4,61],[12,63,4,63],[13,6,5,8],[13,15,5,17,"fulfilled"],[13,24,5,26,"fulfilled"],[13,25,5,27,"value"],[13,30,5,32],[13,32,5,34],[14,8,5,36],[14,12,5,40],[15,10,5,42,"step"],[15,14,5,46],[15,15,5,47,"generator"],[15,24,5,56],[15,25,5,57,"next"],[15,29,5,61],[15,30,5,62,"value"],[15,35,5,67],[15,36,5,68],[15,37,5,69],[16,8,5,71],[16,9,5,72],[16,10,5,73],[16,17,5,80,"e"],[16,18,5,81],[16,20,5,83],[17,10,5,85,"reject"],[17,16,5,91],[17,17,5,92,"e"],[17,18,5,93],[17,19,5,94],[18,8,5,96],[19,6,5,98],[20,6,6,8],[20,15,6,17,"rejected"],[20,23,6,25,"rejected"],[20,24,6,26,"value"],[20,29,6,31],[20,31,6,33],[21,8,6,35],[21,12,6,39],[22,10,6,41,"step"],[22,14,6,45],[22,15,6,46,"generator"],[22,24,6,55],[22,25,6,56],[22,32,6,63],[22,33,6,64],[22,34,6,65,"value"],[22,39,6,70],[22,40,6,71],[22,41,6,72],[23,8,6,74],[23,9,6,75],[23,10,6,76],[23,17,6,83,"e"],[23,18,6,84],[23,20,6,86],[24,10,6,88,"reject"],[24,16,6,94],[24,17,6,95,"e"],[24,18,6,96],[24,19,6,97],[25,8,6,99],[26,6,6,101],[27,6,7,8],[27,15,7,17,"step"],[27,19,7,21,"step"],[27,20,7,22,"result"],[27,26,7,28],[27,28,7,30],[28,8,7,32,"result"],[28,14,7,38],[28,15,7,39,"done"],[28,19,7,43],[28,22,7,46,"resolve"],[28,29,7,53],[28,30,7,54,"result"],[28,36,7,60],[28,37,7,61,"value"],[28,42,7,66],[28,43,7,67],[28,46,7,70,"adopt"],[28,51,7,75],[28,52,7,76,"result"],[28,58,7,82],[28,59,7,83,"value"],[28,64,7,88],[28,65,7,89],[28,66,7,90,"then"],[28,70,7,94],[28,71,7,95,"fulfilled"],[28,80,7,104],[28,82,7,106,"rejected"],[28,90,7,114],[28,91,7,115],[29,6,7,117],[30,6,8,8,"step"],[30,10,8,12],[30,11,8,13],[30,12,8,14,"generator"],[30,21,8,23],[30,24,8,26,"generator"],[30,33,8,35],[30,34,8,36,"apply"],[30,39,8,41],[30,40,8,42,"thisArg"],[30,47,8,49],[30,49,8,51,"_arguments"],[30,59,8,61],[30,63,8,65],[30,65,8,67],[30,66,8,68],[30,68,8,70,"next"],[30,72,8,74],[30,73,8,75],[30,74,8,76],[30,75,8,77],[31,4,9,4],[31,5,9,5],[31,6,9,6],[32,2,10,0],[32,3,10,1],[33,2,11,0],[33,6,11,4,"__importDefault"],[33,21,11,19],[33,24,11,23],[33,28,11,27],[33,32,11,31],[33,36,11,35],[33,37,11,36,"__importDefault"],[33,52,11,51],[33,56,11,56],[33,66,11,66,"mod"],[33,69,11,69],[33,71,11,71],[34,4,12,4],[34,11,12,12,"mod"],[34,14,12,15],[34,18,12,19,"mod"],[34,21,12,22],[34,22,12,23,"__esModule"],[34,32,12,33],[34,35,12,37,"mod"],[34,38,12,40],[34,41,12,43],[35,6,12,45],[35,15,12,54],[35,17,12,56,"mod"],[36,4,12,60],[36,5,12,61],[37,2,13,0],[37,3,13,1],[38,2,14,0,"Object"],[38,8,14,6],[38,9,14,7,"defineProperty"],[38,23,14,21],[38,24,14,22,"exports"],[38,31,14,29],[38,33,14,31],[38,45,14,43],[38,47,14,45],[39,4,14,47,"value"],[39,9,14,52],[39,11,14,54],[40,2,14,59],[40,3,14,60],[40,4,14,61],[41,2,15,0],[41,6,15,6,"errors_1"],[41,14,15,14],[41,17,15,17,"require"],[41,24,15,24],[41,25,15,24,"_dependencyMap"],[41,39,15,24],[41,59,15,40],[41,60,15,41],[42,2,16,0],[42,6,16,6,"fetch_1"],[42,13,16,13],[42,16,16,16,"require"],[42,23,16,23],[42,24,16,23,"_dependencyMap"],[42,38,16,23],[42,57,16,38],[42,58,16,39],[43,2,17,0],[43,6,17,6,"helpers_1"],[43,15,17,15],[43,18,17,18,"require"],[43,25,17,25],[43,26,17,25,"_dependencyMap"],[43,40,17,25],[43,61,17,42],[43,62,17,43],[44,2,18,0],[44,6,18,6,"BlobDownloadBuilder_1"],[44,27,18,27],[44,30,18,30,"__importDefault"],[44,45,18,45],[44,46,18,46,"require"],[44,53,18,53],[44,54,18,53,"_dependencyMap"],[44,68,18,53],[44,96,18,77],[44,97,18,78],[44,98,18,79],[45,2,19,0],[45,6,19,6,"DEFAULT_SEARCH_OPTIONS"],[45,28,19,28],[45,31,19,31],[46,4,20,4,"limit"],[46,9,20,9],[46,11,20,11],[46,14,20,14],[47,4,21,4,"offset"],[47,10,21,10],[47,12,21,12],[47,13,21,13],[48,4,22,4,"sortBy"],[48,10,22,10],[48,12,22,12],[49,6,23,8,"column"],[49,12,23,14],[49,14,23,16],[49,20,23,22],[50,6,24,8,"order"],[50,11,24,13],[50,13,24,15],[51,4,25,4],[52,2,26,0],[52,3,26,1],[53,2,27,0],[53,6,27,6,"DEFAULT_FILE_OPTIONS"],[53,26,27,26],[53,29,27,29],[54,4,28,4,"cacheControl"],[54,16,28,16],[54,18,28,18],[54,24,28,24],[55,4,29,4,"contentType"],[55,15,29,15],[55,17,29,17],[55,43,29,43],[56,4,30,4,"upsert"],[56,10,30,10],[56,12,30,12],[57,2,31,0],[57,3,31,1],[58,2,31,2],[58,6,32,6,"StorageFileApi"],[58,20,32,20],[59,4,33,4],[59,13,33,4,"StorageFileApi"],[59,28,33,16,"url"],[59,31,33,19],[59,33,33,52],[60,6,33,52],[60,10,33,21,"headers"],[60,17,33,28],[60,20,33,28,"arguments"],[60,29,33,28],[60,30,33,28,"length"],[60,36,33,28],[60,44,33,28,"arguments"],[60,53,33,28],[60,61,33,28,"undefined"],[60,70,33,28],[60,73,33,28,"arguments"],[60,82,33,28],[60,88,33,31],[60,89,33,32],[60,90,33,33],[61,6,33,33],[61,10,33,35,"bucketId"],[61,18,33,43],[61,21,33,43,"arguments"],[61,30,33,43],[61,31,33,43,"length"],[61,37,33,43],[61,44,33,43,"arguments"],[61,53,33,43],[61,59,33,43,"undefined"],[61,68,33,43],[62,6,33,43],[62,10,33,45,"fetch"],[62,15,33,50],[62,18,33,50,"arguments"],[62,27,33,50],[62,28,33,50,"length"],[62,34,33,50],[62,41,33,50,"arguments"],[62,50,33,50],[62,56,33,50,"undefined"],[62,65,33,50],[63,6,33,50,"_classCallCheck"],[63,21,33,50],[63,28,33,50,"StorageFileApi"],[63,42,33,50],[64,6,34,8],[64,10,34,12],[64,11,34,13,"shouldThrowOnError"],[64,29,34,31],[64,32,34,34],[64,37,34,39],[65,6,35,8],[65,10,35,12],[65,11,35,13,"url"],[65,14,35,16],[65,17,35,19,"url"],[65,20,35,22],[66,6,36,8],[66,10,36,12],[66,11,36,13,"headers"],[66,18,36,20],[66,21,36,23,"headers"],[66,28,36,30],[67,6,37,8],[67,10,37,12],[67,11,37,13,"bucketId"],[67,19,37,21],[67,22,37,24,"bucketId"],[67,30,37,32],[68,6,38,8],[68,10,38,12],[68,11,38,13,"fetch"],[68,16,38,18],[68,19,38,21],[68,20,38,22],[68,21,38,23],[68,23,38,25,"helpers_1"],[68,32,38,34],[68,33,38,35,"resolveFetch"],[68,45,38,47],[68,47,38,49,"fetch"],[68,52,38,54],[68,53,38,55],[69,4,39,4],[70,4,40,4],[71,0,41,0],[72,0,42,0],[73,4,40,4],[73,11,40,4,"_createClass"],[73,23,40,4],[73,24,40,4,"StorageFileApi"],[73,38,40,4],[74,6,40,4,"key"],[74,9,40,4],[75,6,40,4,"value"],[75,11,40,4],[75,13,43,4],[75,22,43,4,"throwOnError"],[75,34,43,16,"throwOnError"],[75,35,43,16],[75,37,43,19],[76,8,44,8],[76,12,44,12],[76,13,44,13,"shouldThrowOnError"],[76,31,44,31],[76,34,44,34],[76,38,44,38],[77,8,45,8],[77,15,45,15],[77,19,45,19],[78,6,46,4],[79,6,47,4],[80,0,48,0],[81,0,49,0],[82,0,50,0],[83,0,51,0],[84,0,52,0],[85,0,53,0],[86,4,47,4],[87,6,47,4,"key"],[87,9,47,4],[88,6,47,4,"value"],[88,11,47,4],[88,13,54,4],[88,22,54,4,"uploadOrUpdate"],[88,36,54,18,"uploadOrUpdate"],[88,37,54,19,"method"],[88,43,54,25],[88,45,54,27,"path"],[88,49,54,31],[88,51,54,33,"fileBody"],[88,59,54,41],[88,61,54,43,"fileOptions"],[88,72,54,54],[88,74,54,56],[89,8,55,8],[89,15,55,15,"__awaiter"],[89,24,55,24],[89,25,55,25],[89,29,55,29],[89,31,55,31],[89,36,55,36],[89,37,55,37],[89,39,55,39],[89,44,55,44],[89,45,55,45],[89,47,55,47],[89,60,55,60],[90,10,56,12],[90,14,56,16],[91,12,57,16],[91,16,57,20,"body"],[91,20,57,24],[92,12,58,16],[92,16,58,22,"options"],[92,23,58,29],[92,26,58,32,"Object"],[92,32,58,38],[92,33,58,39,"assign"],[92,39,58,45],[92,40,58,46,"Object"],[92,46,58,52],[92,47,58,53,"assign"],[92,53,58,59],[92,54,58,60],[92,55,58,61],[92,56,58,62],[92,58,58,64,"DEFAULT_FILE_OPTIONS"],[92,78,58,84],[92,79,58,85],[92,81,58,87,"fileOptions"],[92,92,58,98],[92,93,58,99],[93,12,59,16],[93,16,59,20,"headers"],[93,23,59,27],[93,26,59,30,"Object"],[93,32,59,36],[93,33,59,37,"assign"],[93,39,59,43],[93,40,59,44,"Object"],[93,46,59,50],[93,47,59,51,"assign"],[93,53,59,57],[93,54,59,58],[93,55,59,59],[93,56,59,60],[93,58,59,62],[93,62,59,66],[93,63,59,67,"headers"],[93,70,59,74],[93,71,59,75],[93,73,59,78,"method"],[93,79,59,84],[93,84,59,89],[93,90,59,95],[93,94,59,99],[94,14,59,101],[94,24,59,111],[94,26,59,113,"String"],[94,32,59,119],[94,33,59,120,"options"],[94,40,59,127],[94,41,59,128,"upsert"],[94,47,59,134],[95,12,59,136],[95,13,59,138],[95,14,59,139],[96,12,60,16],[96,16,60,22,"metadata"],[96,24,60,30],[96,27,60,33,"options"],[96,34,60,40],[96,35,60,41,"metadata"],[96,43,60,49],[97,12,61,16],[97,16,61,20],[97,23,61,27,"Blob"],[97,27,61,31],[97,32,61,36],[97,43,61,47],[97,47,61,51,"fileBody"],[97,55,61,59],[97,67,61,71,"Blob"],[97,71,61,75],[97,73,61,77],[98,14,62,20,"body"],[98,18,62,24],[98,21,62,27],[98,25,62,31,"FormData"],[98,33,62,39],[98,34,62,40],[98,35,62,41],[99,14,63,20,"body"],[99,18,63,24],[99,19,63,25,"append"],[99,25,63,31],[99,26,63,32],[99,40,63,46],[99,42,63,48,"options"],[99,49,63,55],[99,50,63,56,"cacheControl"],[99,62,63,68],[99,63,63,69],[100,14,64,20],[100,18,64,24,"metadata"],[100,26,64,32],[100,28,64,34],[101,16,65,24,"body"],[101,20,65,28],[101,21,65,29,"append"],[101,27,65,35],[101,28,65,36],[101,38,65,46],[101,40,65,48],[101,44,65,52],[101,45,65,53,"encodeMetadata"],[101,59,65,67],[101,60,65,68,"metadata"],[101,68,65,76],[101,69,65,77],[101,70,65,78],[102,14,66,20],[103,14,67,20,"body"],[103,18,67,24],[103,19,67,25,"append"],[103,25,67,31],[103,26,67,32],[103,28,67,34],[103,30,67,36,"fileBody"],[103,38,67,44],[103,39,67,45],[104,12,68,16],[104,13,68,17],[104,19,69,21],[104,23,69,25],[104,30,69,32,"FormData"],[104,38,69,40],[104,43,69,45],[104,54,69,56],[104,58,69,60,"fileBody"],[104,66,69,68],[104,78,69,80,"FormData"],[104,86,69,88],[104,88,69,90],[105,14,70,20,"body"],[105,18,70,24],[105,21,70,27,"fileBody"],[105,29,70,35],[106,14,71,20,"body"],[106,18,71,24],[106,19,71,25,"append"],[106,25,71,31],[106,26,71,32],[106,40,71,46],[106,42,71,48,"options"],[106,49,71,55],[106,50,71,56,"cacheControl"],[106,62,71,68],[106,63,71,69],[107,14,72,20],[107,18,72,24,"metadata"],[107,26,72,32],[107,28,72,34],[108,16,73,24,"body"],[108,20,73,28],[108,21,73,29,"append"],[108,27,73,35],[108,28,73,36],[108,38,73,46],[108,40,73,48],[108,44,73,52],[108,45,73,53,"encodeMetadata"],[108,59,73,67],[108,60,73,68,"metadata"],[108,68,73,76],[108,69,73,77],[108,70,73,78],[109,14,74,20],[110,12,75,16],[110,13,75,17],[110,19,76,21],[111,14,77,20,"body"],[111,18,77,24],[111,21,77,27,"fileBody"],[111,29,77,35],[112,14,78,20,"headers"],[112,21,78,27],[112,22,78,28],[112,37,78,43],[112,38,78,44],[112,41,78,47],[112,52,78,58,"options"],[112,59,78,65],[112,60,78,66,"cacheControl"],[112,72,78,78],[112,74,78,80],[113,14,79,20,"headers"],[113,21,79,27],[113,22,79,28],[113,36,79,42],[113,37,79,43],[113,40,79,46,"options"],[113,47,79,53],[113,48,79,54,"contentType"],[113,59,79,65],[114,14,80,20],[114,18,80,24,"metadata"],[114,26,80,32],[114,28,80,34],[115,16,81,24,"headers"],[115,23,81,31],[115,24,81,32],[115,36,81,44],[115,37,81,45],[115,40,81,48],[115,44,81,52],[115,45,81,53,"toBase64"],[115,53,81,61],[115,54,81,62],[115,58,81,66],[115,59,81,67,"encodeMetadata"],[115,73,81,81],[115,74,81,82,"metadata"],[115,82,81,90],[115,83,81,91],[115,84,81,92],[116,14,82,20],[117,12,83,16],[118,12,84,16],[118,16,84,20,"fileOptions"],[118,27,84,31],[118,32,84,36],[118,36,84,40],[118,40,84,44,"fileOptions"],[118,51,84,55],[118,56,84,60],[118,61,84,65],[118,62,84,66],[118,65,84,69],[118,70,84,74],[118,71,84,75],[118,74,84,78,"fileOptions"],[118,85,84,89],[118,86,84,90,"headers"],[118,93,84,97],[118,95,84,99],[119,14,85,20,"headers"],[119,21,85,27],[119,24,85,30,"Object"],[119,30,85,36],[119,31,85,37,"assign"],[119,37,85,43],[119,38,85,44,"Object"],[119,44,85,50],[119,45,85,51,"assign"],[119,51,85,57],[119,52,85,58],[119,53,85,59],[119,54,85,60],[119,56,85,62,"headers"],[119,63,85,69],[119,64,85,70],[119,66,85,72,"fileOptions"],[119,77,85,83],[119,78,85,84,"headers"],[119,85,85,91],[119,86,85,92],[120,12,86,16],[121,12,87,16],[121,16,87,22,"cleanPath"],[121,25,87,31],[121,28,87,34],[121,32,87,38],[121,33,87,39,"_removeEmptyFolders"],[121,52,87,58],[121,53,87,59,"path"],[121,57,87,63],[121,58,87,64],[122,12,88,16],[122,16,88,22,"_path"],[122,21,88,27],[122,24,88,30],[122,28,88,34],[122,29,88,35,"_getFinalPath"],[122,42,88,48],[122,43,88,49,"cleanPath"],[122,52,88,58],[122,53,88,59],[123,12,89,16],[123,16,89,22,"data"],[123,20,89,26],[123,23,89,29],[123,29,89,35],[123,30,89,36,"method"],[123,36,89,42],[123,40,89,46],[123,45,89,51],[123,48,89,54,"fetch_1"],[123,55,89,61],[123,56,89,62,"put"],[123,59,89,65],[123,62,89,68,"fetch_1"],[123,69,89,75],[123,70,89,76,"post"],[123,74,89,80],[123,76,89,82],[123,80,89,86],[123,81,89,87,"fetch"],[123,86,89,92],[123,88,89,94],[123,91,89,97],[123,95,89,101],[123,96,89,102,"url"],[123,99,89,105],[123,110,89,116,"_path"],[123,115,89,121],[123,117,89,123],[123,119,89,125,"body"],[123,123,89,129],[123,125,89,131,"Object"],[123,131,89,137],[123,132,89,138,"assign"],[123,138,89,144],[123,139,89,145],[124,14,89,147,"headers"],[125,12,89,155],[125,13,89,156],[125,15,89,159],[125,16,89,160,"options"],[125,23,89,167],[125,28,89,172],[125,32,89,176],[125,36,89,180,"options"],[125,43,89,187],[125,48,89,192],[125,53,89,197],[125,54,89,198],[125,57,89,201],[125,62,89,206],[125,63,89,207],[125,66,89,210,"options"],[125,73,89,217],[125,74,89,218,"duplex"],[125,80,89,224],[125,84,89,228],[126,14,89,230,"duplex"],[126,20,89,236],[126,22,89,238,"options"],[126,29,89,245],[126,30,89,246,"duplex"],[127,12,89,253],[127,13,89,254],[127,16,89,257],[127,17,89,258],[127,18,89,260],[127,19,89,261],[127,20,89,262],[128,12,90,16],[128,19,90,23],[129,14,91,20,"data"],[129,18,91,24],[129,20,91,26],[130,16,91,28,"path"],[130,20,91,32],[130,22,91,34,"cleanPath"],[130,31,91,43],[131,16,91,45,"id"],[131,18,91,47],[131,20,91,49,"data"],[131,24,91,53],[131,25,91,54,"Id"],[131,27,91,56],[132,16,91,58,"fullPath"],[132,24,91,66],[132,26,91,68,"data"],[132,30,91,72],[132,31,91,73,"Key"],[133,14,91,77],[133,15,91,78],[134,14,92,20,"error"],[134,19,92,25],[134,21,92,27],[135,12,93,16],[135,13,93,17],[136,10,94,12],[136,11,94,13],[136,12,95,12],[136,19,95,19,"error"],[136,24,95,24],[136,26,95,26],[137,12,96,16],[137,16,96,20],[137,20,96,24],[137,21,96,25,"shouldThrowOnError"],[137,39,96,43],[137,41,96,45],[138,14,97,20],[138,20,97,26,"error"],[138,25,97,31],[139,12,98,16],[140,12,99,16],[140,16,99,20],[140,17,99,21],[140,18,99,22],[140,20,99,24,"errors_1"],[140,28,99,32],[140,29,99,33,"isStorageError"],[140,43,99,47],[140,45,99,49,"error"],[140,50,99,54],[140,51,99,55],[140,53,99,57],[141,14,100,20],[141,21,100,27],[142,16,100,29,"data"],[142,20,100,33],[142,22,100,35],[142,26,100,39],[143,16,100,41,"error"],[144,14,100,47],[144,15,100,48],[145,12,101,16],[146,12,102,16],[146,18,102,22,"error"],[146,23,102,27],[147,10,103,12],[148,8,104,8],[148,9,104,9],[148,10,104,10],[149,6,105,4],[150,6,106,4],[151,0,107,0],[152,0,108,0],[153,0,109,0],[154,0,110,0],[155,0,111,0],[156,4,106,4],[157,6,106,4,"key"],[157,9,106,4],[158,6,106,4,"value"],[158,11,106,4],[158,13,112,4],[158,22,112,4,"upload"],[158,28,112,10,"upload"],[158,29,112,11,"path"],[158,33,112,15],[158,35,112,17,"fileBody"],[158,43,112,25],[158,45,112,27,"fileOptions"],[158,56,112,38],[158,58,112,40],[159,8,113,8],[159,15,113,15,"__awaiter"],[159,24,113,24],[159,25,113,25],[159,29,113,29],[159,31,113,31],[159,36,113,36],[159,37,113,37],[159,39,113,39],[159,44,113,44],[159,45,113,45],[159,47,113,47],[159,60,113,60],[160,10,114,12],[160,17,114,19],[160,21,114,23],[160,22,114,24,"uploadOrUpdate"],[160,36,114,38],[160,37,114,39],[160,43,114,45],[160,45,114,47,"path"],[160,49,114,51],[160,51,114,53,"fileBody"],[160,59,114,61],[160,61,114,63,"fileOptions"],[160,72,114,74],[160,73,114,75],[161,8,115,8],[161,9,115,9],[161,10,115,10],[162,6,116,4],[163,6,117,4],[164,0,118,0],[165,0,119,0],[166,0,120,0],[167,0,121,0],[168,0,122,0],[169,4,117,4],[170,6,117,4,"key"],[170,9,117,4],[171,6,117,4,"value"],[171,11,117,4],[171,13,123,4],[171,22,123,4,"uploadToSignedUrl"],[171,39,123,21,"uploadToSignedUrl"],[171,40,123,22,"path"],[171,44,123,26],[171,46,123,28,"token"],[171,51,123,33],[171,53,123,35,"fileBody"],[171,61,123,43],[171,63,123,45,"fileOptions"],[171,74,123,56],[171,76,123,58],[172,8,124,8],[172,15,124,15,"__awaiter"],[172,24,124,24],[172,25,124,25],[172,29,124,29],[172,31,124,31],[172,36,124,36],[172,37,124,37],[172,39,124,39],[172,44,124,44],[172,45,124,45],[172,47,124,47],[172,60,124,60],[173,10,125,12],[173,14,125,18,"cleanPath"],[173,23,125,27],[173,26,125,30],[173,30,125,34],[173,31,125,35,"_removeEmptyFolders"],[173,50,125,54],[173,51,125,55,"path"],[173,55,125,59],[173,56,125,60],[174,10,126,12],[174,14,126,18,"_path"],[174,19,126,23],[174,22,126,26],[174,26,126,30],[174,27,126,31,"_getFinalPath"],[174,40,126,44],[174,41,126,45,"cleanPath"],[174,50,126,54],[174,51,126,55],[175,10,127,12],[175,14,127,18,"url"],[175,17,127,21],[175,20,127,24],[175,24,127,28,"URL"],[175,27,127,31],[175,28,127,32],[175,32,127,36],[175,33,127,37,"url"],[175,36,127,40],[175,39,127,43],[175,62,127,66,"_path"],[175,67,127,71],[175,69,127,73],[175,70,127,74],[176,10,128,12,"url"],[176,13,128,15],[176,14,128,16,"searchParams"],[176,26,128,28],[176,27,128,29,"set"],[176,30,128,32],[176,31,128,33],[176,38,128,40],[176,40,128,42,"token"],[176,45,128,47],[176,46,128,48],[177,10,129,12],[177,14,129,16],[178,12,130,16],[178,16,130,20,"body"],[178,20,130,24],[179,12,131,16],[179,16,131,22,"options"],[179,23,131,29],[179,26,131,32,"Object"],[179,32,131,38],[179,33,131,39,"assign"],[179,39,131,45],[179,40,131,46],[180,14,131,48,"upsert"],[180,20,131,54],[180,22,131,56,"DEFAULT_FILE_OPTIONS"],[180,42,131,76],[180,43,131,77,"upsert"],[181,12,131,84],[181,13,131,85],[181,15,131,87,"fileOptions"],[181,26,131,98],[181,27,131,99],[182,12,132,16],[182,16,132,22,"headers"],[182,23,132,29],[182,26,132,32,"Object"],[182,32,132,38],[182,33,132,39,"assign"],[182,39,132,45],[182,40,132,46,"Object"],[182,46,132,52],[182,47,132,53,"assign"],[182,53,132,59],[182,54,132,60],[182,55,132,61],[182,56,132,62],[182,58,132,64],[182,62,132,68],[182,63,132,69,"headers"],[182,70,132,76],[182,71,132,77],[182,73,132,79],[183,14,132,81],[183,24,132,91],[183,26,132,93,"String"],[183,32,132,99],[183,33,132,100,"options"],[183,40,132,107],[183,41,132,108,"upsert"],[183,47,132,114],[184,12,132,116],[184,13,132,117],[184,14,132,118],[185,12,133,16],[185,16,133,20],[185,23,133,27,"Blob"],[185,27,133,31],[185,32,133,36],[185,43,133,47],[185,47,133,51,"fileBody"],[185,55,133,59],[185,67,133,71,"Blob"],[185,71,133,75],[185,73,133,77],[186,14,134,20,"body"],[186,18,134,24],[186,21,134,27],[186,25,134,31,"FormData"],[186,33,134,39],[186,34,134,40],[186,35,134,41],[187,14,135,20,"body"],[187,18,135,24],[187,19,135,25,"append"],[187,25,135,31],[187,26,135,32],[187,40,135,46],[187,42,135,48,"options"],[187,49,135,55],[187,50,135,56,"cacheControl"],[187,62,135,68],[187,63,135,69],[188,14,136,20,"body"],[188,18,136,24],[188,19,136,25,"append"],[188,25,136,31],[188,26,136,32],[188,28,136,34],[188,30,136,36,"fileBody"],[188,38,136,44],[188,39,136,45],[189,12,137,16],[189,13,137,17],[189,19,138,21],[189,23,138,25],[189,30,138,32,"FormData"],[189,38,138,40],[189,43,138,45],[189,54,138,56],[189,58,138,60,"fileBody"],[189,66,138,68],[189,78,138,80,"FormData"],[189,86,138,88],[189,88,138,90],[190,14,139,20,"body"],[190,18,139,24],[190,21,139,27,"fileBody"],[190,29,139,35],[191,14,140,20,"body"],[191,18,140,24],[191,19,140,25,"append"],[191,25,140,31],[191,26,140,32],[191,40,140,46],[191,42,140,48,"options"],[191,49,140,55],[191,50,140,56,"cacheControl"],[191,62,140,68],[191,63,140,69],[192,12,141,16],[192,13,141,17],[192,19,142,21],[193,14,143,20,"body"],[193,18,143,24],[193,21,143,27,"fileBody"],[193,29,143,35],[194,14,144,20,"headers"],[194,21,144,27],[194,22,144,28],[194,37,144,43],[194,38,144,44],[194,41,144,47],[194,52,144,58,"options"],[194,59,144,65],[194,60,144,66,"cacheControl"],[194,72,144,78],[194,74,144,80],[195,14,145,20,"headers"],[195,21,145,27],[195,22,145,28],[195,36,145,42],[195,37,145,43],[195,40,145,46,"options"],[195,47,145,53],[195,48,145,54,"contentType"],[195,59,145,65],[196,12,146,16],[197,12,147,16],[197,16,147,22,"data"],[197,20,147,26],[197,23,147,29],[197,29,147,35],[197,30,147,36],[197,31,147,37],[197,33,147,39,"fetch_1"],[197,40,147,46],[197,41,147,47,"put"],[197,44,147,50],[197,46,147,52],[197,50,147,56],[197,51,147,57,"fetch"],[197,56,147,62],[197,58,147,64,"url"],[197,61,147,67],[197,62,147,68,"toString"],[197,70,147,76],[197,71,147,77],[197,72,147,78],[197,74,147,80,"body"],[197,78,147,84],[197,80,147,86],[198,14,147,88,"headers"],[199,12,147,96],[199,13,147,97],[199,14,147,98],[200,12,148,16],[200,19,148,23],[201,14,149,20,"data"],[201,18,149,24],[201,20,149,26],[202,16,149,28,"path"],[202,20,149,32],[202,22,149,34,"cleanPath"],[202,31,149,43],[203,16,149,45,"fullPath"],[203,24,149,53],[203,26,149,55,"data"],[203,30,149,59],[203,31,149,60,"Key"],[204,14,149,64],[204,15,149,65],[205,14,150,20,"error"],[205,19,150,25],[205,21,150,27],[206,12,151,16],[206,13,151,17],[207,10,152,12],[207,11,152,13],[207,12,153,12],[207,19,153,19,"error"],[207,24,153,24],[207,26,153,26],[208,12,154,16],[208,16,154,20],[208,20,154,24],[208,21,154,25,"shouldThrowOnError"],[208,39,154,43],[208,41,154,45],[209,14,155,20],[209,20,155,26,"error"],[209,25,155,31],[210,12,156,16],[211,12,157,16],[211,16,157,20],[211,17,157,21],[211,18,157,22],[211,20,157,24,"errors_1"],[211,28,157,32],[211,29,157,33,"isStorageError"],[211,43,157,47],[211,45,157,49,"error"],[211,50,157,54],[211,51,157,55],[211,53,157,57],[212,14,158,20],[212,21,158,27],[213,16,158,29,"data"],[213,20,158,33],[213,22,158,35],[213,26,158,39],[214,16,158,41,"error"],[215,14,158,47],[215,15,158,48],[216,12,159,16],[217,12,160,16],[217,18,160,22,"error"],[217,23,160,27],[218,10,161,12],[219,8,162,8],[219,9,162,9],[219,10,162,10],[220,6,163,4],[221,6,164,4],[222,0,165,0],[223,0,166,0],[224,0,167,0],[225,0,168,0],[226,0,169,0],[227,0,170,0],[228,4,164,4],[229,6,164,4,"key"],[229,9,164,4],[230,6,164,4,"value"],[230,11,164,4],[230,13,171,4],[230,22,171,4,"createSignedUploadUrl"],[230,43,171,25,"createSignedUploadUrl"],[230,44,171,26,"path"],[230,48,171,30],[230,50,171,32,"options"],[230,57,171,39],[230,59,171,41],[231,8,172,8],[231,15,172,15,"__awaiter"],[231,24,172,24],[231,25,172,25],[231,29,172,29],[231,31,172,31],[231,36,172,36],[231,37,172,37],[231,39,172,39],[231,44,172,44],[231,45,172,45],[231,47,172,47],[231,60,172,60],[232,10,173,12],[232,14,173,16],[233,12,174,16],[233,16,174,20,"_path"],[233,21,174,25],[233,24,174,28],[233,28,174,32],[233,29,174,33,"_getFinalPath"],[233,42,174,46],[233,43,174,47,"path"],[233,47,174,51],[233,48,174,52],[234,12,175,16],[234,16,175,22,"headers"],[234,23,175,29],[234,26,175,32,"Object"],[234,32,175,38],[234,33,175,39,"assign"],[234,39,175,45],[234,40,175,46],[234,41,175,47],[234,42,175,48],[234,44,175,50],[234,48,175,54],[234,49,175,55,"headers"],[234,56,175,62],[234,57,175,63],[235,12,176,16],[235,16,176,20,"options"],[235,23,176,27],[235,28,176,32],[235,32,176,36],[235,36,176,40,"options"],[235,43,176,47],[235,48,176,52],[235,53,176,57],[235,54,176,58],[235,57,176,61],[235,62,176,66],[235,63,176,67],[235,66,176,70,"options"],[235,73,176,77],[235,74,176,78,"upsert"],[235,80,176,84],[235,82,176,86],[236,14,177,20,"headers"],[236,21,177,27],[236,22,177,28],[236,32,177,38],[236,33,177,39],[236,36,177,42],[236,42,177,48],[237,12,178,16],[238,12,179,16],[238,16,179,22,"data"],[238,20,179,26],[238,23,179,29],[238,29,179,35],[238,30,179,36],[238,31,179,37],[238,33,179,39,"fetch_1"],[238,40,179,46],[238,41,179,47,"post"],[238,45,179,51],[238,47,179,53],[238,51,179,57],[238,52,179,58,"fetch"],[238,57,179,63],[238,59,179,65],[238,62,179,68],[238,66,179,72],[238,67,179,73,"url"],[238,70,179,76],[238,93,179,99,"_path"],[238,98,179,104],[238,100,179,106],[238,102,179,108],[238,103,179,109],[238,104,179,110],[238,106,179,112],[239,14,179,114,"headers"],[240,12,179,122],[240,13,179,123],[240,14,179,124],[241,12,180,16],[241,16,180,22,"url"],[241,19,180,25],[241,22,180,28],[241,26,180,32,"URL"],[241,29,180,35],[241,30,180,36],[241,34,180,40],[241,35,180,41,"url"],[241,38,180,44],[241,41,180,47,"data"],[241,45,180,51],[241,46,180,52,"url"],[241,49,180,55],[241,50,180,56],[242,12,181,16],[242,16,181,22,"token"],[242,21,181,27],[242,24,181,30,"url"],[242,27,181,33],[242,28,181,34,"searchParams"],[242,40,181,46],[242,41,181,47,"get"],[242,44,181,50],[242,45,181,51],[242,52,181,58],[242,53,181,59],[243,12,182,16],[243,16,182,20],[243,17,182,21,"token"],[243,22,182,26],[243,24,182,28],[244,14,183,20],[244,20,183,26],[244,24,183,30,"errors_1"],[244,32,183,38],[244,33,183,39,"StorageError"],[244,45,183,51],[244,46,183,52],[244,72,183,78],[244,73,183,79],[245,12,184,16],[246,12,185,16],[246,19,185,23],[247,14,185,25,"data"],[247,18,185,29],[247,20,185,31],[248,16,185,33,"signedUrl"],[248,25,185,42],[248,27,185,44,"url"],[248,30,185,47],[248,31,185,48,"toString"],[248,39,185,56],[248,40,185,57],[248,41,185,58],[249,16,185,60,"path"],[249,20,185,64],[250,16,185,66,"token"],[251,14,185,72],[251,15,185,73],[252,14,185,75,"error"],[252,19,185,80],[252,21,185,82],[253,12,185,87],[253,13,185,88],[254,10,186,12],[254,11,186,13],[254,12,187,12],[254,19,187,19,"error"],[254,24,187,24],[254,26,187,26],[255,12,188,16],[255,16,188,20],[255,20,188,24],[255,21,188,25,"shouldThrowOnError"],[255,39,188,43],[255,41,188,45],[256,14,189,20],[256,20,189,26,"error"],[256,25,189,31],[257,12,190,16],[258,12,191,16],[258,16,191,20],[258,17,191,21],[258,18,191,22],[258,20,191,24,"errors_1"],[258,28,191,32],[258,29,191,33,"isStorageError"],[258,43,191,47],[258,45,191,49,"error"],[258,50,191,54],[258,51,191,55],[258,53,191,57],[259,14,192,20],[259,21,192,27],[260,16,192,29,"data"],[260,20,192,33],[260,22,192,35],[260,26,192,39],[261,16,192,41,"error"],[262,14,192,47],[262,15,192,48],[263,12,193,16],[264,12,194,16],[264,18,194,22,"error"],[264,23,194,27],[265,10,195,12],[266,8,196,8],[266,9,196,9],[266,10,196,10],[267,6,197,4],[268,6,198,4],[269,0,199,0],[270,0,200,0],[271,0,201,0],[272,0,202,0],[273,0,203,0],[274,4,198,4],[275,6,198,4,"key"],[275,9,198,4],[276,6,198,4,"value"],[276,11,198,4],[276,13,204,4],[276,22,204,4,"update"],[276,28,204,10,"update"],[276,29,204,11,"path"],[276,33,204,15],[276,35,204,17,"fileBody"],[276,43,204,25],[276,45,204,27,"fileOptions"],[276,56,204,38],[276,58,204,40],[277,8,205,8],[277,15,205,15,"__awaiter"],[277,24,205,24],[277,25,205,25],[277,29,205,29],[277,31,205,31],[277,36,205,36],[277,37,205,37],[277,39,205,39],[277,44,205,44],[277,45,205,45],[277,47,205,47],[277,60,205,60],[278,10,206,12],[278,17,206,19],[278,21,206,23],[278,22,206,24,"uploadOrUpdate"],[278,36,206,38],[278,37,206,39],[278,42,206,44],[278,44,206,46,"path"],[278,48,206,50],[278,50,206,52,"fileBody"],[278,58,206,60],[278,60,206,62,"fileOptions"],[278,71,206,73],[278,72,206,74],[279,8,207,8],[279,9,207,9],[279,10,207,10],[280,6,208,4],[281,6,209,4],[282,0,210,0],[283,0,211,0],[284,0,212,0],[285,0,213,0],[286,0,214,0],[287,0,215,0],[288,4,209,4],[289,6,209,4,"key"],[289,9,209,4],[290,6,209,4,"value"],[290,11,209,4],[290,13,216,4],[290,22,216,4,"move"],[290,26,216,8,"move"],[290,27,216,9,"fromPath"],[290,35,216,17],[290,37,216,19,"toPath"],[290,43,216,25],[290,45,216,27,"options"],[290,52,216,34],[290,54,216,36],[291,8,217,8],[291,15,217,15,"__awaiter"],[291,24,217,24],[291,25,217,25],[291,29,217,29],[291,31,217,31],[291,36,217,36],[291,37,217,37],[291,39,217,39],[291,44,217,44],[291,45,217,45],[291,47,217,47],[291,60,217,60],[292,10,218,12],[292,14,218,16],[293,12,219,16],[293,16,219,22,"data"],[293,20,219,26],[293,23,219,29],[293,29,219,35],[293,30,219,36],[293,31,219,37],[293,33,219,39,"fetch_1"],[293,40,219,46],[293,41,219,47,"post"],[293,45,219,51],[293,47,219,53],[293,51,219,57],[293,52,219,58,"fetch"],[293,57,219,63],[293,59,219,65],[293,62,219,68],[293,66,219,72],[293,67,219,73,"url"],[293,70,219,76],[293,84,219,90],[293,86,219,92],[294,14,220,20,"bucketId"],[294,22,220,28],[294,24,220,30],[294,28,220,34],[294,29,220,35,"bucketId"],[294,37,220,43],[295,14,221,20,"sourceKey"],[295,23,221,29],[295,25,221,31,"fromPath"],[295,33,221,39],[296,14,222,20,"destinationKey"],[296,28,222,34],[296,30,222,36,"toPath"],[296,36,222,42],[297,14,223,20,"destinationBucket"],[297,31,223,37],[297,33,223,39,"options"],[297,40,223,46],[297,45,223,51],[297,49,223,55],[297,53,223,59,"options"],[297,60,223,66],[297,65,223,71],[297,70,223,76],[297,71,223,77],[297,74,223,80],[297,79,223,85],[297,80,223,86],[297,83,223,89,"options"],[297,90,223,96],[297,91,223,97,"destinationBucket"],[298,12,224,16],[298,13,224,17],[298,15,224,19],[299,14,224,21,"headers"],[299,21,224,28],[299,23,224,30],[299,27,224,34],[299,28,224,35,"headers"],[300,12,224,43],[300,13,224,44],[300,14,224,45],[301,12,225,16],[301,19,225,23],[302,14,225,25,"data"],[302,18,225,29],[303,14,225,31,"error"],[303,19,225,36],[303,21,225,38],[304,12,225,43],[304,13,225,44],[305,10,226,12],[305,11,226,13],[305,12,227,12],[305,19,227,19,"error"],[305,24,227,24],[305,26,227,26],[306,12,228,16],[306,16,228,20],[306,20,228,24],[306,21,228,25,"shouldThrowOnError"],[306,39,228,43],[306,41,228,45],[307,14,229,20],[307,20,229,26,"error"],[307,25,229,31],[308,12,230,16],[309,12,231,16],[309,16,231,20],[309,17,231,21],[309,18,231,22],[309,20,231,24,"errors_1"],[309,28,231,32],[309,29,231,33,"isStorageError"],[309,43,231,47],[309,45,231,49,"error"],[309,50,231,54],[309,51,231,55],[309,53,231,57],[310,14,232,20],[310,21,232,27],[311,16,232,29,"data"],[311,20,232,33],[311,22,232,35],[311,26,232,39],[312,16,232,41,"error"],[313,14,232,47],[313,15,232,48],[314,12,233,16],[315,12,234,16],[315,18,234,22,"error"],[315,23,234,27],[316,10,235,12],[317,8,236,8],[317,9,236,9],[317,10,236,10],[318,6,237,4],[319,6,238,4],[320,0,239,0],[321,0,240,0],[322,0,241,0],[323,0,242,0],[324,0,243,0],[325,0,244,0],[326,4,238,4],[327,6,238,4,"key"],[327,9,238,4],[328,6,238,4,"value"],[328,11,238,4],[328,13,245,4],[328,22,245,4,"copy"],[328,26,245,8,"copy"],[328,27,245,9,"fromPath"],[328,35,245,17],[328,37,245,19,"toPath"],[328,43,245,25],[328,45,245,27,"options"],[328,52,245,34],[328,54,245,36],[329,8,246,8],[329,15,246,15,"__awaiter"],[329,24,246,24],[329,25,246,25],[329,29,246,29],[329,31,246,31],[329,36,246,36],[329,37,246,37],[329,39,246,39],[329,44,246,44],[329,45,246,45],[329,47,246,47],[329,60,246,60],[330,10,247,12],[330,14,247,16],[331,12,248,16],[331,16,248,22,"data"],[331,20,248,26],[331,23,248,29],[331,29,248,35],[331,30,248,36],[331,31,248,37],[331,33,248,39,"fetch_1"],[331,40,248,46],[331,41,248,47,"post"],[331,45,248,51],[331,47,248,53],[331,51,248,57],[331,52,248,58,"fetch"],[331,57,248,63],[331,59,248,65],[331,62,248,68],[331,66,248,72],[331,67,248,73,"url"],[331,70,248,76],[331,84,248,90],[331,86,248,92],[332,14,249,20,"bucketId"],[332,22,249,28],[332,24,249,30],[332,28,249,34],[332,29,249,35,"bucketId"],[332,37,249,43],[333,14,250,20,"sourceKey"],[333,23,250,29],[333,25,250,31,"fromPath"],[333,33,250,39],[334,14,251,20,"destinationKey"],[334,28,251,34],[334,30,251,36,"toPath"],[334,36,251,42],[335,14,252,20,"destinationBucket"],[335,31,252,37],[335,33,252,39,"options"],[335,40,252,46],[335,45,252,51],[335,49,252,55],[335,53,252,59,"options"],[335,60,252,66],[335,65,252,71],[335,70,252,76],[335,71,252,77],[335,74,252,80],[335,79,252,85],[335,80,252,86],[335,83,252,89,"options"],[335,90,252,96],[335,91,252,97,"destinationBucket"],[336,12,253,16],[336,13,253,17],[336,15,253,19],[337,14,253,21,"headers"],[337,21,253,28],[337,23,253,30],[337,27,253,34],[337,28,253,35,"headers"],[338,12,253,43],[338,13,253,44],[338,14,253,45],[339,12,254,16],[339,19,254,23],[340,14,254,25,"data"],[340,18,254,29],[340,20,254,31],[341,16,254,33,"path"],[341,20,254,37],[341,22,254,39,"data"],[341,26,254,43],[341,27,254,44,"Key"],[342,14,254,48],[342,15,254,49],[343,14,254,51,"error"],[343,19,254,56],[343,21,254,58],[344,12,254,63],[344,13,254,64],[345,10,255,12],[345,11,255,13],[345,12,256,12],[345,19,256,19,"error"],[345,24,256,24],[345,26,256,26],[346,12,257,16],[346,16,257,20],[346,20,257,24],[346,21,257,25,"shouldThrowOnError"],[346,39,257,43],[346,41,257,45],[347,14,258,20],[347,20,258,26,"error"],[347,25,258,31],[348,12,259,16],[349,12,260,16],[349,16,260,20],[349,17,260,21],[349,18,260,22],[349,20,260,24,"errors_1"],[349,28,260,32],[349,29,260,33,"isStorageError"],[349,43,260,47],[349,45,260,49,"error"],[349,50,260,54],[349,51,260,55],[349,53,260,57],[350,14,261,20],[350,21,261,27],[351,16,261,29,"data"],[351,20,261,33],[351,22,261,35],[351,26,261,39],[352,16,261,41,"error"],[353,14,261,47],[353,15,261,48],[354,12,262,16],[355,12,263,16],[355,18,263,22,"error"],[355,23,263,27],[356,10,264,12],[357,8,265,8],[357,9,265,9],[357,10,265,10],[358,6,266,4],[359,6,267,4],[360,0,268,0],[361,0,269,0],[362,0,270,0],[363,0,271,0],[364,0,272,0],[365,0,273,0],[366,0,274,0],[367,4,267,4],[368,6,267,4,"key"],[368,9,267,4],[369,6,267,4,"value"],[369,11,267,4],[369,13,275,4],[369,22,275,4,"createSignedUrl"],[369,37,275,19,"createSignedUrl"],[369,38,275,20,"path"],[369,42,275,24],[369,44,275,26,"expiresIn"],[369,53,275,35],[369,55,275,37,"options"],[369,62,275,44],[369,64,275,46],[370,8,276,8],[370,15,276,15,"__awaiter"],[370,24,276,24],[370,25,276,25],[370,29,276,29],[370,31,276,31],[370,36,276,36],[370,37,276,37],[370,39,276,39],[370,44,276,44],[370,45,276,45],[370,47,276,47],[370,60,276,60],[371,10,277,12],[371,14,277,16],[372,12,278,16],[372,16,278,20,"_path"],[372,21,278,25],[372,24,278,28],[372,28,278,32],[372,29,278,33,"_getFinalPath"],[372,42,278,46],[372,43,278,47,"path"],[372,47,278,51],[372,48,278,52],[373,12,279,16],[373,16,279,20,"data"],[373,20,279,24],[373,23,279,27],[373,29,279,33],[373,30,279,34],[373,31,279,35],[373,33,279,37,"fetch_1"],[373,40,279,44],[373,41,279,45,"post"],[373,45,279,49],[373,47,279,51],[373,51,279,55],[373,52,279,56,"fetch"],[373,57,279,61],[373,59,279,63],[373,62,279,66],[373,66,279,70],[373,67,279,71,"url"],[373,70,279,74],[373,86,279,90,"_path"],[373,91,279,95],[373,93,279,97],[373,95,279,99,"Object"],[373,101,279,105],[373,102,279,106,"assign"],[373,108,279,112],[373,109,279,113],[374,14,279,115,"expiresIn"],[375,12,279,125],[375,13,279,126],[375,15,279,129],[375,16,279,130,"options"],[375,23,279,137],[375,28,279,142],[375,32,279,146],[375,36,279,150,"options"],[375,43,279,157],[375,48,279,162],[375,53,279,167],[375,54,279,168],[375,57,279,171],[375,62,279,176],[375,63,279,177],[375,66,279,180,"options"],[375,73,279,187],[375,74,279,188,"transform"],[375,83,279,197],[375,87,279,201],[376,14,279,203,"transform"],[376,23,279,212],[376,25,279,214,"options"],[376,32,279,221],[376,33,279,222,"transform"],[377,12,279,232],[377,13,279,233],[377,16,279,236],[377,17,279,237],[377,18,279,239],[377,19,279,240],[377,21,279,242],[378,14,279,244,"headers"],[378,21,279,251],[378,23,279,253],[378,27,279,257],[378,28,279,258,"headers"],[379,12,279,266],[379,13,279,267],[379,14,279,268],[380,12,280,16],[380,16,280,22,"downloadQueryParam"],[380,34,280,40],[380,37,280,43],[380,38,280,44,"options"],[380,45,280,51],[380,50,280,56],[380,54,280,60],[380,58,280,64,"options"],[380,65,280,71],[380,70,280,76],[380,75,280,81],[380,76,280,82],[380,79,280,85],[380,84,280,90],[380,85,280,91],[380,88,280,94,"options"],[380,95,280,101],[380,96,280,102,"download"],[380,104,280,110],[380,108,281,22],[380,121,281,35,"options"],[380,128,281,42],[380,129,281,43,"download"],[380,137,281,51],[380,142,281,56],[380,146,281,60],[380,149,281,63],[380,151,281,65],[380,154,281,68,"options"],[380,161,281,75],[380,162,281,76,"download"],[380,170,281,84],[380,172,281,86],[380,175,282,22],[380,177,282,24],[381,12,283,16],[381,16,283,22,"signedUrl"],[381,25,283,31],[381,28,283,34,"encodeURI"],[381,37,283,43],[381,38,283,44],[381,41,283,47],[381,45,283,51],[381,46,283,52,"url"],[381,49,283,55],[381,52,283,58,"data"],[381,56,283,62],[381,57,283,63,"signedURL"],[381,66,283,72],[381,69,283,75,"downloadQueryParam"],[381,87,283,93],[381,89,283,95],[381,90,283,96],[382,12,284,16,"data"],[382,16,284,20],[382,19,284,23],[383,14,284,25,"signedUrl"],[384,12,284,35],[384,13,284,36],[385,12,285,16],[385,19,285,23],[386,14,285,25,"data"],[386,18,285,29],[387,14,285,31,"error"],[387,19,285,36],[387,21,285,38],[388,12,285,43],[388,13,285,44],[389,10,286,12],[389,11,286,13],[389,12,287,12],[389,19,287,19,"error"],[389,24,287,24],[389,26,287,26],[390,12,288,16],[390,16,288,20],[390,20,288,24],[390,21,288,25,"shouldThrowOnError"],[390,39,288,43],[390,41,288,45],[391,14,289,20],[391,20,289,26,"error"],[391,25,289,31],[392,12,290,16],[393,12,291,16],[393,16,291,20],[393,17,291,21],[393,18,291,22],[393,20,291,24,"errors_1"],[393,28,291,32],[393,29,291,33,"isStorageError"],[393,43,291,47],[393,45,291,49,"error"],[393,50,291,54],[393,51,291,55],[393,53,291,57],[394,14,292,20],[394,21,292,27],[395,16,292,29,"data"],[395,20,292,33],[395,22,292,35],[395,26,292,39],[396,16,292,41,"error"],[397,14,292,47],[397,15,292,48],[398,12,293,16],[399,12,294,16],[399,18,294,22,"error"],[399,23,294,27],[400,10,295,12],[401,8,296,8],[401,9,296,9],[401,10,296,10],[402,6,297,4],[403,6,298,4],[404,0,299,0],[405,0,300,0],[406,0,301,0],[407,0,302,0],[408,0,303,0],[409,0,304,0],[410,4,298,4],[411,6,298,4,"key"],[411,9,298,4],[412,6,298,4,"value"],[412,11,298,4],[412,13,305,4],[412,22,305,4,"createSignedUrls"],[412,38,305,20,"createSignedUrls"],[412,39,305,21,"paths"],[412,44,305,26],[412,46,305,28,"expiresIn"],[412,55,305,37],[412,57,305,39,"options"],[412,64,305,46],[412,66,305,48],[413,8,306,8],[413,15,306,15,"__awaiter"],[413,24,306,24],[413,25,306,25],[413,29,306,29],[413,31,306,31],[413,36,306,36],[413,37,306,37],[413,39,306,39],[413,44,306,44],[413,45,306,45],[413,47,306,47],[413,60,306,60],[414,10,307,12],[414,14,307,16],[415,12,308,16],[415,16,308,22,"data"],[415,20,308,26],[415,23,308,29],[415,29,308,35],[415,30,308,36],[415,31,308,37],[415,33,308,39,"fetch_1"],[415,40,308,46],[415,41,308,47,"post"],[415,45,308,51],[415,47,308,53],[415,51,308,57],[415,52,308,58,"fetch"],[415,57,308,63],[415,59,308,65],[415,62,308,68],[415,66,308,72],[415,67,308,73,"url"],[415,70,308,76],[415,86,308,92],[415,90,308,96],[415,91,308,97,"bucketId"],[415,99,308,105],[415,101,308,107],[415,103,308,109],[416,14,308,111,"expiresIn"],[416,23,308,120],[417,14,308,122,"paths"],[418,12,308,128],[418,13,308,129],[418,15,308,131],[419,14,308,133,"headers"],[419,21,308,140],[419,23,308,142],[419,27,308,146],[419,28,308,147,"headers"],[420,12,308,155],[420,13,308,156],[420,14,308,157],[421,12,309,16],[421,16,309,22,"downloadQueryParam"],[421,34,309,40],[421,37,309,43],[421,38,309,44,"options"],[421,45,309,51],[421,50,309,56],[421,54,309,60],[421,58,309,64,"options"],[421,65,309,71],[421,70,309,76],[421,75,309,81],[421,76,309,82],[421,79,309,85],[421,84,309,90],[421,85,309,91],[421,88,309,94,"options"],[421,95,309,101],[421,96,309,102,"download"],[421,104,309,110],[421,108,310,22],[421,121,310,35,"options"],[421,128,310,42],[421,129,310,43,"download"],[421,137,310,51],[421,142,310,56],[421,146,310,60],[421,149,310,63],[421,151,310,65],[421,154,310,68,"options"],[421,161,310,75],[421,162,310,76,"download"],[421,170,310,84],[421,172,310,86],[421,175,311,22],[421,177,311,24],[422,12,312,16],[422,19,312,23],[423,14,313,20,"data"],[423,18,313,24],[423,20,313,26,"data"],[423,24,313,30],[423,25,313,31,"map"],[423,28,313,34],[423,29,313,36,"datum"],[423,34,313,41],[423,38,313,47,"Object"],[423,44,313,53],[423,45,313,54,"assign"],[423,51,313,60],[423,52,313,61,"Object"],[423,58,313,67],[423,59,313,68,"assign"],[423,65,313,74],[423,66,313,75],[423,67,313,76],[423,68,313,77],[423,70,313,79,"datum"],[423,75,313,84],[423,76,313,85],[423,78,313,87],[424,16,313,89,"signedUrl"],[424,25,313,98],[424,27,313,100,"datum"],[424,32,313,105],[424,33,313,106,"signedURL"],[424,42,313,115],[424,45,314,30,"encodeURI"],[424,54,314,39],[424,55,314,40],[424,58,314,43],[424,62,314,47],[424,63,314,48,"url"],[424,66,314,51],[424,69,314,54,"datum"],[424,74,314,59],[424,75,314,60,"signedURL"],[424,84,314,69],[424,87,314,72,"downloadQueryParam"],[424,105,314,90],[424,107,314,92],[424,108,314,93],[424,111,315,30],[425,14,315,35],[425,15,315,36],[425,16,315,38],[425,17,315,39],[426,14,316,20,"error"],[426,19,316,25],[426,21,316,27],[427,12,317,16],[427,13,317,17],[428,10,318,12],[428,11,318,13],[428,12,319,12],[428,19,319,19,"error"],[428,24,319,24],[428,26,319,26],[429,12,320,16],[429,16,320,20],[429,20,320,24],[429,21,320,25,"shouldThrowOnError"],[429,39,320,43],[429,41,320,45],[430,14,321,20],[430,20,321,26,"error"],[430,25,321,31],[431,12,322,16],[432,12,323,16],[432,16,323,20],[432,17,323,21],[432,18,323,22],[432,20,323,24,"errors_1"],[432,28,323,32],[432,29,323,33,"isStorageError"],[432,43,323,47],[432,45,323,49,"error"],[432,50,323,54],[432,51,323,55],[432,53,323,57],[433,14,324,20],[433,21,324,27],[434,16,324,29,"data"],[434,20,324,33],[434,22,324,35],[434,26,324,39],[435,16,324,41,"error"],[436,14,324,47],[436,15,324,48],[437,12,325,16],[438,12,326,16],[438,18,326,22,"error"],[438,23,326,27],[439,10,327,12],[440,8,328,8],[440,9,328,9],[440,10,328,10],[441,6,329,4],[442,6,330,4],[443,0,331,0],[444,0,332,0],[445,0,333,0],[446,0,334,0],[447,0,335,0],[448,4,330,4],[449,6,330,4,"key"],[449,9,330,4],[450,6,330,4,"value"],[450,11,330,4],[450,13,336,4],[450,22,336,4,"download"],[450,30,336,12,"download"],[450,31,336,13,"path"],[450,35,336,17],[450,37,336,19,"options"],[450,44,336,26],[450,46,336,28],[451,8,337,8],[451,12,337,14,"wantsTransformation"],[451,31,337,33],[451,34,337,36],[451,42,337,44,"options"],[451,49,337,51],[451,54,337,56],[451,58,337,60],[451,62,337,64,"options"],[451,69,337,71],[451,74,337,76],[451,79,337,81],[451,80,337,82],[451,83,337,85],[451,88,337,90],[451,89,337,91],[451,92,337,94,"options"],[451,99,337,101],[451,100,337,102,"transform"],[451,109,337,111],[451,110,337,112],[451,115,337,117],[451,126,337,128],[452,8,338,8],[452,12,338,14,"renderPath"],[452,22,338,24],[452,25,338,27,"wantsTransformation"],[452,44,338,46],[452,47,338,49],[452,75,338,77],[452,78,338,80],[452,86,338,88],[453,8,339,8],[453,12,339,14,"transformationQuery"],[453,31,339,33],[453,34,339,36],[453,38,339,40],[453,39,339,41,"transformOptsToQueryString"],[453,65,339,67],[453,66,339,68],[453,67,339,69,"options"],[453,74,339,76],[453,79,339,81],[453,83,339,85],[453,87,339,89,"options"],[453,94,339,96],[453,99,339,101],[453,104,339,106],[453,105,339,107],[453,108,339,110],[453,113,339,115],[453,114,339,116],[453,117,339,119,"options"],[453,124,339,126],[453,125,339,127,"transform"],[453,134,339,136],[453,139,339,141],[453,140,339,142],[453,141,339,143],[453,142,339,144],[454,8,340,8],[454,12,340,14,"queryString"],[454,23,340,25],[454,26,340,28,"transformationQuery"],[454,45,340,47],[454,48,340,50],[454,52,340,54,"transformationQuery"],[454,71,340,73],[454,73,340,75],[454,76,340,78],[454,78,340,80],[455,8,341,8],[455,12,341,14,"_path"],[455,17,341,19],[455,20,341,22],[455,24,341,26],[455,25,341,27,"_getFinalPath"],[455,38,341,40],[455,39,341,41,"path"],[455,43,341,45],[455,44,341,46],[456,8,342,8],[456,12,342,14,"downloadFn"],[456,22,342,24],[456,25,342,27,"downloadFn"],[456,26,342,27],[456,31,342,33],[456,32,342,34],[456,33,342,35],[456,35,342,37,"fetch_1"],[456,42,342,44],[456,43,342,45,"get"],[456,46,342,48],[456,48,342,50],[456,52,342,54],[456,53,342,55,"fetch"],[456,58,342,60],[456,60,342,62],[456,63,342,65],[456,67,342,69],[456,68,342,70,"url"],[456,71,342,73],[456,75,342,77,"renderPath"],[456,85,342,87],[456,89,342,91,"_path"],[456,94,342,96],[456,97,342,99,"queryString"],[456,108,342,110],[456,110,342,112],[456,112,342,114],[457,10,343,12,"headers"],[457,17,343,19],[457,19,343,21],[457,23,343,25],[457,24,343,26,"headers"],[457,31,343,33],[458,10,344,12,"noResolveJson"],[458,23,344,25],[458,25,344,27],[459,8,345,8],[459,9,345,9],[459,10,345,10],[460,8,346,8],[460,15,346,15],[460,19,346,19,"BlobDownloadBuilder_1"],[460,40,346,40],[460,41,346,41,"default"],[460,48,346,48],[460,49,346,49,"downloadFn"],[460,59,346,59],[460,61,346,61],[460,65,346,65],[460,66,346,66,"shouldThrowOnError"],[460,84,346,84],[460,85,346,85],[461,6,347,4],[462,6,348,4],[463,0,349,0],[464,0,350,0],[465,0,351,0],[466,4,348,4],[467,6,348,4,"key"],[467,9,348,4],[468,6,348,4,"value"],[468,11,348,4],[468,13,352,4],[468,22,352,4,"info"],[468,26,352,8,"info"],[468,27,352,9,"path"],[468,31,352,13],[468,33,352,15],[469,8,353,8],[469,15,353,15,"__awaiter"],[469,24,353,24],[469,25,353,25],[469,29,353,29],[469,31,353,31],[469,36,353,36],[469,37,353,37],[469,39,353,39],[469,44,353,44],[469,45,353,45],[469,47,353,47],[469,60,353,60],[470,10,354,12],[470,14,354,18,"_path"],[470,19,354,23],[470,22,354,26],[470,26,354,30],[470,27,354,31,"_getFinalPath"],[470,40,354,44],[470,41,354,45,"path"],[470,45,354,49],[470,46,354,50],[471,10,355,12],[471,14,355,16],[472,12,356,16],[472,16,356,22,"data"],[472,20,356,26],[472,23,356,29],[472,29,356,35],[472,30,356,36],[472,31,356,37],[472,33,356,39,"fetch_1"],[472,40,356,46],[472,41,356,47,"get"],[472,44,356,50],[472,46,356,52],[472,50,356,56],[472,51,356,57,"fetch"],[472,56,356,62],[472,58,356,64],[472,61,356,67],[472,65,356,71],[472,66,356,72,"url"],[472,69,356,75],[472,85,356,91,"_path"],[472,90,356,96],[472,92,356,98],[472,94,356,100],[473,14,357,20,"headers"],[473,21,357,27],[473,23,357,29],[473,27,357,33],[473,28,357,34,"headers"],[474,12,358,16],[474,13,358,17],[474,14,358,18],[475,12,359,16],[475,19,359,23],[476,14,359,25,"data"],[476,18,359,29],[476,20,359,31],[476,21,359,32],[476,22,359,33],[476,24,359,35,"helpers_1"],[476,33,359,44],[476,34,359,45,"recursiveToCamel"],[476,50,359,61],[476,52,359,63,"data"],[476,56,359,67],[476,57,359,68],[477,14,359,70,"error"],[477,19,359,75],[477,21,359,77],[478,12,359,82],[478,13,359,83],[479,10,360,12],[479,11,360,13],[479,12,361,12],[479,19,361,19,"error"],[479,24,361,24],[479,26,361,26],[480,12,362,16],[480,16,362,20],[480,20,362,24],[480,21,362,25,"shouldThrowOnError"],[480,39,362,43],[480,41,362,45],[481,14,363,20],[481,20,363,26,"error"],[481,25,363,31],[482,12,364,16],[483,12,365,16],[483,16,365,20],[483,17,365,21],[483,18,365,22],[483,20,365,24,"errors_1"],[483,28,365,32],[483,29,365,33,"isStorageError"],[483,43,365,47],[483,45,365,49,"error"],[483,50,365,54],[483,51,365,55],[483,53,365,57],[484,14,366,20],[484,21,366,27],[485,16,366,29,"data"],[485,20,366,33],[485,22,366,35],[485,26,366,39],[486,16,366,41,"error"],[487,14,366,47],[487,15,366,48],[488,12,367,16],[489,12,368,16],[489,18,368,22,"error"],[489,23,368,27],[490,10,369,12],[491,8,370,8],[491,9,370,9],[491,10,370,10],[492,6,371,4],[493,6,372,4],[494,0,373,0],[495,0,374,0],[496,0,375,0],[497,4,372,4],[498,6,372,4,"key"],[498,9,372,4],[499,6,372,4,"value"],[499,11,372,4],[499,13,376,4],[499,22,376,4,"exists"],[499,28,376,10,"exists"],[499,29,376,11,"path"],[499,33,376,15],[499,35,376,17],[500,8,377,8],[500,15,377,15,"__awaiter"],[500,24,377,24],[500,25,377,25],[500,29,377,29],[500,31,377,31],[500,36,377,36],[500,37,377,37],[500,39,377,39],[500,44,377,44],[500,45,377,45],[500,47,377,47],[500,60,377,60],[501,10,378,12],[501,14,378,18,"_path"],[501,19,378,23],[501,22,378,26],[501,26,378,30],[501,27,378,31,"_getFinalPath"],[501,40,378,44],[501,41,378,45,"path"],[501,45,378,49],[501,46,378,50],[502,10,379,12],[502,14,379,16],[503,12,380,16],[503,18,380,22],[503,19,380,23],[503,20,380,24],[503,22,380,26,"fetch_1"],[503,29,380,33],[503,30,380,34,"head"],[503,34,380,38],[503,36,380,40],[503,40,380,44],[503,41,380,45,"fetch"],[503,46,380,50],[503,48,380,52],[503,51,380,55],[503,55,380,59],[503,56,380,60,"url"],[503,59,380,63],[503,70,380,74,"_path"],[503,75,380,79],[503,77,380,81],[503,79,380,83],[504,14,381,20,"headers"],[504,21,381,27],[504,23,381,29],[504,27,381,33],[504,28,381,34,"headers"],[505,12,382,16],[505,13,382,17],[505,14,382,18],[506,12,383,16],[506,19,383,23],[507,14,383,25,"data"],[507,18,383,29],[507,20,383,31],[507,24,383,35],[508,14,383,37,"error"],[508,19,383,42],[508,21,383,44],[509,12,383,49],[509,13,383,50],[510,10,384,12],[510,11,384,13],[510,12,385,12],[510,19,385,19,"error"],[510,24,385,24],[510,26,385,26],[511,12,386,16],[511,16,386,20],[511,20,386,24],[511,21,386,25,"shouldThrowOnError"],[511,39,386,43],[511,41,386,45],[512,14,387,20],[512,20,387,26,"error"],[512,25,387,31],[513,12,388,16],[514,12,389,16],[514,16,389,20],[514,17,389,21],[514,18,389,22],[514,20,389,24,"errors_1"],[514,28,389,32],[514,29,389,33,"isStorageError"],[514,43,389,47],[514,45,389,49,"error"],[514,50,389,54],[514,51,389,55],[514,55,389,59,"error"],[514,60,389,64],[514,72,389,76,"errors_1"],[514,80,389,84],[514,81,389,85,"StorageUnknownError"],[514,100,389,104],[514,102,389,106],[515,14,390,20],[515,18,390,26,"originalError"],[515,31,390,39],[515,34,390,42,"error"],[515,39,390,47],[515,40,390,48,"originalError"],[515,53,390,61],[516,14,391,20],[516,18,391,24],[516,19,391,25],[516,22,391,28],[516,24,391,30],[516,27,391,33],[516,28,391,34],[516,29,391,35,"includes"],[516,37,391,43],[516,38,391,44,"originalError"],[516,51,391,57],[516,56,391,62],[516,60,391,66],[516,64,391,70,"originalError"],[516,77,391,83],[516,82,391,88],[516,87,391,93],[516,88,391,94],[516,91,391,97],[516,96,391,102],[516,97,391,103],[516,100,391,106,"originalError"],[516,113,391,119],[516,114,391,120,"status"],[516,120,391,126],[516,121,391,127],[516,123,391,129],[517,16,392,24],[517,23,392,31],[518,18,392,33,"data"],[518,22,392,37],[518,24,392,39],[518,29,392,44],[519,18,392,46,"error"],[520,16,392,52],[520,17,392,53],[521,14,393,20],[522,12,394,16],[523,12,395,16],[523,18,395,22,"error"],[523,23,395,27],[524,10,396,12],[525,8,397,8],[525,9,397,9],[525,10,397,10],[526,6,398,4],[527,6,399,4],[528,0,400,0],[529,0,401,0],[530,0,402,0],[531,0,403,0],[532,0,404,0],[533,0,405,0],[534,0,406,0],[535,4,399,4],[536,6,399,4,"key"],[536,9,399,4],[537,6,399,4,"value"],[537,11,399,4],[537,13,407,4],[537,22,407,4,"getPublicUrl"],[537,34,407,16,"getPublicUrl"],[537,35,407,17,"path"],[537,39,407,21],[537,41,407,23,"options"],[537,48,407,30],[537,50,407,32],[538,8,408,8],[538,12,408,14,"_path"],[538,17,408,19],[538,20,408,22],[538,24,408,26],[538,25,408,27,"_getFinalPath"],[538,38,408,40],[538,39,408,41,"path"],[538,43,408,45],[538,44,408,46],[539,8,409,8],[539,12,409,14,"_queryString"],[539,24,409,26],[539,27,409,29],[539,29,409,31],[540,8,410,8],[540,12,410,14,"downloadQueryParam"],[540,30,410,32],[540,33,410,35],[540,34,410,36,"options"],[540,41,410,43],[540,46,410,48],[540,50,410,52],[540,54,410,56,"options"],[540,61,410,63],[540,66,410,68],[540,71,410,73],[540,72,410,74],[540,75,410,77],[540,80,410,82],[540,81,410,83],[540,84,410,86,"options"],[540,91,410,93],[540,92,410,94,"download"],[540,100,410,102],[540,104,411,14],[540,116,411,26,"options"],[540,123,411,33],[540,124,411,34,"download"],[540,132,411,42],[540,137,411,47],[540,141,411,51],[540,144,411,54],[540,146,411,56],[540,149,411,59,"options"],[540,156,411,66],[540,157,411,67,"download"],[540,165,411,75],[540,167,411,77],[540,170,412,14],[540,172,412,16],[541,8,413,8],[541,12,413,12,"downloadQueryParam"],[541,30,413,30],[541,35,413,35],[541,37,413,37],[541,39,413,39],[542,10,414,12,"_queryString"],[542,22,414,24],[542,23,414,25,"push"],[542,27,414,29],[542,28,414,30,"downloadQueryParam"],[542,46,414,48],[542,47,414,49],[543,8,415,8],[544,8,416,8],[544,12,416,14,"wantsTransformation"],[544,31,416,33],[544,34,416,36],[544,42,416,44,"options"],[544,49,416,51],[544,54,416,56],[544,58,416,60],[544,62,416,64,"options"],[544,69,416,71],[544,74,416,76],[544,79,416,81],[544,80,416,82],[544,83,416,85],[544,88,416,90],[544,89,416,91],[544,92,416,94,"options"],[544,99,416,101],[544,100,416,102,"transform"],[544,109,416,111],[544,110,416,112],[544,115,416,117],[544,126,416,128],[545,8,417,8],[545,12,417,14,"renderPath"],[545,22,417,24],[545,25,417,27,"wantsTransformation"],[545,44,417,46],[545,47,417,49],[545,61,417,63],[545,64,417,66],[545,72,417,74],[546,8,418,8],[546,12,418,14,"transformationQuery"],[546,31,418,33],[546,34,418,36],[546,38,418,40],[546,39,418,41,"transformOptsToQueryString"],[546,65,418,67],[546,66,418,68],[546,67,418,69,"options"],[546,74,418,76],[546,79,418,81],[546,83,418,85],[546,87,418,89,"options"],[546,94,418,96],[546,99,418,101],[546,104,418,106],[546,105,418,107],[546,108,418,110],[546,113,418,115],[546,114,418,116],[546,117,418,119,"options"],[546,124,418,126],[546,125,418,127,"transform"],[546,134,418,136],[546,139,418,141],[546,140,418,142],[546,141,418,143],[546,142,418,144],[547,8,419,8],[547,12,419,12,"transformationQuery"],[547,31,419,31],[547,36,419,36],[547,38,419,38],[547,40,419,40],[548,10,420,12,"_queryString"],[548,22,420,24],[548,23,420,25,"push"],[548,27,420,29],[548,28,420,30,"transformationQuery"],[548,47,420,49],[548,48,420,50],[549,8,421,8],[550,8,422,8],[550,12,422,12,"queryString"],[550,23,422,23],[550,26,422,26,"_queryString"],[550,38,422,38],[550,39,422,39,"join"],[550,43,422,43],[550,44,422,44],[550,47,422,47],[550,48,422,48],[551,8,423,8],[551,12,423,12,"queryString"],[551,23,423,23],[551,28,423,28],[551,30,423,30],[551,32,423,32],[552,10,424,12,"queryString"],[552,21,424,23],[552,24,424,26],[552,28,424,30,"queryString"],[552,39,424,41],[552,41,424,43],[553,8,425,8],[554,8,426,8],[554,15,426,15],[555,10,427,12,"data"],[555,14,427,16],[555,16,427,18],[556,12,427,20,"publicUrl"],[556,21,427,29],[556,23,427,31,"encodeURI"],[556,32,427,40],[556,33,427,41],[556,36,427,44],[556,40,427,48],[556,41,427,49,"url"],[556,44,427,52],[556,48,427,56,"renderPath"],[556,58,427,66],[556,69,427,77,"_path"],[556,74,427,82],[556,77,427,85,"queryString"],[556,88,427,96],[556,90,427,98],[557,10,427,100],[558,8,428,8],[558,9,428,9],[559,6,429,4],[560,6,430,4],[561,0,431,0],[562,0,432,0],[563,0,433,0],[564,0,434,0],[565,4,430,4],[566,6,430,4,"key"],[566,9,430,4],[567,6,430,4,"value"],[567,11,430,4],[567,13,435,4],[567,22,435,4,"remove"],[567,28,435,10,"remove"],[567,29,435,11,"paths"],[567,34,435,16],[567,36,435,18],[568,8,436,8],[568,15,436,15,"__awaiter"],[568,24,436,24],[568,25,436,25],[568,29,436,29],[568,31,436,31],[568,36,436,36],[568,37,436,37],[568,39,436,39],[568,44,436,44],[568,45,436,45],[568,47,436,47],[568,60,436,60],[569,10,437,12],[569,14,437,16],[570,12,438,16],[570,16,438,22,"data"],[570,20,438,26],[570,23,438,29],[570,29,438,35],[570,30,438,36],[570,31,438,37],[570,33,438,39,"fetch_1"],[570,40,438,46],[570,41,438,47,"remove"],[570,47,438,53],[570,49,438,55],[570,53,438,59],[570,54,438,60,"fetch"],[570,59,438,65],[570,61,438,67],[570,64,438,70],[570,68,438,74],[570,69,438,75,"url"],[570,72,438,78],[570,83,438,89],[570,87,438,93],[570,88,438,94,"bucketId"],[570,96,438,102],[570,98,438,104],[570,100,438,106],[571,14,438,108,"prefixes"],[571,22,438,116],[571,24,438,118,"paths"],[572,12,438,124],[572,13,438,125],[572,15,438,127],[573,14,438,129,"headers"],[573,21,438,136],[573,23,438,138],[573,27,438,142],[573,28,438,143,"headers"],[574,12,438,151],[574,13,438,152],[574,14,438,153],[575,12,439,16],[575,19,439,23],[576,14,439,25,"data"],[576,18,439,29],[577,14,439,31,"error"],[577,19,439,36],[577,21,439,38],[578,12,439,43],[578,13,439,44],[579,10,440,12],[579,11,440,13],[579,12,441,12],[579,19,441,19,"error"],[579,24,441,24],[579,26,441,26],[580,12,442,16],[580,16,442,20],[580,20,442,24],[580,21,442,25,"shouldThrowOnError"],[580,39,442,43],[580,41,442,45],[581,14,443,20],[581,20,443,26,"error"],[581,25,443,31],[582,12,444,16],[583,12,445,16],[583,16,445,20],[583,17,445,21],[583,18,445,22],[583,20,445,24,"errors_1"],[583,28,445,32],[583,29,445,33,"isStorageError"],[583,43,445,47],[583,45,445,49,"error"],[583,50,445,54],[583,51,445,55],[583,53,445,57],[584,14,446,20],[584,21,446,27],[585,16,446,29,"data"],[585,20,446,33],[585,22,446,35],[585,26,446,39],[586,16,446,41,"error"],[587,14,446,47],[587,15,446,48],[588,12,447,16],[589,12,448,16],[589,18,448,22,"error"],[589,23,448,27],[590,10,449,12],[591,8,450,8],[591,9,450,9],[591,10,450,10],[592,6,451,4],[593,6,452,4],[594,0,453,0],[595,0,454,0],[596,0,455,0],[597,6,456,4],[598,6,457,4],[599,6,458,4],[600,6,459,4],[601,6,460,4],[602,6,461,4],[603,6,462,4],[604,6,463,4],[605,6,464,4],[606,6,465,4],[607,6,466,4],[608,6,467,4],[609,6,468,4],[610,6,469,4],[611,6,470,4],[612,6,471,4],[613,6,472,4],[614,6,473,4],[615,6,474,4],[616,6,475,4],[617,6,476,4],[618,6,477,4],[619,6,478,4],[620,0,479,0],[621,0,480,0],[622,0,481,0],[623,0,482,0],[624,6,483,4],[625,6,484,4],[626,6,485,4],[627,6,486,4],[628,6,487,4],[629,6,488,4],[630,6,489,4],[631,6,490,4],[632,6,491,4],[633,6,492,4],[634,6,493,4],[635,6,494,4],[636,6,495,4],[637,6,496,4],[638,6,497,4],[639,6,498,4],[640,6,499,4],[641,6,500,4],[642,6,501,4],[643,6,502,4],[644,6,503,4],[645,6,504,4],[646,6,505,4],[647,6,506,4],[648,6,507,4],[649,6,508,4],[650,6,509,4],[651,6,510,4],[652,6,511,4],[653,0,512,0],[654,0,513,0],[655,0,514,0],[656,0,515,0],[657,4,511,4],[658,6,511,4,"key"],[658,9,511,4],[659,6,511,4,"value"],[659,11,511,4],[659,13,516,4],[659,22,516,4,"list"],[659,26,516,8,"list"],[659,27,516,9,"path"],[659,31,516,13],[659,33,516,15,"options"],[659,40,516,22],[659,42,516,24,"parameters"],[659,52,516,34],[659,54,516,36],[660,8,517,8],[660,15,517,15,"__awaiter"],[660,24,517,24],[660,25,517,25],[660,29,517,29],[660,31,517,31],[660,36,517,36],[660,37,517,37],[660,39,517,39],[660,44,517,44],[660,45,517,45],[660,47,517,47],[660,60,517,60],[661,10,518,12],[661,14,518,16],[662,12,519,16],[662,16,519,22,"body"],[662,20,519,26],[662,23,519,29,"Object"],[662,29,519,35],[662,30,519,36,"assign"],[662,36,519,42],[662,37,519,43,"Object"],[662,43,519,49],[662,44,519,50,"assign"],[662,50,519,56],[662,51,519,57,"Object"],[662,57,519,63],[662,58,519,64,"assign"],[662,64,519,70],[662,65,519,71],[662,66,519,72],[662,67,519,73],[662,69,519,75,"DEFAULT_SEARCH_OPTIONS"],[662,91,519,97],[662,92,519,98],[662,94,519,100,"options"],[662,101,519,107],[662,102,519,108],[662,104,519,110],[663,14,519,112,"prefix"],[663,20,519,118],[663,22,519,120,"path"],[663,26,519,124],[663,30,519,128],[664,12,519,131],[664,13,519,132],[664,14,519,133],[665,12,520,16],[665,16,520,22,"data"],[665,20,520,26],[665,23,520,29],[665,29,520,35],[665,30,520,36],[665,31,520,37],[665,33,520,39,"fetch_1"],[665,40,520,46],[665,41,520,47,"post"],[665,45,520,51],[665,47,520,53],[665,51,520,57],[665,52,520,58,"fetch"],[665,57,520,63],[665,59,520,65],[665,62,520,68],[665,66,520,72],[665,67,520,73,"url"],[665,70,520,76],[665,86,520,92],[665,90,520,96],[665,91,520,97,"bucketId"],[665,99,520,105],[665,101,520,107],[665,103,520,109,"body"],[665,107,520,113],[665,109,520,115],[666,14,520,117,"headers"],[666,21,520,124],[666,23,520,126],[666,27,520,130],[666,28,520,131,"headers"],[667,12,520,139],[667,13,520,140],[667,15,520,142,"parameters"],[667,25,520,152],[667,26,520,153],[668,12,521,16],[668,19,521,23],[669,14,521,25,"data"],[669,18,521,29],[670,14,521,31,"error"],[670,19,521,36],[670,21,521,38],[671,12,521,43],[671,13,521,44],[672,10,522,12],[672,11,522,13],[672,12,523,12],[672,19,523,19,"error"],[672,24,523,24],[672,26,523,26],[673,12,524,16],[673,16,524,20],[673,20,524,24],[673,21,524,25,"shouldThrowOnError"],[673,39,524,43],[673,41,524,45],[674,14,525,20],[674,20,525,26,"error"],[674,25,525,31],[675,12,526,16],[676,12,527,16],[676,16,527,20],[676,17,527,21],[676,18,527,22],[676,20,527,24,"errors_1"],[676,28,527,32],[676,29,527,33,"isStorageError"],[676,43,527,47],[676,45,527,49,"error"],[676,50,527,54],[676,51,527,55],[676,53,527,57],[677,14,528,20],[677,21,528,27],[678,16,528,29,"data"],[678,20,528,33],[678,22,528,35],[678,26,528,39],[679,16,528,41,"error"],[680,14,528,47],[680,15,528,48],[681,12,529,16],[682,12,530,16],[682,18,530,22,"error"],[682,23,530,27],[683,10,531,12],[684,8,532,8],[684,9,532,9],[684,10,532,10],[685,6,533,4],[686,6,534,4],[687,0,535,0],[688,0,536,0],[689,0,537,0],[690,0,538,0],[691,4,534,4],[692,6,534,4,"key"],[692,9,534,4],[693,6,534,4,"value"],[693,11,534,4],[693,13,539,4],[693,22,539,4,"listV2"],[693,28,539,10,"listV2"],[693,29,539,11,"options"],[693,36,539,18],[693,38,539,20,"parameters"],[693,48,539,30],[693,50,539,32],[694,8,540,8],[694,15,540,15,"__awaiter"],[694,24,540,24],[694,25,540,25],[694,29,540,29],[694,31,540,31],[694,36,540,36],[694,37,540,37],[694,39,540,39],[694,44,540,44],[694,45,540,45],[694,47,540,47],[694,60,540,60],[695,10,541,12],[695,14,541,16],[696,12,542,16],[696,16,542,22,"body"],[696,20,542,26],[696,23,542,29,"Object"],[696,29,542,35],[696,30,542,36,"assign"],[696,36,542,42],[696,37,542,43],[696,38,542,44],[696,39,542,45],[696,41,542,47,"options"],[696,48,542,54],[696,49,542,55],[697,12,543,16],[697,16,543,22,"data"],[697,20,543,26],[697,23,543,29],[697,29,543,35],[697,30,543,36],[697,31,543,37],[697,33,543,39,"fetch_1"],[697,40,543,46],[697,41,543,47,"post"],[697,45,543,51],[697,47,543,53],[697,51,543,57],[697,52,543,58,"fetch"],[697,57,543,63],[697,59,543,65],[697,62,543,68],[697,66,543,72],[697,67,543,73,"url"],[697,70,543,76],[697,89,543,95],[697,93,543,99],[697,94,543,100,"bucketId"],[697,102,543,108],[697,104,543,110],[697,106,543,112,"body"],[697,110,543,116],[697,112,543,118],[698,14,543,120,"headers"],[698,21,543,127],[698,23,543,129],[698,27,543,133],[698,28,543,134,"headers"],[699,12,543,142],[699,13,543,143],[699,15,543,145,"parameters"],[699,25,543,155],[699,26,543,156],[700,12,544,16],[700,19,544,23],[701,14,544,25,"data"],[701,18,544,29],[702,14,544,31,"error"],[702,19,544,36],[702,21,544,38],[703,12,544,43],[703,13,544,44],[704,10,545,12],[704,11,545,13],[704,12,546,12],[704,19,546,19,"error"],[704,24,546,24],[704,26,546,26],[705,12,547,16],[705,16,547,20],[705,20,547,24],[705,21,547,25,"shouldThrowOnError"],[705,39,547,43],[705,41,547,45],[706,14,548,20],[706,20,548,26,"error"],[706,25,548,31],[707,12,549,16],[708,12,550,16],[708,16,550,20],[708,17,550,21],[708,18,550,22],[708,20,550,24,"errors_1"],[708,28,550,32],[708,29,550,33,"isStorageError"],[708,43,550,47],[708,45,550,49,"error"],[708,50,550,54],[708,51,550,55],[708,53,550,57],[709,14,551,20],[709,21,551,27],[710,16,551,29,"data"],[710,20,551,33],[710,22,551,35],[710,26,551,39],[711,16,551,41,"error"],[712,14,551,47],[712,15,551,48],[713,12,552,16],[714,12,553,16],[714,18,553,22,"error"],[714,23,553,27],[715,10,554,12],[716,8,555,8],[716,9,555,9],[716,10,555,10],[717,6,556,4],[718,4,556,5],[719,6,556,5,"key"],[719,9,556,5],[720,6,556,5,"value"],[720,11,556,5],[720,13,557,4],[720,22,557,4,"encodeMetadata"],[720,36,557,18,"encodeMetadata"],[720,37,557,19,"metadata"],[720,45,557,27],[720,47,557,29],[721,8,558,8],[721,15,558,15,"JSON"],[721,19,558,19],[721,20,558,20,"stringify"],[721,29,558,29],[721,30,558,30,"metadata"],[721,38,558,38],[721,39,558,39],[722,6,559,4],[723,4,559,5],[724,6,559,5,"key"],[724,9,559,5],[725,6,559,5,"value"],[725,11,559,5],[725,13,560,4],[725,22,560,4,"toBase64"],[725,30,560,12,"toBase64"],[725,31,560,13,"data"],[725,35,560,17],[725,37,560,19],[726,8,561,8],[726,12,561,12],[726,19,561,19,"Buffer"],[726,25,561,25],[726,30,561,30],[726,41,561,41],[726,43,561,43],[727,10,562,12],[727,17,562,19,"Buffer"],[727,23,562,25],[727,24,562,26,"from"],[727,28,562,30],[727,29,562,31,"data"],[727,33,562,35],[727,34,562,36],[727,35,562,37,"toString"],[727,43,562,45],[727,44,562,46],[727,52,562,54],[727,53,562,55],[728,8,563,8],[729,8,564,8],[729,15,564,15,"btoa"],[729,19,564,19],[729,20,564,20,"data"],[729,24,564,24],[729,25,564,25],[730,6,565,4],[731,4,565,5],[732,6,565,5,"key"],[732,9,565,5],[733,6,565,5,"value"],[733,11,565,5],[733,13,566,4],[733,22,566,4,"_getFinalPath"],[733,35,566,17,"_getFinalPath"],[733,36,566,18,"path"],[733,40,566,22],[733,42,566,24],[734,8,567,8],[734,15,567,15],[734,18,567,18],[734,22,567,22],[734,23,567,23,"bucketId"],[734,31,567,31],[734,35,567,35,"path"],[734,39,567,39],[734,40,567,40,"replace"],[734,47,567,47],[734,48,567,48],[734,54,567,54],[734,56,567,56],[734,58,567,58],[734,59,567,59],[734,61,567,61],[735,6,568,4],[736,4,568,5],[737,6,568,5,"key"],[737,9,568,5],[738,6,568,5,"value"],[738,11,568,5],[738,13,569,4],[738,22,569,4,"_removeEmptyFolders"],[738,41,569,23,"_removeEmptyFolders"],[738,42,569,24,"path"],[738,46,569,28],[738,48,569,30],[739,8,570,8],[739,15,570,15,"path"],[739,19,570,19],[739,20,570,20,"replace"],[739,27,570,27],[739,28,570,28],[739,38,570,38],[739,40,570,40],[739,42,570,42],[739,43,570,43],[739,44,570,44,"replace"],[739,51,570,51],[739,52,570,52],[739,58,570,58],[739,60,570,60],[739,63,570,63],[739,64,570,64],[740,6,571,4],[741,4,571,5],[742,6,571,5,"key"],[742,9,571,5],[743,6,571,5,"value"],[743,11,571,5],[743,13,572,4],[743,22,572,4,"transformOptsToQueryString"],[743,48,572,30,"transformOptsToQueryString"],[743,49,572,31,"transform"],[743,58,572,40],[743,60,572,42],[744,8,573,8],[744,12,573,14,"params"],[744,18,573,20],[744,21,573,23],[744,23,573,25],[745,8,574,8],[745,12,574,12,"transform"],[745,21,574,21],[745,22,574,22,"width"],[745,27,574,27],[745,29,574,29],[746,10,575,12,"params"],[746,16,575,18],[746,17,575,19,"push"],[746,21,575,23],[746,22,575,24],[746,31,575,33,"transform"],[746,40,575,42],[746,41,575,43,"width"],[746,46,575,48],[746,48,575,50],[746,49,575,51],[747,8,576,8],[748,8,577,8],[748,12,577,12,"transform"],[748,21,577,21],[748,22,577,22,"height"],[748,28,577,28],[748,30,577,30],[749,10,578,12,"params"],[749,16,578,18],[749,17,578,19,"push"],[749,21,578,23],[749,22,578,24],[749,32,578,34,"transform"],[749,41,578,43],[749,42,578,44,"height"],[749,48,578,50],[749,50,578,52],[749,51,578,53],[750,8,579,8],[751,8,580,8],[751,12,580,12,"transform"],[751,21,580,21],[751,22,580,22,"resize"],[751,28,580,28],[751,30,580,30],[752,10,581,12,"params"],[752,16,581,18],[752,17,581,19,"push"],[752,21,581,23],[752,22,581,24],[752,32,581,34,"transform"],[752,41,581,43],[752,42,581,44,"resize"],[752,48,581,50],[752,50,581,52],[752,51,581,53],[753,8,582,8],[754,8,583,8],[754,12,583,12,"transform"],[754,21,583,21],[754,22,583,22,"format"],[754,28,583,28],[754,30,583,30],[755,10,584,12,"params"],[755,16,584,18],[755,17,584,19,"push"],[755,21,584,23],[755,22,584,24],[755,32,584,34,"transform"],[755,41,584,43],[755,42,584,44,"format"],[755,48,584,50],[755,50,584,52],[755,51,584,53],[756,8,585,8],[757,8,586,8],[757,12,586,12,"transform"],[757,21,586,21],[757,22,586,22,"quality"],[757,29,586,29],[757,31,586,31],[758,10,587,12,"params"],[758,16,587,18],[758,17,587,19,"push"],[758,21,587,23],[758,22,587,24],[758,33,587,35,"transform"],[758,42,587,44],[758,43,587,45,"quality"],[758,50,587,52],[758,52,587,54],[758,53,587,55],[759,8,588,8],[760,8,589,8],[760,15,589,15,"params"],[760,21,589,21],[760,22,589,22,"join"],[760,26,589,26],[760,27,589,27],[760,30,589,30],[760,31,589,31],[761,6,590,4],[762,4,590,5],[763,2,590,5],[764,2,592,0,"exports"],[764,9,592,7],[764,10,592,8,"default"],[764,17,592,15],[764,20,592,18,"StorageFileApi"],[764,34,592,32],[765,0,592,33],[765,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","StorageFileApi","constructor","throwOnError","uploadOrUpdate","__awaiter$argument_3","upload","uploadToSignedUrl","createSignedUploadUrl","update","move","copy","createSignedUrl","createSignedUrls","data.map$argument_0","download","downloadFn","info","exists","getPublicUrl","remove","list","listV2","encodeMetadata","toBase64","_getFinalPath","_removeEmptyFolders","transformOptsToQueryString"],"mappings":"AAA;4CCC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;wDCC;CDE;AOmB;ICC;KDM;IEI;KFG;IGQ;+CCC;SDiD;KHC;IKO;+CDC;SCE;KLC;IMO;+CFC;SEsC;KNC;IOQ;+CHC;SGwB;KPC;IQO;+CJC;SIE;KRC;ISQ;+CLC;SKmB;KTC;IUQ;+CNC;SMmB;KVC;IWS;+CPC;SOoB;KXC;IYQ;+CRC;mCSO;sCTE;SQa;KZC;IcO;2BCM;UDG;KdE;IgBK;+CZC;SYiB;KhBC;IiBK;+CbC;SaoB;KjBC;IkBS;KlBsB;ImBM;+CfC;Sec;KnBC;IoBiE;+ChBC;SgBe;KpBC;IqBM;+CjBC;SiBe;KrBC;IsBC;KtBE;IuBC;KvBK;IwBC;KxBE;IyBC;KzBE;I0BC;K1BkB;CPC"},"hasCjsExports":true},"type":"js/module"}]}