{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"./PostgrestQueryBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":48,"index":264},"end":{"line":6,"column":82,"index":298}}],"key":"6yLSRkTCaGyTSQvLUJvo14aYbi8=","exportNames":["*"],"imports":1}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":49,"index":350},"end":{"line":7,"column":84,"index":385}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  var _classCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\").default;\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var PostgrestQueryBuilder_1 = __importDefault(require(_dependencyMap[3], \"./PostgrestQueryBuilder\"));\n  var PostgrestFilterBuilder_1 = __importDefault(require(_dependencyMap[4], \"./PostgrestFilterBuilder\"));\n  /**\n   * PostgREST client.\n   *\n   * @typeParam Database - Types for the schema from the [type\n   * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n   *\n   * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n   * literal, the same one passed to the constructor. If the schema is not\n   * `\"public\"`, this must be supplied manually.\n   */\n  var PostgrestClient = /*#__PURE__*/function () {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    function PostgrestClient(url) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n      _classCallCheck(this, PostgrestClient);\n      this.url = url;\n      this.headers = new Headers(headers);\n      this.schemaName = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    return _createClass(PostgrestClient, [{\n      key: \"from\",\n      value: function from(relation) {\n        var url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder_1.default(url, {\n          headers: new Headers(this.headers),\n          schema: this.schemaName,\n          fetch: this.fetch\n        });\n      }\n      /**\n       * Select a schema to query or perform an function (rpc) call.\n       *\n       * The schema needs to be on the list of exposed schemas inside Supabase.\n       *\n       * @param schema - The schema to query\n       */\n    }, {\n      key: \"schema\",\n      value: function schema(_schema) {\n        return new PostgrestClient(this.url, {\n          headers: this.headers,\n          schema: _schema,\n          fetch: this.fetch\n        });\n      }\n      /**\n       * Perform a function call.\n       *\n       * @param fn - The function name to call\n       * @param args - The arguments to pass to the function call\n       * @param options - Named parameters\n       * @param options.head - When set to `true`, `data` will not be returned.\n       * Useful if you only need the count.\n       * @param options.get - When set to `true`, the function will be called with\n       * read-only access mode.\n       * @param options.count - Count algorithm to use to count rows returned by the\n       * function. Only applicable for [set-returning\n       * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"rpc\",\n      value: function rpc(fn) {\n        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          _ref2$get = _ref2.get,\n          get = _ref2$get === void 0 ? false : _ref2$get,\n          count = _ref2.count;\n        var _a;\n        var method;\n        var url = new URL(`${this.url}/rpc/${fn}`);\n        var body;\n        if (head || get) {\n          method = head ? 'HEAD' : 'GET';\n          Object.entries(args)\n          // params with undefined value needs to be filtered out, otherwise it'll\n          // show up as `?param=undefined`\n          .filter(_ref3 => {\n            var _ref4 = _slicedToArray(_ref3, 2),\n              _ = _ref4[0],\n              value = _ref4[1];\n            return value !== undefined;\n          })\n          // array values need special syntax\n          .map(_ref5 => {\n            var _ref6 = _slicedToArray(_ref5, 2),\n              name = _ref6[0],\n              value = _ref6[1];\n            return [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`];\n          }).forEach(_ref7 => {\n            var _ref8 = _slicedToArray(_ref7, 2),\n              name = _ref8[0],\n              value = _ref8[1];\n            url.searchParams.append(name, value);\n          });\n        } else {\n          method = 'POST';\n          body = args;\n        }\n        var headers = new Headers(this.headers);\n        if (count) {\n          headers.set('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url,\n          headers,\n          schema: this.schemaName,\n          body,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n    }]);\n  }();\n  exports.default = PostgrestClient;\n});","lineCount":161,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[5,92,1,13,"default"],[5,99,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"require"],[6,28,1,13],[6,29,1,13,"_dependencyMap"],[6,43,1,13],[6,86,1,13,"default"],[6,93,1,13],[7,2,2,0],[7,6,2,4,"__importDefault"],[7,21,2,19],[7,24,2,23],[7,28,2,27],[7,32,2,31],[7,36,2,35],[7,37,2,36,"__importDefault"],[7,52,2,51],[7,56,2,56],[7,66,2,66,"mod"],[7,69,2,69],[7,71,2,71],[8,4,3,4],[8,11,3,12,"mod"],[8,14,3,15],[8,18,3,19,"mod"],[8,21,3,22],[8,22,3,23,"__esModule"],[8,32,3,33],[8,35,3,37,"mod"],[8,38,3,40],[8,41,3,43],[9,6,3,45],[9,15,3,54],[9,17,3,56,"mod"],[10,4,3,60],[10,5,3,61],[11,2,4,0],[11,3,4,1],[12,2,5,0,"Object"],[12,8,5,6],[12,9,5,7,"defineProperty"],[12,23,5,21],[12,24,5,22,"exports"],[12,31,5,29],[12,33,5,31],[12,45,5,43],[12,47,5,45],[13,4,5,47,"value"],[13,9,5,52],[13,11,5,54],[14,2,5,59],[14,3,5,60],[14,4,5,61],[15,2,6,0],[15,6,6,6,"PostgrestQueryBuilder_1"],[15,29,6,29],[15,32,6,32,"__importDefault"],[15,47,6,47],[15,48,6,48,"require"],[15,55,6,55],[15,56,6,55,"_dependencyMap"],[15,70,6,55],[15,100,6,81],[15,101,6,82],[15,102,6,83],[16,2,7,0],[16,6,7,6,"PostgrestFilterBuilder_1"],[16,30,7,30],[16,33,7,33,"__importDefault"],[16,48,7,48],[16,49,7,49,"require"],[16,56,7,56],[16,57,7,56,"_dependencyMap"],[16,71,7,56],[16,102,7,83],[16,103,7,84],[16,104,7,85],[17,2,8,0],[18,0,9,0],[19,0,10,0],[20,0,11,0],[21,0,12,0],[22,0,13,0],[23,0,14,0],[24,0,15,0],[25,0,16,0],[26,0,17,0],[27,2,8,0],[27,6,18,6,"PostgrestClient"],[27,21,18,21],[28,4,19,4],[29,4,20,4],[30,0,21,0],[31,0,22,0],[32,0,23,0],[33,0,24,0],[34,0,25,0],[35,0,26,0],[36,0,27,0],[37,0,28,0],[38,4,29,4],[38,13,29,4,"PostgrestClient"],[38,29,29,16,"url"],[38,32,29,19],[38,34,29,60],[39,6,29,60],[39,10,29,60,"_ref"],[39,14,29,60],[39,17,29,60,"arguments"],[39,26,29,60],[39,27,29,60,"length"],[39,33,29,60],[39,41,29,60,"arguments"],[39,50,29,60],[39,58,29,60,"undefined"],[39,67,29,60],[39,70,29,60,"arguments"],[39,79,29,60],[39,85,29,56],[39,86,29,57],[39,87,29,58],[40,8,29,58,"_ref$headers"],[40,20,29,58],[40,23,29,58,"_ref"],[40,27,29,58],[40,28,29,23,"headers"],[40,35,29,30],[41,8,29,23,"headers"],[41,15,29,30],[41,18,29,30,"_ref$headers"],[41,30,29,30],[41,44,29,33],[41,45,29,34],[41,46,29,35],[41,49,29,35,"_ref$headers"],[41,61,29,35],[42,8,29,37,"schema"],[42,14,29,43],[42,17,29,43,"_ref"],[42,21,29,43],[42,22,29,37,"schema"],[42,28,29,43],[43,8,29,45,"fetch"],[43,13,29,50],[43,16,29,50,"_ref"],[43,20,29,50],[43,21,29,45,"fetch"],[43,26,29,50],[44,6,29,50,"_classCallCheck"],[44,21,29,50],[44,28,29,50,"PostgrestClient"],[44,43,29,50],[45,6,30,8],[45,10,30,12],[45,11,30,13,"url"],[45,14,30,16],[45,17,30,19,"url"],[45,20,30,22],[46,6,31,8],[46,10,31,12],[46,11,31,13,"headers"],[46,18,31,20],[46,21,31,23],[46,25,31,27,"Headers"],[46,32,31,34],[46,33,31,35,"headers"],[46,40,31,42],[46,41,31,43],[47,6,32,8],[47,10,32,12],[47,11,32,13,"schemaName"],[47,21,32,23],[47,24,32,26,"schema"],[47,30,32,32],[48,6,33,8],[48,10,33,12],[48,11,33,13,"fetch"],[48,16,33,18],[48,19,33,21,"fetch"],[48,24,33,26],[49,4,34,4],[50,4,35,4],[51,0,36,0],[52,0,37,0],[53,0,38,0],[54,0,39,0],[55,4,35,4],[55,11,35,4,"_createClass"],[55,23,35,4],[55,24,35,4,"PostgrestClient"],[55,39,35,4],[56,6,35,4,"key"],[56,9,35,4],[57,6,35,4,"value"],[57,11,35,4],[57,13,40,4],[57,22,40,4,"from"],[57,26,40,8,"from"],[57,27,40,9,"relation"],[57,35,40,17],[57,37,40,19],[58,8,41,8],[58,12,41,14,"url"],[58,15,41,17],[58,18,41,20],[58,22,41,24,"URL"],[58,25,41,27],[58,26,41,28],[58,29,41,31],[58,33,41,35],[58,34,41,36,"url"],[58,37,41,39],[58,41,41,43,"relation"],[58,49,41,51],[58,51,41,53],[58,52,41,54],[59,8,42,8],[59,15,42,15],[59,19,42,19,"PostgrestQueryBuilder_1"],[59,42,42,42],[59,43,42,43,"default"],[59,50,42,50],[59,51,42,51,"url"],[59,54,42,54],[59,56,42,56],[60,10,43,12,"headers"],[60,17,43,19],[60,19,43,21],[60,23,43,25,"Headers"],[60,30,43,32],[60,31,43,33],[60,35,43,37],[60,36,43,38,"headers"],[60,43,43,45],[60,44,43,46],[61,10,44,12,"schema"],[61,16,44,18],[61,18,44,20],[61,22,44,24],[61,23,44,25,"schemaName"],[61,33,44,35],[62,10,45,12,"fetch"],[62,15,45,17],[62,17,45,19],[62,21,45,23],[62,22,45,24,"fetch"],[63,8,46,8],[63,9,46,9],[63,10,46,10],[64,6,47,4],[65,6,48,4],[66,0,49,0],[67,0,50,0],[68,0,51,0],[69,0,52,0],[70,0,53,0],[71,0,54,0],[72,4,48,4],[73,6,48,4,"key"],[73,9,48,4],[74,6,48,4,"value"],[74,11,48,4],[74,13,55,4],[74,22,55,4,"schema"],[74,28,55,10,"schema"],[74,29,55,11,"schema"],[74,36,55,17],[74,38,55,19],[75,8,56,8],[75,15,56,15],[75,19,56,19,"PostgrestClient"],[75,34,56,34],[75,35,56,35],[75,39,56,39],[75,40,56,40,"url"],[75,43,56,43],[75,45,56,45],[76,10,57,12,"headers"],[76,17,57,19],[76,19,57,21],[76,23,57,25],[76,24,57,26,"headers"],[76,31,57,33],[77,10,58,12,"schema"],[77,16,58,18],[77,18,58,12,"schema"],[77,25,58,18],[78,10,59,12,"fetch"],[78,15,59,17],[78,17,59,19],[78,21,59,23],[78,22,59,24,"fetch"],[79,8,60,8],[79,9,60,9],[79,10,60,10],[80,6,61,4],[81,6,62,4],[82,0,63,0],[83,0,64,0],[84,0,65,0],[85,0,66,0],[86,0,67,0],[87,0,68,0],[88,0,69,0],[89,0,70,0],[90,0,71,0],[91,0,72,0],[92,0,73,0],[93,0,74,0],[94,0,75,0],[95,0,76,0],[96,0,77,0],[97,0,78,0],[98,0,79,0],[99,0,80,0],[100,0,81,0],[101,0,82,0],[102,0,83,0],[103,0,84,0],[104,4,62,4],[105,6,62,4,"key"],[105,9,62,4],[106,6,62,4,"value"],[106,11,62,4],[106,13,85,4],[106,22,85,4,"rpc"],[106,25,85,7,"rpc"],[106,26,85,8,"fn"],[106,28,85,10],[106,30,85,67],[107,8,85,67],[107,12,85,12,"args"],[107,16,85,16],[107,19,85,16,"arguments"],[107,28,85,16],[107,29,85,16,"length"],[107,35,85,16],[107,43,85,16,"arguments"],[107,52,85,16],[107,60,85,16,"undefined"],[107,69,85,16],[107,72,85,16,"arguments"],[107,81,85,16],[107,87,85,19],[107,88,85,20],[107,89,85,21],[108,8,85,21],[108,12,85,21,"_ref2"],[108,17,85,21],[108,20,85,21,"arguments"],[108,29,85,21],[108,30,85,21,"length"],[108,36,85,21],[108,44,85,21,"arguments"],[108,53,85,21],[108,61,85,21,"undefined"],[108,70,85,21],[108,73,85,21,"arguments"],[108,82,85,21],[108,88,85,63],[108,89,85,64],[108,90,85,65],[109,10,85,65,"_ref2$head"],[109,20,85,65],[109,23,85,65,"_ref2"],[109,28,85,65],[109,29,85,25,"head"],[109,33,85,29],[110,10,85,25,"head"],[110,14,85,29],[110,17,85,29,"_ref2$head"],[110,27,85,29],[110,41,85,32],[110,46,85,37],[110,49,85,37,"_ref2$head"],[110,59,85,37],[111,10,85,37,"_ref2$get"],[111,19,85,37],[111,22,85,37,"_ref2"],[111,27,85,37],[111,28,85,39,"get"],[111,31,85,42],[112,10,85,39,"get"],[112,13,85,42],[112,16,85,42,"_ref2$get"],[112,25,85,42],[112,39,85,45],[112,44,85,50],[112,47,85,50,"_ref2$get"],[112,56,85,50],[113,10,85,52,"count"],[113,15,85,57],[113,18,85,57,"_ref2"],[113,23,85,57],[113,24,85,52,"count"],[113,29,85,57],[114,8,86,8],[114,12,86,12,"_a"],[114,14,86,14],[115,8,87,8],[115,12,87,12,"method"],[115,18,87,18],[116,8,88,8],[116,12,88,14,"url"],[116,15,88,17],[116,18,88,20],[116,22,88,24,"URL"],[116,25,88,27],[116,26,88,28],[116,29,88,31],[116,33,88,35],[116,34,88,36,"url"],[116,37,88,39],[116,45,88,47,"fn"],[116,47,88,49],[116,49,88,51],[116,50,88,52],[117,8,89,8],[117,12,89,12,"body"],[117,16,89,16],[118,8,90,8],[118,12,90,12,"head"],[118,16,90,16],[118,20,90,20,"get"],[118,23,90,23],[118,25,90,25],[119,10,91,12,"method"],[119,16,91,18],[119,19,91,21,"head"],[119,23,91,25],[119,26,91,28],[119,32,91,34],[119,35,91,37],[119,40,91,42],[120,10,92,12,"Object"],[120,16,92,18],[120,17,92,19,"entries"],[120,24,92,26],[120,25,92,27,"args"],[120,29,92,31],[121,10,93,16],[122,10,94,16],[123,10,94,16],[123,11,95,17,"filter"],[123,17,95,23],[123,18,95,24,"_ref3"],[123,23,95,24],[124,12,95,24],[124,16,95,24,"_ref4"],[124,21,95,24],[124,24,95,24,"_slicedToArray"],[124,38,95,24],[124,39,95,24,"_ref3"],[124,44,95,24],[125,14,95,26,"_"],[125,15,95,27],[125,18,95,27,"_ref4"],[125,23,95,27],[126,14,95,29,"value"],[126,19,95,34],[126,22,95,34,"_ref4"],[126,27,95,34],[127,12,95,34],[127,19,95,40,"value"],[127,24,95,45],[127,29,95,50,"undefined"],[127,38,95,59],[128,10,95,59],[129,10,96,16],[130,10,96,16],[130,11,97,17,"map"],[130,14,97,20],[130,15,97,21,"_ref5"],[130,20,97,21],[131,12,97,21],[131,16,97,21,"_ref6"],[131,21,97,21],[131,24,97,21,"_slicedToArray"],[131,38,97,21],[131,39,97,21,"_ref5"],[131,44,97,21],[132,14,97,23,"name"],[132,18,97,27],[132,21,97,27,"_ref6"],[132,26,97,27],[133,14,97,29,"value"],[133,19,97,34],[133,22,97,34,"_ref6"],[133,27,97,34],[134,12,97,34],[134,19,97,40],[134,20,97,41,"name"],[134,24,97,45],[134,26,97,47,"Array"],[134,31,97,52],[134,32,97,53,"isArray"],[134,39,97,60],[134,40,97,61,"value"],[134,45,97,66],[134,46,97,67],[134,49,97,70],[134,53,97,74,"value"],[134,58,97,79],[134,59,97,80,"join"],[134,63,97,84],[134,64,97,85],[134,67,97,88],[134,68,97,89],[134,71,97,92],[134,74,97,95],[134,77,97,98,"value"],[134,82,97,103],[134,84,97,105],[134,85,97,106],[135,10,97,106],[135,12,97,107],[135,13,98,17,"forEach"],[135,20,98,24],[135,21,98,25,"_ref7"],[135,26,98,25],[135,30,98,44],[136,12,98,44],[136,16,98,44,"_ref8"],[136,21,98,44],[136,24,98,44,"_slicedToArray"],[136,38,98,44],[136,39,98,44,"_ref7"],[136,44,98,44],[137,14,98,27,"name"],[137,18,98,31],[137,21,98,31,"_ref8"],[137,26,98,31],[138,14,98,33,"value"],[138,19,98,38],[138,22,98,38,"_ref8"],[138,27,98,38],[139,12,99,16,"url"],[139,15,99,19],[139,16,99,20,"searchParams"],[139,28,99,32],[139,29,99,33,"append"],[139,35,99,39],[139,36,99,40,"name"],[139,40,99,44],[139,42,99,46,"value"],[139,47,99,51],[139,48,99,52],[140,10,100,12],[140,11,100,13],[140,12,100,14],[141,8,101,8],[141,9,101,9],[141,15,102,13],[142,10,103,12,"method"],[142,16,103,18],[142,19,103,21],[142,25,103,27],[143,10,104,12,"body"],[143,14,104,16],[143,17,104,19,"args"],[143,21,104,23],[144,8,105,8],[145,8,106,8],[145,12,106,14,"headers"],[145,19,106,21],[145,22,106,24],[145,26,106,28,"Headers"],[145,33,106,35],[145,34,106,36],[145,38,106,40],[145,39,106,41,"headers"],[145,46,106,48],[145,47,106,49],[146,8,107,8],[146,12,107,12,"count"],[146,17,107,17],[146,19,107,19],[147,10,108,12,"headers"],[147,17,108,19],[147,18,108,20,"set"],[147,21,108,23],[147,22,108,24],[147,30,108,32],[147,32,108,34],[147,41,108,43,"count"],[147,46,108,48],[147,48,108,50],[147,49,108,51],[148,8,109,8],[149,8,110,8],[149,15,110,15],[149,19,110,19,"PostgrestFilterBuilder_1"],[149,43,110,43],[149,44,110,44,"default"],[149,51,110,51],[149,52,110,52],[150,10,111,12,"method"],[150,16,111,18],[151,10,112,12,"url"],[151,13,112,15],[152,10,113,12,"headers"],[152,17,113,19],[153,10,114,12,"schema"],[153,16,114,18],[153,18,114,20],[153,22,114,24],[153,23,114,25,"schemaName"],[153,33,114,35],[154,10,115,12,"body"],[154,14,115,16],[155,10,116,12,"fetch"],[155,15,116,17],[155,17,116,19],[155,18,116,20,"_a"],[155,20,116,22],[155,23,116,25],[155,27,116,29],[155,28,116,30,"fetch"],[155,33,116,35],[155,39,116,41],[155,43,116,45],[155,47,116,49,"_a"],[155,49,116,51],[155,54,116,56],[155,59,116,61],[155,60,116,62],[155,63,116,65,"_a"],[155,65,116,67],[155,68,116,70,"fetch"],[156,8,117,8],[156,9,117,9],[156,10,117,10],[157,6,118,4],[158,4,118,5],[159,2,118,5],[160,2,120,0,"exports"],[160,9,120,7],[160,10,120,8,"default"],[160,17,120,15],[160,20,120,18,"PostgrestClient"],[160,35,120,33],[161,0,120,34],[161,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestClient","constructor","from","schema","rpc","Object.entries.filter$argument_0","Object.entries.filter.map$argument_0","Object.entries.filter.map.forEach$argument_0"],"mappings":"AAA;wDCC;CDE;AEc;ICW;KDK;IEM;KFO;IGQ;KHM;IIwB;wBCU,mCD;qBEE,qFF;yBGC;aHE;KJkB;CFC"},"hasCjsExports":true},"type":"js/module"}]}