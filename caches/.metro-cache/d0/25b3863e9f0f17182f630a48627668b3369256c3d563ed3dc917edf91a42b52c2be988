{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/callSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"378KbBHdmndC3iMXZ2Ix8oB3LeE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"],"imports":1}},{"name":"./PostgrestBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":43,"index":259},"end":{"line":6,"column":72,"index":288}}],"key":"v25p5H95xQ2bcPoR7FGoD/7jboE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\").default;\n  var _callSuper = require(_dependencyMap[2], \"@babel/runtime/helpers/callSuper\").default;\n  var _inherits = require(_dependencyMap[3], \"@babel/runtime/helpers/inherits\").default;\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var PostgrestBuilder_1 = __importDefault(require(_dependencyMap[4], \"./PostgrestBuilder\"));\n  var PostgrestTransformBuilder = /*#__PURE__*/function (_PostgrestBuilder_1$d) {\n    function PostgrestTransformBuilder() {\n      _classCallCheck(this, PostgrestTransformBuilder);\n      return _callSuper(this, PostgrestTransformBuilder, arguments);\n    }\n    _inherits(PostgrestTransformBuilder, _PostgrestBuilder_1$d);\n    return _createClass(PostgrestTransformBuilder, [{\n      key: \"select\",\n      value:\n      /**\n       * Perform a SELECT on the query result.\n       *\n       * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n       * return modified rows. By calling this method, modified rows are returned in\n       * `data`.\n       *\n       * @param columns - The columns to retrieve, separated by commas\n       */\n      function select(columns) {\n        // Remove whitespaces except when quoted\n        var quoted = false;\n        var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n          if (/\\s/.test(c) && !quoted) {\n            return '';\n          }\n          if (c === '\"') {\n            quoted = !quoted;\n          }\n          return c;\n        }).join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        this.headers.append('Prefer', 'return=representation');\n        return this;\n      }\n      /**\n       * Order the query result by `column`.\n       *\n       * You can call this method multiple times to order by multiple columns.\n       *\n       * You can order referenced tables, but it only affects the ordering of the\n       * parent table if you use `!inner` in the query.\n       *\n       * @param column - The column to order by\n       * @param options - Named parameters\n       * @param options.ascending - If `true`, the result will be in ascending order\n       * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n       * `null`s appear last.\n       * @param options.referencedTable - Set this to order a referenced table by\n       * its columns\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"order\",\n      value: function order(column) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$ascending = _ref.ascending,\n          ascending = _ref$ascending === void 0 ? true : _ref$ascending,\n          nullsFirst = _ref.nullsFirst,\n          foreignTable = _ref.foreignTable,\n          _ref$referencedTable = _ref.referencedTable,\n          referencedTable = _ref$referencedTable === void 0 ? foreignTable : _ref$referencedTable;\n        var key = referencedTable ? `${referencedTable}.order` : 'order';\n        var existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n      }\n      /**\n       * Limit the query result by `count`.\n       *\n       * @param count - The maximum number of rows to return\n       * @param options - Named parameters\n       * @param options.referencedTable - Set this to limit rows of referenced\n       * tables instead of the parent table\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"limit\",\n      value: function limit(count) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          foreignTable = _ref2.foreignTable,\n          _ref2$referencedTable = _ref2.referencedTable,\n          referencedTable = _ref2$referencedTable === void 0 ? foreignTable : _ref2$referencedTable;\n        var key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n      }\n      /**\n       * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n       * Only records within this range are returned.\n       * This respects the query order and if there is no order clause the range could behave unexpectedly.\n       * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n       * and fourth rows of the query.\n       *\n       * @param from - The starting index from which to limit the result\n       * @param to - The last index to which to limit the result\n       * @param options - Named parameters\n       * @param options.referencedTable - Set this to limit rows of referenced\n       * tables instead of the parent table\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"range\",\n      value: function range(from, to) {\n        var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          foreignTable = _ref3.foreignTable,\n          _ref3$referencedTable = _ref3.referencedTable,\n          referencedTable = _ref3$referencedTable === void 0 ? foreignTable : _ref3$referencedTable;\n        var keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n        var keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n      }\n      /**\n       * Set the AbortSignal for the fetch request.\n       *\n       * @param signal - The AbortSignal to use for the fetch request\n       */\n    }, {\n      key: \"abortSignal\",\n      value: function abortSignal(signal) {\n        this.signal = signal;\n        return this;\n      }\n      /**\n       * Return `data` as a single object instead of an array of objects.\n       *\n       * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n       * returns an error.\n       */\n    }, {\n      key: \"single\",\n      value: function single() {\n        this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n        return this;\n      }\n      /**\n       * Return `data` as a single object instead of an array of objects.\n       *\n       * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n       * this returns an error.\n       */\n    }, {\n      key: \"maybeSingle\",\n      value: function maybeSingle() {\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.method === 'GET') {\n          this.headers.set('Accept', 'application/json');\n        } else {\n          this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n        }\n        this.isMaybeSingle = true;\n        return this;\n      }\n      /**\n       * Return `data` as a string in CSV format.\n       */\n    }, {\n      key: \"csv\",\n      value: function csv() {\n        this.headers.set('Accept', 'text/csv');\n        return this;\n      }\n      /**\n       * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n       */\n    }, {\n      key: \"geojson\",\n      value: function geojson() {\n        this.headers.set('Accept', 'application/geo+json');\n        return this;\n      }\n      /**\n       * Return `data` as the EXPLAIN plan for the query.\n       *\n       * You need to enable the\n       * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n       * setting before using this method.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.analyze - If `true`, the query will be executed and the\n       * actual run time will be returned\n       *\n       * @param options.verbose - If `true`, the query identifier will be returned\n       * and `data` will include the output columns of the query\n       *\n       * @param options.settings - If `true`, include information on configuration\n       * parameters that affect query planning\n       *\n       * @param options.buffers - If `true`, include information on buffer usage\n       *\n       * @param options.wal - If `true`, include information on WAL record generation\n       *\n       * @param options.format - The format of the output, can be `\"text\"` (default)\n       * or `\"json\"`\n       */\n    }, {\n      key: \"explain\",\n      value: function explain() {\n        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$analyze = _ref4.analyze,\n          analyze = _ref4$analyze === void 0 ? false : _ref4$analyze,\n          _ref4$verbose = _ref4.verbose,\n          verbose = _ref4$verbose === void 0 ? false : _ref4$verbose,\n          _ref4$settings = _ref4.settings,\n          settings = _ref4$settings === void 0 ? false : _ref4$settings,\n          _ref4$buffers = _ref4.buffers,\n          buffers = _ref4$buffers === void 0 ? false : _ref4$buffers,\n          _ref4$wal = _ref4.wal,\n          wal = _ref4$wal === void 0 ? false : _ref4$wal,\n          _ref4$format = _ref4.format,\n          format = _ref4$format === void 0 ? 'text' : _ref4$format;\n        var _a;\n        var options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        var forMediatype = (_a = this.headers.get('Accept')) !== null && _a !== void 0 ? _a : 'application/json';\n        this.headers.set('Accept', `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`);\n        if (format === 'json') {\n          return this;\n        } else {\n          return this;\n        }\n      }\n      /**\n       * Rollback the query.\n       *\n       * `data` will still be returned, but the query is not committed.\n       */\n    }, {\n      key: \"rollback\",\n      value: function rollback() {\n        this.headers.append('Prefer', 'tx=rollback');\n        return this;\n      }\n      /**\n       * Override the type of the returned `data`.\n       *\n       * @typeParam NewResult - The new result type to override with\n       * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n       */\n    }, {\n      key: \"returns\",\n      value: function returns() {\n        return this;\n      }\n      /**\n       * Set the maximum number of rows that can be affected by the query.\n       * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.\n       *\n       * @param value - The maximum number of rows that can be affected\n       */\n    }, {\n      key: \"maxAffected\",\n      value: function maxAffected(value) {\n        this.headers.append('Prefer', 'handling=strict');\n        this.headers.append('Prefer', `max-affected=${value}`);\n        return this;\n      }\n    }]);\n  }(PostgrestBuilder_1.default);\n  exports.default = PostgrestTransformBuilder;\n});","lineCount":284,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[4,92,1,13,"default"],[4,99,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[5,86,1,13,"default"],[5,93,1,13],[6,2,1,13],[6,6,1,13,"_callSuper"],[6,16,1,13],[6,19,1,13,"require"],[6,26,1,13],[6,27,1,13,"_dependencyMap"],[6,41,1,13],[6,82,1,13,"default"],[6,89,1,13],[7,2,1,13],[7,6,1,13,"_inherits"],[7,15,1,13],[7,18,1,13,"require"],[7,25,1,13],[7,26,1,13,"_dependencyMap"],[7,40,1,13],[7,80,1,13,"default"],[7,87,1,13],[8,2,2,0],[8,6,2,4,"__importDefault"],[8,21,2,19],[8,24,2,23],[8,28,2,27],[8,32,2,31],[8,36,2,35],[8,37,2,36,"__importDefault"],[8,52,2,51],[8,56,2,56],[8,66,2,66,"mod"],[8,69,2,69],[8,71,2,71],[9,4,3,4],[9,11,3,12,"mod"],[9,14,3,15],[9,18,3,19,"mod"],[9,21,3,22],[9,22,3,23,"__esModule"],[9,32,3,33],[9,35,3,37,"mod"],[9,38,3,40],[9,41,3,43],[10,6,3,45],[10,15,3,54],[10,17,3,56,"mod"],[11,4,3,60],[11,5,3,61],[12,2,4,0],[12,3,4,1],[13,2,5,0,"Object"],[13,8,5,6],[13,9,5,7,"defineProperty"],[13,23,5,21],[13,24,5,22,"exports"],[13,31,5,29],[13,33,5,31],[13,45,5,43],[13,47,5,45],[14,4,5,47,"value"],[14,9,5,52],[14,11,5,54],[15,2,5,59],[15,3,5,60],[15,4,5,61],[16,2,6,0],[16,6,6,6,"PostgrestBuilder_1"],[16,24,6,24],[16,27,6,27,"__importDefault"],[16,42,6,42],[16,43,6,43,"require"],[16,50,6,50],[16,51,6,50,"_dependencyMap"],[16,65,6,50],[16,90,6,71],[16,91,6,72],[16,92,6,73],[17,2,6,74],[17,6,7,6,"PostgrestTransformBuilder"],[17,31,7,31],[17,57,7,31,"_PostgrestBuilder_1$d"],[17,78,7,31],[18,4,7,31],[18,13,7,31,"PostgrestTransformBuilder"],[18,39,7,31],[19,6,7,31,"_classCallCheck"],[19,21,7,31],[19,28,7,31,"PostgrestTransformBuilder"],[19,53,7,31],[20,6,7,31],[20,13,7,31,"_callSuper"],[20,23,7,31],[20,30,7,31,"PostgrestTransformBuilder"],[20,55,7,31],[20,57,7,31,"arguments"],[20,66,7,31],[21,4,7,31],[22,4,7,31,"_inherits"],[22,13,7,31],[22,14,7,31,"PostgrestTransformBuilder"],[22,39,7,31],[22,41,7,31,"_PostgrestBuilder_1$d"],[22,62,7,31],[23,4,7,31],[23,11,7,31,"_createClass"],[23,23,7,31],[23,24,7,31,"PostgrestTransformBuilder"],[23,49,7,31],[24,6,7,31,"key"],[24,9,7,31],[25,6,7,31,"value"],[25,11,7,31],[26,6,8,4],[27,0,9,0],[28,0,10,0],[29,0,11,0],[30,0,12,0],[31,0,13,0],[32,0,14,0],[33,0,15,0],[34,0,16,0],[35,6,17,4],[35,15,17,4,"select"],[35,21,17,10,"select"],[35,22,17,11,"columns"],[35,29,17,18],[35,31,17,20],[36,8,18,8],[37,8,19,8],[37,12,19,12,"quoted"],[37,18,19,18],[37,21,19,21],[37,26,19,26],[38,8,20,8],[38,12,20,14,"cleanedColumns"],[38,26,20,28],[38,29,20,31],[38,30,20,32,"columns"],[38,37,20,39],[38,42,20,44],[38,46,20,48],[38,50,20,52,"columns"],[38,57,20,59],[38,62,20,64],[38,67,20,69],[38,68,20,70],[38,71,20,73,"columns"],[38,78,20,80],[38,81,20,83],[38,84,20,86],[38,86,21,13,"split"],[38,91,21,18],[38,92,21,19],[38,94,21,21],[38,95,21,22],[38,96,22,13,"map"],[38,99,22,16],[38,100,22,18,"c"],[38,101,22,19],[38,105,22,24],[39,10,23,12],[39,14,23,16],[39,18,23,20],[39,19,23,21,"test"],[39,23,23,25],[39,24,23,26,"c"],[39,25,23,27],[39,26,23,28],[39,30,23,32],[39,31,23,33,"quoted"],[39,37,23,39],[39,39,23,41],[40,12,24,16],[40,19,24,23],[40,21,24,25],[41,10,25,12],[42,10,26,12],[42,14,26,16,"c"],[42,15,26,17],[42,20,26,22],[42,23,26,25],[42,25,26,27],[43,12,27,16,"quoted"],[43,18,27,22],[43,21,27,25],[43,22,27,26,"quoted"],[43,28,27,32],[44,10,28,12],[45,10,29,12],[45,17,29,19,"c"],[45,18,29,20],[46,8,30,8],[46,9,30,9],[46,10,30,10],[46,11,31,13,"join"],[46,15,31,17],[46,16,31,18],[46,18,31,20],[46,19,31,21],[47,8,32,8],[47,12,32,12],[47,13,32,13,"url"],[47,16,32,16],[47,17,32,17,"searchParams"],[47,29,32,29],[47,30,32,30,"set"],[47,33,32,33],[47,34,32,34],[47,42,32,42],[47,44,32,44,"cleanedColumns"],[47,58,32,58],[47,59,32,59],[48,8,33,8],[48,12,33,12],[48,13,33,13,"headers"],[48,20,33,20],[48,21,33,21,"append"],[48,27,33,27],[48,28,33,28],[48,36,33,36],[48,38,33,38],[48,61,33,61],[48,62,33,62],[49,8,34,8],[49,15,34,15],[49,19,34,19],[50,6,35,4],[51,6,36,4],[52,0,37,0],[53,0,38,0],[54,0,39,0],[55,0,40,0],[56,0,41,0],[57,0,42,0],[58,0,43,0],[59,0,44,0],[60,0,45,0],[61,0,46,0],[62,0,47,0],[63,0,48,0],[64,0,49,0],[65,0,50,0],[66,0,51,0],[67,0,52,0],[68,0,53,0],[69,4,36,4],[70,6,36,4,"key"],[70,9,36,4],[71,6,36,4,"value"],[71,11,36,4],[71,13,54,4],[71,22,54,4,"order"],[71,27,54,9,"order"],[71,28,54,10,"column"],[71,34,54,16],[71,36,54,104],[72,8,54,104],[72,12,54,104,"_ref"],[72,16,54,104],[72,19,54,104,"arguments"],[72,28,54,104],[72,29,54,104,"length"],[72,35,54,104],[72,43,54,104,"arguments"],[72,52,54,104],[72,60,54,104,"undefined"],[72,69,54,104],[72,72,54,104,"arguments"],[72,81,54,104],[72,87,54,100],[72,88,54,101],[72,89,54,102],[73,10,54,102,"_ref$ascending"],[73,24,54,102],[73,27,54,102,"_ref"],[73,31,54,102],[73,32,54,20,"ascending"],[73,41,54,29],[74,10,54,20,"ascending"],[74,19,54,29],[74,22,54,29,"_ref$ascending"],[74,36,54,29],[74,50,54,32],[74,54,54,36],[74,57,54,36,"_ref$ascending"],[74,71,54,36],[75,10,54,38,"nullsFirst"],[75,20,54,48],[75,23,54,48,"_ref"],[75,27,54,48],[75,28,54,38,"nullsFirst"],[75,38,54,48],[76,10,54,50,"foreignTable"],[76,22,54,62],[76,25,54,62,"_ref"],[76,29,54,62],[76,30,54,50,"foreignTable"],[76,42,54,62],[77,10,54,62,"_ref$referencedTable"],[77,30,54,62],[77,33,54,62,"_ref"],[77,37,54,62],[77,38,54,64,"referencedTable"],[77,53,54,79],[78,10,54,64,"referencedTable"],[78,25,54,79],[78,28,54,79,"_ref$referencedTable"],[78,48,54,79],[78,62,54,82,"foreignTable"],[78,74,54,94],[78,77,54,94,"_ref$referencedTable"],[78,97,54,94],[79,8,55,8],[79,12,55,14,"key"],[79,15,55,17],[79,18,55,20,"referencedTable"],[79,33,55,35],[79,36,55,38],[79,39,55,41,"referencedTable"],[79,54,55,56],[79,62,55,64],[79,65,55,67],[79,72,55,74],[80,8,56,8],[80,12,56,14,"existingOrder"],[80,25,56,27],[80,28,56,30],[80,32,56,34],[80,33,56,35,"url"],[80,36,56,38],[80,37,56,39,"searchParams"],[80,49,56,51],[80,50,56,52,"get"],[80,53,56,55],[80,54,56,56,"key"],[80,57,56,59],[80,58,56,60],[81,8,57,8],[81,12,57,12],[81,13,57,13,"url"],[81,16,57,16],[81,17,57,17,"searchParams"],[81,29,57,29],[81,30,57,30,"set"],[81,33,57,33],[81,34,57,34,"key"],[81,37,57,37],[81,39,57,39],[81,42,57,42,"existingOrder"],[81,55,57,55],[81,58,57,58],[81,61,57,61,"existingOrder"],[81,74,57,74],[81,77,57,77],[81,80,57,80],[81,82,57,82],[81,85,57,85,"column"],[81,91,57,91],[81,95,57,95,"ascending"],[81,104,57,104],[81,107,57,107],[81,112,57,112],[81,115,57,115],[81,121,57,121],[81,124,57,124,"nullsFirst"],[81,134,57,134],[81,139,57,139,"undefined"],[81,148,57,148],[81,151,57,151],[81,153,57,153],[81,156,57,156,"nullsFirst"],[81,166,57,166],[81,169,57,169],[81,182,57,182],[81,185,57,185],[81,197,57,197],[81,199,57,199],[81,200,57,200],[82,8,58,8],[82,15,58,15],[82,19,58,19],[83,6,59,4],[84,6,60,4],[85,0,61,0],[86,0,62,0],[87,0,63,0],[88,0,64,0],[89,0,65,0],[90,0,66,0],[91,0,67,0],[92,0,68,0],[93,0,69,0],[94,4,60,4],[95,6,60,4,"key"],[95,9,60,4],[96,6,60,4,"value"],[96,11,60,4],[96,13,70,4],[96,22,70,4,"limit"],[96,27,70,9,"limit"],[96,28,70,10,"count"],[96,33,70,15],[96,35,70,73],[97,8,70,73],[97,12,70,73,"_ref2"],[97,17,70,73],[97,20,70,73,"arguments"],[97,29,70,73],[97,30,70,73,"length"],[97,36,70,73],[97,44,70,73,"arguments"],[97,53,70,73],[97,61,70,73,"undefined"],[97,70,70,73],[97,73,70,73,"arguments"],[97,82,70,73],[97,88,70,69],[97,89,70,70],[97,90,70,71],[98,10,70,19,"foreignTable"],[98,22,70,31],[98,25,70,31,"_ref2"],[98,30,70,31],[98,31,70,19,"foreignTable"],[98,43,70,31],[99,10,70,31,"_ref2$referencedTable"],[99,31,70,31],[99,34,70,31,"_ref2"],[99,39,70,31],[99,40,70,33,"referencedTable"],[99,55,70,48],[100,10,70,33,"referencedTable"],[100,25,70,48],[100,28,70,48,"_ref2$referencedTable"],[100,49,70,48],[100,63,70,51,"foreignTable"],[100,75,70,63],[100,78,70,63,"_ref2$referencedTable"],[100,99,70,63],[101,8,71,8],[101,12,71,14,"key"],[101,15,71,17],[101,18,71,20],[101,25,71,27,"referencedTable"],[101,40,71,42],[101,45,71,47],[101,56,71,58],[101,59,71,61],[101,66,71,68],[101,69,71,71],[101,72,71,74,"referencedTable"],[101,87,71,89],[101,95,71,97],[102,8,72,8],[102,12,72,12],[102,13,72,13,"url"],[102,16,72,16],[102,17,72,17,"searchParams"],[102,29,72,29],[102,30,72,30,"set"],[102,33,72,33],[102,34,72,34,"key"],[102,37,72,37],[102,39,72,39],[102,42,72,42,"count"],[102,47,72,47],[102,49,72,49],[102,50,72,50],[103,8,73,8],[103,15,73,15],[103,19,73,19],[104,6,74,4],[105,6,75,4],[106,0,76,0],[107,0,77,0],[108,0,78,0],[109,0,79,0],[110,0,80,0],[111,0,81,0],[112,0,82,0],[113,0,83,0],[114,0,84,0],[115,0,85,0],[116,0,86,0],[117,0,87,0],[118,0,88,0],[119,0,89,0],[120,4,75,4],[121,6,75,4,"key"],[121,9,75,4],[122,6,75,4,"value"],[122,11,75,4],[122,13,90,4],[122,22,90,4,"range"],[122,27,90,9,"range"],[122,28,90,10,"from"],[122,32,90,14],[122,34,90,16,"to"],[122,36,90,18],[122,38,90,76],[123,8,90,76],[123,12,90,76,"_ref3"],[123,17,90,76],[123,20,90,76,"arguments"],[123,29,90,76],[123,30,90,76,"length"],[123,36,90,76],[123,44,90,76,"arguments"],[123,53,90,76],[123,61,90,76,"undefined"],[123,70,90,76],[123,73,90,76,"arguments"],[123,82,90,76],[123,88,90,72],[123,89,90,73],[123,90,90,74],[124,10,90,22,"foreignTable"],[124,22,90,34],[124,25,90,34,"_ref3"],[124,30,90,34],[124,31,90,22,"foreignTable"],[124,43,90,34],[125,10,90,34,"_ref3$referencedTable"],[125,31,90,34],[125,34,90,34,"_ref3"],[125,39,90,34],[125,40,90,36,"referencedTable"],[125,55,90,51],[126,10,90,36,"referencedTable"],[126,25,90,51],[126,28,90,51,"_ref3$referencedTable"],[126,49,90,51],[126,63,90,54,"foreignTable"],[126,75,90,66],[126,78,90,66,"_ref3$referencedTable"],[126,99,90,66],[127,8,91,8],[127,12,91,14,"keyOffset"],[127,21,91,23],[127,24,91,26],[127,31,91,33,"referencedTable"],[127,46,91,48],[127,51,91,53],[127,62,91,64],[127,65,91,67],[127,73,91,75],[127,76,91,78],[127,79,91,81,"referencedTable"],[127,94,91,96],[127,103,91,105],[128,8,92,8],[128,12,92,14,"keyLimit"],[128,20,92,22],[128,23,92,25],[128,30,92,32,"referencedTable"],[128,45,92,47],[128,50,92,52],[128,61,92,63],[128,64,92,66],[128,71,92,73],[128,74,92,76],[128,77,92,79,"referencedTable"],[128,92,92,94],[128,100,92,102],[129,8,93,8],[129,12,93,12],[129,13,93,13,"url"],[129,16,93,16],[129,17,93,17,"searchParams"],[129,29,93,29],[129,30,93,30,"set"],[129,33,93,33],[129,34,93,34,"keyOffset"],[129,43,93,43],[129,45,93,45],[129,48,93,48,"from"],[129,52,93,52],[129,54,93,54],[129,55,93,55],[130,8,94,8],[131,8,95,8],[131,12,95,12],[131,13,95,13,"url"],[131,16,95,16],[131,17,95,17,"searchParams"],[131,29,95,29],[131,30,95,30,"set"],[131,33,95,33],[131,34,95,34,"keyLimit"],[131,42,95,42],[131,44,95,44],[131,47,95,47,"to"],[131,49,95,49],[131,52,95,52,"from"],[131,56,95,56],[131,59,95,59],[131,60,95,60],[131,62,95,62],[131,63,95,63],[132,8,96,8],[132,15,96,15],[132,19,96,19],[133,6,97,4],[134,6,98,4],[135,0,99,0],[136,0,100,0],[137,0,101,0],[138,0,102,0],[139,4,98,4],[140,6,98,4,"key"],[140,9,98,4],[141,6,98,4,"value"],[141,11,98,4],[141,13,103,4],[141,22,103,4,"abortSignal"],[141,33,103,15,"abortSignal"],[141,34,103,16,"signal"],[141,40,103,22],[141,42,103,24],[142,8,104,8],[142,12,104,12],[142,13,104,13,"signal"],[142,19,104,19],[142,22,104,22,"signal"],[142,28,104,28],[143,8,105,8],[143,15,105,15],[143,19,105,19],[144,6,106,4],[145,6,107,4],[146,0,108,0],[147,0,109,0],[148,0,110,0],[149,0,111,0],[150,0,112,0],[151,4,107,4],[152,6,107,4,"key"],[152,9,107,4],[153,6,107,4,"value"],[153,11,107,4],[153,13,113,4],[153,22,113,4,"single"],[153,28,113,10,"single"],[153,29,113,10],[153,31,113,13],[154,8,114,8],[154,12,114,12],[154,13,114,13,"headers"],[154,20,114,20],[154,21,114,21,"set"],[154,24,114,24],[154,25,114,25],[154,33,114,33],[154,35,114,35],[154,70,114,70],[154,71,114,71],[155,8,115,8],[155,15,115,15],[155,19,115,19],[156,6,116,4],[157,6,117,4],[158,0,118,0],[159,0,119,0],[160,0,120,0],[161,0,121,0],[162,0,122,0],[163,4,117,4],[164,6,117,4,"key"],[164,9,117,4],[165,6,117,4,"value"],[165,11,117,4],[165,13,123,4],[165,22,123,4,"maybeSingle"],[165,33,123,15,"maybeSingle"],[165,34,123,15],[165,36,123,18],[166,8,124,8],[167,8,125,8],[168,8,126,8],[168,12,126,12],[168,16,126,16],[168,17,126,17,"method"],[168,23,126,23],[168,28,126,28],[168,33,126,33],[168,35,126,35],[169,10,127,12],[169,14,127,16],[169,15,127,17,"headers"],[169,22,127,24],[169,23,127,25,"set"],[169,26,127,28],[169,27,127,29],[169,35,127,37],[169,37,127,39],[169,55,127,57],[169,56,127,58],[170,8,128,8],[170,9,128,9],[170,15,129,13],[171,10,130,12],[171,14,130,16],[171,15,130,17,"headers"],[171,22,130,24],[171,23,130,25,"set"],[171,26,130,28],[171,27,130,29],[171,35,130,37],[171,37,130,39],[171,72,130,74],[171,73,130,75],[172,8,131,8],[173,8,132,8],[173,12,132,12],[173,13,132,13,"isMaybeSingle"],[173,26,132,26],[173,29,132,29],[173,33,132,33],[174,8,133,8],[174,15,133,15],[174,19,133,19],[175,6,134,4],[176,6,135,4],[177,0,136,0],[178,0,137,0],[179,4,135,4],[180,6,135,4,"key"],[180,9,135,4],[181,6,135,4,"value"],[181,11,135,4],[181,13,138,4],[181,22,138,4,"csv"],[181,25,138,7,"csv"],[181,26,138,7],[181,28,138,10],[182,8,139,8],[182,12,139,12],[182,13,139,13,"headers"],[182,20,139,20],[182,21,139,21,"set"],[182,24,139,24],[182,25,139,25],[182,33,139,33],[182,35,139,35],[182,45,139,45],[182,46,139,46],[183,8,140,8],[183,15,140,15],[183,19,140,19],[184,6,141,4],[185,6,142,4],[186,0,143,0],[187,0,144,0],[188,4,142,4],[189,6,142,4,"key"],[189,9,142,4],[190,6,142,4,"value"],[190,11,142,4],[190,13,145,4],[190,22,145,4,"geojson"],[190,29,145,11,"geojson"],[190,30,145,11],[190,32,145,14],[191,8,146,8],[191,12,146,12],[191,13,146,13,"headers"],[191,20,146,20],[191,21,146,21,"set"],[191,24,146,24],[191,25,146,25],[191,33,146,33],[191,35,146,35],[191,57,146,57],[191,58,146,58],[192,8,147,8],[192,15,147,15],[192,19,147,19],[193,6,148,4],[194,6,149,4],[195,0,150,0],[196,0,151,0],[197,0,152,0],[198,0,153,0],[199,0,154,0],[200,0,155,0],[201,0,156,0],[202,0,157,0],[203,0,158,0],[204,0,159,0],[205,0,160,0],[206,0,161,0],[207,0,162,0],[208,0,163,0],[209,0,164,0],[210,0,165,0],[211,0,166,0],[212,0,167,0],[213,0,168,0],[214,0,169,0],[215,0,170,0],[216,0,171,0],[217,0,172,0],[218,0,173,0],[219,4,149,4],[220,6,149,4,"key"],[220,9,149,4],[221,6,149,4,"value"],[221,11,149,4],[221,13,174,4],[221,22,174,4,"explain"],[221,29,174,11,"explain"],[221,30,174,11],[221,32,174,121],[222,8,174,121],[222,12,174,121,"_ref4"],[222,17,174,121],[222,20,174,121,"arguments"],[222,29,174,121],[222,30,174,121,"length"],[222,36,174,121],[222,44,174,121,"arguments"],[222,53,174,121],[222,61,174,121,"undefined"],[222,70,174,121],[222,73,174,121,"arguments"],[222,82,174,121],[222,88,174,117],[222,89,174,118],[222,90,174,119],[223,10,174,119,"_ref4$analyze"],[223,23,174,119],[223,26,174,119,"_ref4"],[223,31,174,119],[223,32,174,14,"analyze"],[223,39,174,21],[224,10,174,14,"analyze"],[224,17,174,21],[224,20,174,21,"_ref4$analyze"],[224,33,174,21],[224,47,174,24],[224,52,174,29],[224,55,174,29,"_ref4$analyze"],[224,68,174,29],[225,10,174,29,"_ref4$verbose"],[225,23,174,29],[225,26,174,29,"_ref4"],[225,31,174,29],[225,32,174,31,"verbose"],[225,39,174,38],[226,10,174,31,"verbose"],[226,17,174,38],[226,20,174,38,"_ref4$verbose"],[226,33,174,38],[226,47,174,41],[226,52,174,46],[226,55,174,46,"_ref4$verbose"],[226,68,174,46],[227,10,174,46,"_ref4$settings"],[227,24,174,46],[227,27,174,46,"_ref4"],[227,32,174,46],[227,33,174,48,"settings"],[227,41,174,56],[228,10,174,48,"settings"],[228,18,174,56],[228,21,174,56,"_ref4$settings"],[228,35,174,56],[228,49,174,59],[228,54,174,64],[228,57,174,64,"_ref4$settings"],[228,71,174,64],[229,10,174,64,"_ref4$buffers"],[229,23,174,64],[229,26,174,64,"_ref4"],[229,31,174,64],[229,32,174,66,"buffers"],[229,39,174,73],[230,10,174,66,"buffers"],[230,17,174,73],[230,20,174,73,"_ref4$buffers"],[230,33,174,73],[230,47,174,76],[230,52,174,81],[230,55,174,81,"_ref4$buffers"],[230,68,174,81],[231,10,174,81,"_ref4$wal"],[231,19,174,81],[231,22,174,81,"_ref4"],[231,27,174,81],[231,28,174,83,"wal"],[231,31,174,86],[232,10,174,83,"wal"],[232,13,174,86],[232,16,174,86,"_ref4$wal"],[232,25,174,86],[232,39,174,89],[232,44,174,94],[232,47,174,94,"_ref4$wal"],[232,56,174,94],[233,10,174,94,"_ref4$format"],[233,22,174,94],[233,25,174,94,"_ref4"],[233,30,174,94],[233,31,174,96,"format"],[233,37,174,102],[234,10,174,96,"format"],[234,16,174,102],[234,19,174,102,"_ref4$format"],[234,31,174,102],[234,45,174,105],[234,51,174,111],[234,54,174,111,"_ref4$format"],[234,66,174,111],[235,8,175,8],[235,12,175,12,"_a"],[235,14,175,14],[236,8,176,8],[236,12,176,14,"options"],[236,19,176,21],[236,22,176,24],[236,23,177,12,"analyze"],[236,30,177,19],[236,33,177,22],[236,42,177,31],[236,45,177,34],[236,49,177,38],[236,51,178,12,"verbose"],[236,58,178,19],[236,61,178,22],[236,70,178,31],[236,73,178,34],[236,77,178,38],[236,79,179,12,"settings"],[236,87,179,20],[236,90,179,23],[236,100,179,33],[236,103,179,36],[236,107,179,40],[236,109,180,12,"buffers"],[236,116,180,19],[236,119,180,22],[236,128,180,31],[236,131,180,34],[236,135,180,38],[236,137,181,12,"wal"],[236,140,181,15],[236,143,181,18],[236,148,181,23],[236,151,181,26],[236,155,181,30],[236,156,182,9],[236,157,183,13,"filter"],[236,163,183,19],[236,164,183,20,"Boolean"],[236,171,183,27],[236,172,183,28],[236,173,184,13,"join"],[236,177,184,17],[236,178,184,18],[236,181,184,21],[236,182,184,22],[237,8,185,8],[238,8,186,8],[238,12,186,14,"forMediatype"],[238,24,186,26],[238,27,186,29],[238,28,186,30,"_a"],[238,30,186,32],[238,33,186,35],[238,37,186,39],[238,38,186,40,"headers"],[238,45,186,47],[238,46,186,48,"get"],[238,49,186,51],[238,50,186,52],[238,58,186,60],[238,59,186,61],[238,65,186,67],[238,69,186,71],[238,73,186,75,"_a"],[238,75,186,77],[238,80,186,82],[238,85,186,87],[238,86,186,88],[238,89,186,91,"_a"],[238,91,186,93],[238,94,186,96],[238,112,186,114],[239,8,187,8],[239,12,187,12],[239,13,187,13,"headers"],[239,20,187,20],[239,21,187,21,"set"],[239,24,187,24],[239,25,187,25],[239,33,187,33],[239,35,187,35],[239,65,187,65,"format"],[239,71,187,71],[239,81,187,81,"forMediatype"],[239,93,187,93],[239,107,187,107,"options"],[239,114,187,114],[239,117,187,117],[239,118,187,118],[240,8,188,8],[240,12,188,12,"format"],[240,18,188,18],[240,23,188,23],[240,29,188,29],[240,31,188,31],[241,10,189,12],[241,17,189,19],[241,21,189,23],[242,8,190,8],[242,9,190,9],[242,15,191,13],[243,10,192,12],[243,17,192,19],[243,21,192,23],[244,8,193,8],[245,6,194,4],[246,6,195,4],[247,0,196,0],[248,0,197,0],[249,0,198,0],[250,0,199,0],[251,4,195,4],[252,6,195,4,"key"],[252,9,195,4],[253,6,195,4,"value"],[253,11,195,4],[253,13,200,4],[253,22,200,4,"rollback"],[253,30,200,12,"rollback"],[253,31,200,12],[253,33,200,15],[254,8,201,8],[254,12,201,12],[254,13,201,13,"headers"],[254,20,201,20],[254,21,201,21,"append"],[254,27,201,27],[254,28,201,28],[254,36,201,36],[254,38,201,38],[254,51,201,51],[254,52,201,52],[255,8,202,8],[255,15,202,15],[255,19,202,19],[256,6,203,4],[257,6,204,4],[258,0,205,0],[259,0,206,0],[260,0,207,0],[261,0,208,0],[262,0,209,0],[263,4,204,4],[264,6,204,4,"key"],[264,9,204,4],[265,6,204,4,"value"],[265,11,204,4],[265,13,210,4],[265,22,210,4,"returns"],[265,29,210,11,"returns"],[265,30,210,11],[265,32,210,14],[266,8,211,8],[266,15,211,15],[266,19,211,19],[267,6,212,4],[268,6,213,4],[269,0,214,0],[270,0,215,0],[271,0,216,0],[272,0,217,0],[273,0,218,0],[274,4,213,4],[275,6,213,4,"key"],[275,9,213,4],[276,6,213,4,"value"],[276,11,213,4],[276,13,219,4],[276,22,219,4,"maxAffected"],[276,33,219,15,"maxAffected"],[276,34,219,16,"value"],[276,39,219,21],[276,41,219,23],[277,8,220,8],[277,12,220,12],[277,13,220,13,"headers"],[277,20,220,20],[277,21,220,21,"append"],[277,27,220,27],[277,28,220,28],[277,36,220,36],[277,38,220,38],[277,55,220,55],[277,56,220,56],[278,8,221,8],[278,12,221,12],[278,13,221,13,"headers"],[278,20,221,20],[278,21,221,21,"append"],[278,27,221,27],[278,28,221,28],[278,36,221,36],[278,38,221,38],[278,54,221,54,"value"],[278,59,221,59],[278,61,221,61],[278,62,221,62],[279,8,222,8],[279,15,222,15],[279,19,222,19],[280,6,223,4],[281,4,223,5],[282,2,223,5],[282,4,7,40,"PostgrestBuilder_1"],[282,22,7,58],[282,23,7,59,"default"],[282,30,7,66],[283,2,225,0,"exports"],[283,9,225,7],[283,10,225,8,"default"],[283,17,225,15],[283,20,225,18,"PostgrestTransformBuilder"],[283,45,225,43],[284,0,225,44],[284,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestTransformBuilder","select","split.map$argument_0","order","limit","range","abortSignal","single","maybeSingle","csv","geojson","explain","rollback","returns","maxAffected"],"mappings":"AAA;wDCC;CDE;AEG;ICU;iBCK;SDQ;KDK;IGmB;KHK;IIW;KJI;IKgB;KLO;IMM;KNG;IOO;KPG;IQO;KRW;ISI;KTG;IUI;KVG;IW0B;KXoB;IYM;KZG;IaO;KbE;IcO;KdI;CFC"},"hasCjsExports":true},"type":"js/module"}]}